(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.

Definition H :=
  (Blake2B.Make
    (existT (A := unit) (fun _ => _) tt
      {|
        Blake2B.SRegister.register_encoding {_} := Base58.register_encoding
      |}))
    (let name := "Blinded public key hash" in
    let title := "A blinded public key hash" in
    let b58check_prefix := "\001\0021\223" in
    let size :=
      Some (|Ed25519|).(S.SIGNATURE.Public_key_hash).(S.SPublic_key_hash.size)
      in
    existT (A := unit) (fun _ => _) tt
      {|
        Blake2B.PrefixedName.name := name;
        Blake2B.PrefixedName.title := title;
        Blake2B.PrefixedName.size := size;
        Blake2B.PrefixedName.b58check_prefix := b58check_prefix
      |}).

Definition t := (|H|).(S.HASH.t).

Definition name := (|H|).(S.HASH.name).

Definition title := (|H|).(S.HASH.title).

Definition pp := (|H|).(S.HASH.pp).

Definition pp_short := (|H|).(S.HASH.pp_short).

Definition op_eq := (|H|).(S.HASH.op_eq).

Definition op_ltgt := (|H|).(S.HASH.op_ltgt).

Definition op_lt := (|H|).(S.HASH.op_lt).

Definition op_lteq := (|H|).(S.HASH.op_lteq).

Definition op_gteq := (|H|).(S.HASH.op_gteq).

Definition op_gt := (|H|).(S.HASH.op_gt).

Definition compare := (|H|).(S.HASH.compare).

Definition equal := (|H|).(S.HASH.equal).

Definition max := (|H|).(S.HASH.max).

Definition min := (|H|).(S.HASH.min).

Definition hash_bytes := (|H|).(S.HASH.hash_bytes).

Definition hash_string := (|H|).(S.HASH.hash_string).

Definition zero := (|H|).(S.HASH.zero).

Definition size := (|H|).(S.HASH.size).

Definition to_bytes := (|H|).(S.HASH.to_bytes).

Definition of_bytes_opt := (|H|).(S.HASH.of_bytes_opt).

Definition of_bytes_exn := (|H|).(S.HASH.of_bytes_exn).

Definition to_b58check := (|H|).(S.HASH.to_b58check).

Definition to_short_b58check := (|H|).(S.HASH.to_short_b58check).

Definition of_b58check_exn := (|H|).(S.HASH.of_b58check_exn).

Definition of_b58check_opt := (|H|).(S.HASH.of_b58check_opt).

Definition b58check_encoding := (|H|).(S.HASH.b58check_encoding).

Definition encoding := (|H|).(S.HASH.encoding).

Definition rpc_arg := (|H|).(S.HASH.rpc_arg).

Definition to_path := (|H|).(S.HASH.to_path).

Definition of_path := (|H|).(S.HASH.of_path).

Definition of_path_exn := (|H|).(S.HASH.of_path_exn).

Definition prefix_path := (|H|).(S.HASH.prefix_path).

Definition path_length := (|H|).(S.HASH.path_length).

(* ❌ Top-level evaluations are ignored *)
(* top_level_evaluation *)

Definition of_ed25519_pkh
  (activation_code : MBytes.t)
  (pkh : (|Ed25519|).(S.SIGNATURE.Public_key_hash).(S.SPublic_key_hash.t))
  : t :=
  hash_bytes (Some activation_code)
    [
      (|Ed25519|).(S.SIGNATURE.Public_key_hash).(S.SPublic_key_hash.to_bytes)
        pkh
    ].

Definition activation_code : Set := MBytes.t.

Definition activation_code_size : int :=
  (|Ed25519|).(S.SIGNATURE.Public_key_hash).(S.SPublic_key_hash.size).

Definition activation_code_encoding : Data_encoding.encoding MBytes.t :=
  Data_encoding.Fixed.__bytes_value activation_code_size.

Definition activation_code_of_hex (h : string) : MBytes.t :=
  (* ❌ Sequences of instructions are ignored (operator ";") *)
  (* ❌ instruction_sequence ";" *)
  MBytes.of_hex (MBytes.Hex h).

Definition Index := H.
