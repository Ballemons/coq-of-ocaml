(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Alpha_context.
Require Tezos.Script_typed_ir.

Import Alpha_context.

Module Cost_of.
  Parameter manager_operation : Alpha_context.Gas.cost.
  
  Module Legacy.
    Parameter z_to_int64 : Alpha_context.Gas.cost.
    
    Parameter __hash_value : MBytes.t -> int -> Alpha_context.Gas.cost.
    
    Parameter map_to_list : forall {b c : Set},
      Script_typed_ir.map b c -> Alpha_context.Gas.cost.
    
    Parameter set_update : forall {a : Set},
      a -> bool -> Script_typed_ir.set a -> Alpha_context.Gas.cost.
  End Legacy.
  
  Module Interpreter.
    Parameter cycle : Alpha_context.Gas.cost.
    
    Parameter loop_cycle : Alpha_context.Gas.cost.
    
    Parameter loop_size : Alpha_context.Gas.cost.
    
    Parameter loop_iter : Alpha_context.Gas.cost.
    
    Parameter loop_map : Alpha_context.Gas.cost.
    
    Parameter nop : Alpha_context.Gas.cost.
    
    Parameter stack_op : Alpha_context.Gas.cost.
    
    Parameter stack_n_op : int -> Alpha_context.Gas.cost.
    
    Parameter bool_binop : forall {a b : Set}, a -> b -> Alpha_context.Gas.cost.
    
    Parameter bool_unop : forall {a : Set}, a -> Alpha_context.Gas.cost.
    
    Parameter pair : Alpha_context.Gas.cost.
    
    Parameter pair_access : Alpha_context.Gas.cost.
    
    Parameter __cons_value : Alpha_context.Gas.cost.
    
    Parameter variant_no_data : Alpha_context.Gas.cost.
    
    Parameter branch : Alpha_context.Gas.cost.
    
    Parameter concat_string : list string -> Alpha_context.Gas.cost.
    
    Parameter concat_bytes : list MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter slice_string : int -> Alpha_context.Gas.cost.
    
    Parameter map_mem : forall {a b : Set},
      a -> Script_typed_ir.map a b -> Alpha_context.Gas.cost.
    
    Parameter map_to_list : forall {a b : Set},
      Script_typed_ir.map a b -> Alpha_context.Gas.cost.
    
    Parameter map_get : forall {a b : Set},
      a -> Script_typed_ir.map a b -> Alpha_context.Gas.cost.
    
    Parameter map_update : forall {a b : Set},
      a -> option b -> Script_typed_ir.map a b -> Alpha_context.Gas.cost.
    
    Parameter map_size : Alpha_context.Gas.cost.
    
    Parameter set_to_list : forall {a : Set},
      Script_typed_ir.set a -> Alpha_context.Gas.cost.
    
    Parameter set_update : forall {a : Set},
      a -> bool -> Script_typed_ir.set a -> Alpha_context.Gas.cost.
    
    Parameter set_mem : forall {a : Set},
      a -> Script_typed_ir.set a -> Alpha_context.Gas.cost.
    
    Parameter mul :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter div :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter add :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter sub :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter abs : Alpha_context.Script_int.num -> Alpha_context.Gas.cost.
    
    Parameter neg : Alpha_context.Script_int.num -> Alpha_context.Gas.cost.
    
    Parameter __int_value : forall {a : Set}, a -> Alpha_context.Gas.cost.
    
    Parameter add_timestamp :
      Alpha_context.Script_timestamp.t -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter sub_timestamp :
      Alpha_context.Script_timestamp.t -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter diff_timestamps :
      Alpha_context.Script_timestamp.t -> Alpha_context.Script_timestamp.t ->
      Alpha_context.Gas.cost.
    
    Parameter empty_set : Alpha_context.Gas.cost.
    
    Parameter set_size : Alpha_context.Gas.cost.
    
    Parameter empty_map : Alpha_context.Gas.cost.
    
    Parameter int64_op : Alpha_context.Gas.cost.
    
    Parameter z_to_int64 : Alpha_context.Gas.cost.
    
    Parameter int64_to_z : Alpha_context.Gas.cost.
    
    Parameter logor :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter logand :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter logxor :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter lognot : Alpha_context.Script_int.num -> Alpha_context.Gas.cost.
    
    Parameter shift_left :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter shift_right :
      Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost.
    
    Parameter exec : Alpha_context.Gas.cost.
    
    Parameter push : Alpha_context.Gas.cost.
    
    Parameter compare_res : Alpha_context.Gas.cost.
    
    Parameter unpack_failed : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter address : Alpha_context.Gas.cost.
    
    Parameter contract : Alpha_context.Gas.cost.
    
    Parameter transfer : Alpha_context.Gas.cost.
    
    Parameter create_account : Alpha_context.Gas.cost.
    
    Parameter create_contract : Alpha_context.Gas.cost.
    
    Parameter implicit_account : Alpha_context.Gas.cost.
    
    Parameter set_delegate : Alpha_context.Gas.cost.
    
    Parameter balance : Alpha_context.Gas.cost.
    
    Parameter now : Alpha_context.Gas.cost.
    
    Parameter check_signature :
      Alpha_context.public_key -> MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter hash_key : Alpha_context.Gas.cost.
    
    Parameter hash_blake2b : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter hash_sha256 : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter hash_sha512 : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter steps_to_quota : Alpha_context.Gas.cost.
    
    Parameter source : Alpha_context.Gas.cost.
    
    Parameter self : Alpha_context.Gas.cost.
    
    Parameter amount : Alpha_context.Gas.cost.
    
    Parameter chain_id : Alpha_context.Gas.cost.
    
    Parameter wrap : Alpha_context.Gas.cost.
    
    Parameter compare : forall {a : Set},
      Script_typed_ir.comparable_ty -> a -> a -> Alpha_context.Gas.cost.
    
    Parameter apply : Alpha_context.Gas.cost.
  End Interpreter.
  
  Module Typechecking.
    Parameter cycle : Alpha_context.Gas.cost.
    
    Parameter __unit_value : Alpha_context.Gas.cost.
    
    Parameter __bool_value : Alpha_context.Gas.cost.
    
    Parameter tez : Alpha_context.Gas.cost.
    
    Parameter z : Z.t -> Alpha_context.Gas.cost.
    
    Parameter __string_value : int -> Alpha_context.Gas.cost.
    
    Parameter __bytes_value : int -> Alpha_context.Gas.cost.
    
    Parameter int_of_string : string -> Alpha_context.Gas.cost.
    
    Parameter string_timestamp : Alpha_context.Gas.cost.
    
    Parameter __key_value : Alpha_context.Gas.cost.
    
    Parameter key_hash : Alpha_context.Gas.cost.
    
    Parameter signature : Alpha_context.Gas.cost.
    
    Parameter chain_id : Alpha_context.Gas.cost.
    
    Parameter contract : Alpha_context.Gas.cost.
    
    Parameter get_script : Alpha_context.Gas.cost.
    
    Parameter contract_exists : Alpha_context.Gas.cost.
    
    Parameter pair : Alpha_context.Gas.cost.
    
    Parameter union : Alpha_context.Gas.cost.
    
    Parameter lambda : Alpha_context.Gas.cost.
    
    Parameter some : Alpha_context.Gas.cost.
    
    Parameter none : Alpha_context.Gas.cost.
    
    Parameter list_element : Alpha_context.Gas.cost.
    
    Parameter set_element : int -> Alpha_context.Gas.cost.
    
    Parameter map_element : int -> Alpha_context.Gas.cost.
    
    Parameter primitive_type : Alpha_context.Gas.cost.
    
    Parameter one_arg_type : Alpha_context.Gas.cost.
    
    Parameter two_arg_type : Alpha_context.Gas.cost.
    
    Parameter operation : int -> Alpha_context.Gas.cost.
    
    Parameter type_ : int -> Alpha_context.Gas.cost.
    
    Parameter instr : Script_typed_ir.instr -> Alpha_context.Gas.cost.
  End Typechecking.
  
  Module Unparse.
    Parameter prim_cost :
      int -> Alpha_context.Script.annot -> Alpha_context.Gas.cost.
    
    Parameter seq_cost : int -> Alpha_context.Gas.cost.
    
    Parameter cycle : Alpha_context.Gas.cost.
    
    Parameter __unit_value : Alpha_context.Gas.cost.
    
    Parameter __bool_value : Alpha_context.Gas.cost.
    
    Parameter z : Z.t -> Alpha_context.Gas.cost.
    
    Parameter __int_value :
      Alpha_context.Script_int.num -> Alpha_context.Gas.cost.
    
    Parameter tez : Alpha_context.Gas.cost.
    
    Parameter __string_value : string -> Alpha_context.Gas.cost.
    
    Parameter __bytes_value : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter timestamp :
      Alpha_context.Script_timestamp.t -> Alpha_context.Gas.cost.
    
    Parameter __key_value : Alpha_context.Gas.cost.
    
    Parameter key_hash : Alpha_context.Gas.cost.
    
    Parameter signature : Alpha_context.Gas.cost.
    
    Parameter operation : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter chain_id : MBytes.t -> Alpha_context.Gas.cost.
    
    Parameter contract : Alpha_context.Gas.cost.
    
    Parameter pair : Alpha_context.Gas.cost.
    
    Parameter union : Alpha_context.Gas.cost.
    
    Parameter some : Alpha_context.Gas.cost.
    
    Parameter none : Alpha_context.Gas.cost.
    
    Parameter list_element : Alpha_context.Gas.cost.
    
    Parameter set_element : Alpha_context.Gas.cost.
    
    Parameter map_element : Alpha_context.Gas.cost.
    
    Parameter one_arg_type :
      Alpha_context.Script.annot -> Alpha_context.Gas.cost.
    
    Parameter two_arg_type :
      Alpha_context.Script.annot -> Alpha_context.Gas.cost.
    
    Parameter set_to_list : forall {a : Set},
      Script_typed_ir.set a -> Alpha_context.Gas.cost.
    
    Parameter map_to_list : forall {a b : Set},
      Script_typed_ir.map a b -> Alpha_context.Gas.cost.
  End Unparse.
End Cost_of.
