(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Raw_context.
Require Tezos.Vote_repr.
Require Tezos.Voting_period_repr.

Parameter record_proposal :
  Raw_context.t -> (|Protocol_hash|).(S.HASH.t) ->
  (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) ->
  Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter recorded_proposal_count_for_delegate :
  Raw_context.t -> (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) ->
  Lwt.t (Error_monad.tzresult Z).

Parameter get_proposals :
  Raw_context.t ->
  Lwt.t
    (Error_monad.tzresult
      ((|Protocol_hash|).(S.HASH.Map).(S.INDEXES_Map.t) int32)).

Parameter clear_proposals : Raw_context.t -> Lwt.t Raw_context.t.

Module ballots.
  Record record : Set := Build {
    yay : int32;
    nay : int32;
    pass : int32 }.
  Definition with_yay yay (r : record) :=
    Build yay r.(nay) r.(pass).
  Definition with_nay nay (r : record) :=
    Build r.(yay) nay r.(pass).
  Definition with_pass pass (r : record) :=
    Build r.(yay) r.(nay) pass.
End ballots.
Definition ballots := ballots.record.

Parameter ballots_encoding : Data_encoding.t ballots.

Parameter has_recorded_ballot :
  Raw_context.t -> (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) ->
  Lwt.t bool.

Parameter record_ballot :
  Raw_context.t -> (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) ->
  Vote_repr.ballot -> Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter get_ballots : Raw_context.t -> Lwt.t (Error_monad.tzresult ballots).

Parameter get_ballot_list :
  Raw_context.t ->
  Lwt.t
    (list
      ((|Signature.Public_key_hash|).(S.SPublic_key_hash.t) * Vote_repr.ballot)).

Parameter clear_ballots : Raw_context.t -> Lwt.t Raw_context.t.

Parameter listings_encoding :
  Data_encoding.t
    (list ((|Signature.Public_key_hash|).(S.SPublic_key_hash.t) * int32)).

Parameter freeze_listings :
  Raw_context.t -> Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter clear_listings :
  Raw_context.t -> Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter listing_size : Raw_context.t -> Lwt.t (Error_monad.tzresult int32).

Parameter in_listings :
  Raw_context.t -> (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) ->
  Lwt.t bool.

Parameter get_listings :
  Raw_context.t ->
  Lwt.t (list ((|Signature.Public_key_hash|).(S.SPublic_key_hash.t) * int32)).

Parameter get_current_quorum :
  Raw_context.t -> Lwt.t (Error_monad.tzresult int32).

Parameter get_participation_ema :
  Raw_context.t -> Lwt.t (Error_monad.tzresult int32).

Parameter set_participation_ema :
  Raw_context.t -> int32 -> Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter get_current_period_kind :
  Raw_context.t -> Lwt.t (Error_monad.tzresult Voting_period_repr.kind).

Parameter set_current_period_kind :
  Raw_context.t -> Voting_period_repr.kind ->
  Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter get_current_proposal :
  Raw_context.t -> Lwt.t (Error_monad.tzresult (|Protocol_hash|).(S.HASH.t)).

Parameter init_current_proposal :
  Raw_context.t -> (|Protocol_hash|).(S.HASH.t) ->
  Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter clear_current_proposal :
  Raw_context.t -> Lwt.t (Error_monad.tzresult Raw_context.t).

Parameter init : Raw_context.t -> Lwt.t (Error_monad.tzresult Raw_context.t).
