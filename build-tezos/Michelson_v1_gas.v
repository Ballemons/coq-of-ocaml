(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Alpha_context.
Require Tezos.Script_int_repr.
Require Tezos.Script_typed_ir.

Import Alpha_context.

Import Alpha_context.Gas.

Module Cost_of.
  Definition log2 : int -> int :=
    let fix help (acc : int) (function_parameter : int) {struct acc} : int :=
      match function_parameter with
      | 0 => acc
      | n => help (Pervasives.op_plus acc 1) (Pervasives.op_div n 2)
      end in
    help 1.
  
  Definition z_bytes (z : Z.t) : int :=
    let bits := Z.numbits z in
    Pervasives.op_div (Pervasives.op_plus 7 bits) 8.
  
  Definition int_bytes (z : Alpha_context.Script_int.num) : int :=
    z_bytes (Alpha_context.Script_int.to_zint z).
  
  Definition timestamp_bytes (__t_value : Alpha_context.Script_timestamp.t)
    : int :=
    let z := Alpha_context.Script_timestamp.to_zint __t_value in
    z_bytes z.
  
  Fixpoint size_of_comparable {a : Set}
    (wit : Script_typed_ir.comparable_struct) (v : a) {struct wit} : int :=
    match (wit, v) with
    | (Script_typed_ir.Int_key _, _ as v) =>
      let v := obj_magic Script_int_repr.num v in
      obj_magic int (int_bytes v)
    
    | (Script_typed_ir.Nat_key _, _ as v) =>
      let v := obj_magic Script_int_repr.num v in
      obj_magic int (int_bytes v)
    
    | (Script_typed_ir.String_key _, _ as v) =>
      let v := obj_magic string v in
      obj_magic int (String.length v)
    
    | (Script_typed_ir.Bytes_key _, _ as v) =>
      let v := obj_magic MBytes.t v in
      obj_magic int (MBytes.length v)
    
    | (Script_typed_ir.Bool_key _, _) => obj_magic int 8
    
    | (Script_typed_ir.Key_hash_key _, _) =>
      obj_magic int (|Signature.Public_key_hash|).(S.SPublic_key_hash.size)
    
    | (Script_typed_ir.Timestamp_key _, _ as v) =>
      let v := obj_magic Alpha_context.Script_timestamp.t v in
      obj_magic int (timestamp_bytes v)
    
    | (Script_typed_ir.Address_key _, _) =>
      obj_magic int (|Signature.Public_key_hash|).(S.SPublic_key_hash.size)
    
    | (Script_typed_ir.Mutez_key _, _) => obj_magic int 8
    
    | (Script_typed_ir.Pair_key (l, _) (__r_value, _) _, _ as v) =>
      let 'existT _ [__0, __1, __Pair_key] [l, __r_value, v] :=
        obj_magic_exists (Es := [Set ** Set ** Set])
          (fun '[__0, __1, __Pair_key] =>
            [Script_typed_ir.comparable_struct **
              Script_typed_ir.comparable_struct ** __0 * __1]) [l, __r_value, v]
        in
      obj_magic int
      (let '(lval, rval) := v in
      Pervasives.op_plus (size_of_comparable l lval)
        (size_of_comparable __r_value rval))
    end.
  
  Definition __string_value (length : int) : Alpha_context.Gas.cost :=
    Alpha_context.Gas.alloc_bytes_cost length.
  
  Definition __bytes_value (length : int) : Alpha_context.Gas.cost :=
    Alpha_context.Gas.alloc_mbytes_cost length.
  
  Definition manager_operation : Alpha_context.Gas.cost :=
    Alpha_context.Gas.step_cost 10000.
  
  Module Legacy.
    Definition zint (z : Z.t) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_bits_cost (Z.numbits z).
    
    Definition set_to_list {item : Set} (Box : Script_typed_ir.set item)
      : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      Alpha_context.Gas.alloc_cost
        (Pervasives.op_star Box.(Script_typed_ir.Boxed_set.size) 2).
    
    Definition map_to_list {key value : Set}
      (Box : Script_typed_ir.map key value) : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      let size := Pervasives.snd Box.(Script_typed_ir.Boxed_map.boxed) in
      Alpha_context.Gas.op_starat 3 (Alpha_context.Gas.alloc_cost size).
    
    Definition z_to_int64 : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 2)
        (Alpha_context.Gas.alloc_cost 1).
    
    Definition __hash_value (data : MBytes.t) (len : int)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat
        (Alpha_context.Gas.op_starat 10
          (Alpha_context.Gas.step_cost (MBytes.length data)))
        (__bytes_value len).
    
    Definition set_access {elt : Set}
      (_key : elt) (Box : Script_typed_ir.set elt) : int :=
      let 'existS _ _ Box := Box in
      log2 Box.(Script_typed_ir.Boxed_set.size).
    
    Definition set_update {A B : Set}
      (__key_value : A) (_presence : B) (set : Script_typed_ir.set A)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_starat (set_access __key_value set)
        (Alpha_context.Gas.alloc_cost 3).
  End Legacy.
  
  Module Interpreter.
    Definition cycle : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition nop : Alpha_context.Gas.cost := Alpha_context.Gas.free.
    
    Definition stack_op : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition push : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition wrap : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition variant_no_data : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition branch : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition pair : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition pair_access : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition __cons_value : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition loop_size : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 5.
    
    Definition loop_cycle : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition loop_iter : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 20.
    
    Definition loop_map : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 30.
    
    Definition empty_set : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition set_to_list {elt : Set} (Box : Script_typed_ir.set elt)
      : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_star Box.(Script_typed_ir.Boxed_set.size) 20).
    
    Definition set_mem {elt : Set}
      (__elt_value : elt) (Box : Script_typed_ir.set elt)
      : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      let elt_bytes :=
        size_of_comparable Box.(Script_typed_ir.Boxed_set.elt_ty) __elt_value in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_star
          (Pervasives.op_plus 1 (Pervasives.op_div elt_bytes 82))
          (log2 Box.(Script_typed_ir.Boxed_set.size))).
    
    Definition set_update {elt : Set}
      (__elt_value : elt) (function_parameter : bool)
      : Script_typed_ir.set elt -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun Box =>
        let 'existS _ _ Box := Box in
        let elt_bytes :=
          size_of_comparable Box.(Script_typed_ir.Boxed_set.elt_ty) __elt_value
          in
        Alpha_context.Gas.atomic_step_cost
          (Pervasives.op_star
            (Pervasives.op_plus 1 (Pervasives.op_div elt_bytes 82))
            (log2 Box.(Script_typed_ir.Boxed_set.size))).
    
    Definition set_size : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition empty_map : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition map_to_list {key value : Set}
      (Box : Script_typed_ir.map key value) : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      let size := Pervasives.snd Box.(Script_typed_ir.Boxed_map.boxed) in
      Alpha_context.Gas.atomic_step_cost (Pervasives.op_star size 20).
    
    Definition map_access {key value : Set}
      (__key_value : key) (Box : Script_typed_ir.map key value)
      : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      let map_card := Pervasives.snd Box.(Script_typed_ir.Boxed_map.boxed) in
      let key_bytes :=
        size_of_comparable Box.(Script_typed_ir.Boxed_map.key_ty) __key_value in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_star
          (Pervasives.op_plus 1 (Pervasives.op_div key_bytes 70))
          (log2 map_card)).
    
    Definition map_mem {A B : Set}
      : A -> Script_typed_ir.map A B -> Alpha_context.Gas.cost := map_access.
    
    Definition map_get {A B : Set}
      : A -> Script_typed_ir.map A B -> Alpha_context.Gas.cost := map_access.
    
    Definition map_update {key value : Set}
      (__key_value : key) (_value : option value)
      (Box : Script_typed_ir.map key value) : Alpha_context.Gas.cost :=
      let 'existS _ _ Box := Box in
      let map_card := Pervasives.snd Box.(Script_typed_ir.Boxed_map.boxed) in
      let key_bytes :=
        size_of_comparable Box.(Script_typed_ir.Boxed_map.key_ty) __key_value in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_star
          (Pervasives.op_plus 1 (Pervasives.op_div key_bytes 38))
          (log2 map_card)).
    
    Definition map_size : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition add_timestamp
      (t1 : Alpha_context.Script_timestamp.t)
      (t2 : Alpha_context.Script_int.num) : Alpha_context.Gas.cost :=
      let bytes1 := timestamp_bytes t1 in
      let bytes2 := int_bytes t2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.max) bytes1 bytes2) 62)).
    
    Definition sub_timestamp
      : Alpha_context.Script_timestamp.t -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost := add_timestamp.
    
    Definition diff_timestamps
      (t1 : Alpha_context.Script_timestamp.t)
      (t2 : Alpha_context.Script_timestamp.t) : Alpha_context.Gas.cost :=
      let bytes1 := timestamp_bytes t1 in
      let bytes2 := timestamp_bytes t2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.max) bytes1 bytes2) 62)).
    
    Fixpoint concat_loop {A : Set} (l : list A) (acc : int) {struct l} : int :=
      match l with
      | [] => 30
      | cons _ tl => concat_loop tl (Pervasives.op_plus acc 30)
      end.
    
    Definition concat_string {A : Set} (string_list : list A)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost (concat_loop string_list 0).
    
    Definition slice_string (string_length : int) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 40 (Pervasives.op_div string_length 70)).
    
    Definition concat_bytes {A : Set} (bytes_list : list A)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost (concat_loop bytes_list 0).
    
    Definition int64_op : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 61.
    
    Definition z_to_int64 : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 20.
    
    Definition int64_to_z : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 20.
    
    Definition bool_binop {A B : Set} (function_parameter : A)
      : B -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun function_parameter =>
        let '_ := function_parameter in
        Alpha_context.Gas.atomic_step_cost 10.
    
    Definition bool_unop {A : Set} (function_parameter : A)
      : Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition abs (__int_value : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 61 (Pervasives.op_div (int_bytes __int_value) 70)).
    
    Definition __int_value {A : Set} (_int : A) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.free.
    
    Definition neg : Alpha_context.Script_int.num -> Alpha_context.Gas.cost :=
      abs.
    
    Definition add
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div
            ((|Compare.Int|).(Compare.S.max) (int_bytes i1) (int_bytes i2)) 62)).
    
    Definition sub
      : Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost := add.
    
    Definition mul
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      let __bytes_value :=
        (|Compare.Int|).(Compare.S.max) (int_bytes i1) (int_bytes i2) in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_star (Pervasives.op_div __bytes_value 6)
            (log2 __bytes_value))).
    
    Definition indic_lt
      (x : (|Compare.Int|).(Compare.S.t)) (y : (|Compare.Int|).(Compare.S.t))
      : int :=
      if (|Compare.Int|).(Compare.S.op_lt) x y then
        1
      else
        0.
    
    Definition div
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      let bytes1 := int_bytes i1 in
      let bytes2 := int_bytes i2 in
      let cost :=
        Pervasives.op_star
          (Pervasives.op_star (indic_lt bytes2 bytes1)
            (Pervasives.op_minus bytes1 bytes2)) bytes2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51 (Pervasives.op_div cost 3151)).
    
    Definition shift_left {A B : Set} (_i : A) (_shift_bits : B)
      : Alpha_context.Gas.cost := Alpha_context.Gas.atomic_step_cost 30.
    
    Definition shift_right {A B : Set} (_i : A) (_shift_bits : B)
      : Alpha_context.Gas.cost := Alpha_context.Gas.atomic_step_cost 30.
    
    Definition logor
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      let bytes1 := int_bytes i1 in
      let bytes2 := int_bytes i2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.max) bytes1 bytes2) 70)).
    
    Definition logand
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      let bytes1 := int_bytes i1 in
      let bytes2 := int_bytes i2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.min) bytes1 bytes2) 70)).
    
    Definition logxor
      : Alpha_context.Script_int.num -> Alpha_context.Script_int.num ->
      Alpha_context.Gas.cost := logor.
    
    Definition lognot (i : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51 (Pervasives.op_div (int_bytes i) 20)).
    
    Definition exec : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition compare_bool {A B : Set} (function_parameter : A)
      : B -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun function_parameter =>
        let '_ := function_parameter in
        Alpha_context.Gas.atomic_step_cost 30.
    
    Definition compare_string (s1 : string) (s2 : string)
      : Alpha_context.Gas.cost :=
      let bytes1 := String.length s1 in
      let bytes2 := String.length s2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 30
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.min) bytes1 bytes2) 123)).
    
    Definition compare_bytes (b1 : MBytes.t) (b2 : MBytes.t)
      : Alpha_context.Gas.cost :=
      let bytes1 := MBytes.length b1 in
      let bytes2 := MBytes.length b2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 30
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.min) bytes1 bytes2) 123)).
    
    Definition compare_tez {A B : Set} (function_parameter : A)
      : B -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun function_parameter =>
        let '_ := function_parameter in
        Alpha_context.Gas.atomic_step_cost 30.
    
    Definition compare_zint
      (i1 : Alpha_context.Script_int.num) (i2 : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div
            ((|Compare.Int|).(Compare.S.min) (int_bytes i1) (int_bytes i2)) 82)).
    
    Definition compare_key_hash {A B : Set} (function_parameter : A)
      : B -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun function_parameter =>
        let '_ := function_parameter in
        Alpha_context.Gas.atomic_step_cost 92.
    
    Definition compare_timestamp
      (t1 : Alpha_context.Script_timestamp.t)
      (t2 : Alpha_context.Script_timestamp.t) : Alpha_context.Gas.cost :=
      let bytes1 := timestamp_bytes t1 in
      let bytes2 := timestamp_bytes t2 in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 51
          (Pervasives.op_div ((|Compare.Int|).(Compare.S.min) bytes1 bytes2) 82)).
    
    Definition compare_address {A B : Set} (function_parameter : A)
      : B -> Alpha_context.Gas.cost :=
      let '_ := function_parameter in
      fun function_parameter =>
        let '_ := function_parameter in
        Alpha_context.Gas.atomic_step_cost 92.
    
    Definition compare_res : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 30.
    
    Definition unpack_failed (__bytes_value : MBytes.t)
      : Alpha_context.Gas.cost :=
      let len := MBytes.length __bytes_value in
      Alpha_context.Gas.op_plusat
        (Alpha_context.Gas.op_starat len (Alpha_context.Gas.alloc_mbytes_cost 1))
        (Alpha_context.Gas.op_starat len
          (Alpha_context.Gas.op_starat (log2 len)
            (Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 3)
              (Alpha_context.Gas.step_cost 1)))).
    
    Definition address : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition contract : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 10000.
    
    Definition transfer : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 10.
    
    Definition create_account : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 10.
    
    Definition create_contract : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 10.
    
    Definition implicit_account : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 10.
    
    Definition set_delegate : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 10)
        (Alpha_context.Gas.write_bytes_cost (Z.of_int 32)).
    
    Definition balance : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition now : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition check_signature_secp256k1 (__bytes_value : int)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 10342 (Pervasives.op_div __bytes_value 5)).
    
    Definition check_signature_ed25519 (__bytes_value : int)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 36864 (Pervasives.op_div __bytes_value 5)).
    
    Definition check_signature_p256 (__bytes_value : int)
      : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 36864 (Pervasives.op_div __bytes_value 5)).
    
    Definition check_signature
      (pkey : Signature.public_key) (__bytes_value : MBytes.t)
      : Alpha_context.Gas.cost :=
      match pkey with
      | Signature.Ed25519 _ =>
        check_signature_ed25519 (MBytes.length __bytes_value)
      | Signature.Secp256k1 _ =>
        check_signature_secp256k1 (MBytes.length __bytes_value)
      | Signature.P256 _ => check_signature_p256 (MBytes.length __bytes_value)
      end.
    
    Definition hash_key : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 30.
    
    Definition hash_blake2b (__b_value : MBytes.t) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 102 (Pervasives.op_div (MBytes.length __b_value) 5)).
    
    Definition hash_sha256 (__b_value : MBytes.t) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 409 (MBytes.length __b_value)).
    
    Definition hash_sha512 (__b_value : MBytes.t) : Alpha_context.Gas.cost :=
      let __bytes_value := MBytes.length __b_value in
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 409
          (Pervasives.op_plus (Pervasives.lsr __bytes_value 1)
            (Pervasives.lsr __bytes_value 4))).
    
    Definition steps_to_quota : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition source : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition self : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition amount : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost 10.
    
    Definition chain_id : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 1.
    
    Definition stack_n_op (n : int) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.atomic_step_cost
        (Pervasives.op_plus 20
          (Pervasives.op_plus
            (Pervasives.op_plus (Pervasives.lsr n 1) (Pervasives.lsr n 2))
            (Pervasives.lsr n 4))).
    
    Definition apply : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 8)
        (Alpha_context.Gas.step_cost 1).
    
    Fixpoint compare {a : Set}
      (ty : Script_typed_ir.comparable_struct) (x : a) (y : a) {struct ty}
      : Alpha_context.Gas.cost :=
      match (ty, x, y) with
      | (Script_typed_ir.Bool_key _, _ as x, _ as y) =>
        let '[x, y] := obj_magic [bool ** bool] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_bool x y)
      
      | (Script_typed_ir.String_key _, _ as x, _ as y) =>
        let '[x, y] := obj_magic [string ** string] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_string x y)
      
      | (Script_typed_ir.Bytes_key _, _ as x, _ as y) =>
        let '[x, y] := obj_magic [MBytes.t ** MBytes.t] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_bytes x y)
      
      | (Script_typed_ir.Mutez_key _, x, y) =>
        let '[x, y] := obj_magic [a ** a] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_tez x y)
      
      | (Script_typed_ir.Int_key _, _ as x, _ as y) =>
        let '[x, y] :=
          obj_magic [Script_int_repr.num ** Script_int_repr.num] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_zint x y)
      
      | (Script_typed_ir.Nat_key _, _ as x, _ as y) =>
        let '[x, y] :=
          obj_magic [Script_int_repr.num ** Script_int_repr.num] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_zint x y)
      
      | (Script_typed_ir.Key_hash_key _, x, y) =>
        let '[x, y] := obj_magic [a ** a] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_key_hash x y)
      
      | (Script_typed_ir.Timestamp_key _, _ as x, _ as y) =>
        let '[x, y] :=
          obj_magic
            [Alpha_context.Script_timestamp.t **
              Alpha_context.Script_timestamp.t] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_timestamp x y)
      
      | (Script_typed_ir.Address_key _, x, y) =>
        let '[x, y] := obj_magic [a ** a] [x, y] in
        obj_magic Alpha_context.Gas.cost (compare_address x y)
      
      | (Script_typed_ir.Pair_key (tl, _) (tr, _) _, _ as x, _ as y) =>
        let 'existT _ [__0, __1, __Pair_key] [tl, tr, x, y] :=
          obj_magic_exists (Es := [Set ** Set ** Set])
            (fun '[__0, __1, __Pair_key] =>
              [Script_typed_ir.comparable_struct **
                Script_typed_ir.comparable_struct ** __0 * __1 ** __0 * __1])
            [tl, tr, x, y] in
        obj_magic Alpha_context.Gas.cost
        (let '(xl, xr) := x in
        let '(yl, yr) := y in
        Alpha_context.Gas.op_plusat (compare tl xl yl) (compare tr xr yr))
      end.
  End Interpreter.
  
  Module Typechecking.
    Definition cycle : Alpha_context.Gas.cost := Alpha_context.Gas.step_cost 1.
    
    Definition __bool_value : Alpha_context.Gas.cost := Alpha_context.Gas.free.
    
    Definition __unit_value : Alpha_context.Gas.cost := Alpha_context.Gas.free.
    
    Definition __string_value : int -> Alpha_context.Gas.cost := __string_value.
    
    Definition __bytes_value : int -> Alpha_context.Gas.cost := __bytes_value.
    
    Definition z : Z.t -> Alpha_context.Gas.cost := Legacy.zint.
    
    Definition int_of_string (str : string) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost (Pervasives.op_div (String.length str) 5).
    
    Definition tez : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 1)
        (Alpha_context.Gas.alloc_cost 1).
    
    Definition string_timestamp : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 3)
        (Alpha_context.Gas.alloc_cost 3).
    
    Definition __key_value : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 3)
        (Alpha_context.Gas.alloc_cost 3).
    
    Definition key_hash : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 1)
        (Alpha_context.Gas.alloc_cost 1).
    
    Definition signature : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 1)
        (Alpha_context.Gas.alloc_cost 1).
    
    Definition chain_id : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 1)
        (Alpha_context.Gas.alloc_cost 1).
    
    Definition contract : Alpha_context.Gas.cost :=
      Alpha_context.Gas.step_cost 5.
    
    Definition get_script : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 20)
        (Alpha_context.Gas.alloc_cost 5).
    
    Definition contract_exists : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.step_cost 15)
        (Alpha_context.Gas.alloc_cost 5).
    
    Definition pair : Alpha_context.Gas.cost := Alpha_context.Gas.alloc_cost 2.
    
    Definition union : Alpha_context.Gas.cost := Alpha_context.Gas.alloc_cost 1.
    
    Definition lambda : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 5)
        (Alpha_context.Gas.step_cost 3).
    
    Definition some : Alpha_context.Gas.cost := Alpha_context.Gas.alloc_cost 1.
    
    Definition none : Alpha_context.Gas.cost := Alpha_context.Gas.alloc_cost 0.
    
    Definition list_element : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 2)
        (Alpha_context.Gas.step_cost 1).
    
    Definition set_element (size : int) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_starat (log2 size)
        (Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 3)
          (Alpha_context.Gas.step_cost 2)).
    
    Definition map_element (size : int) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_starat (log2 size)
        (Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 4)
          (Alpha_context.Gas.step_cost 2)).
    
    Definition primitive_type : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 1.
    
    Definition one_arg_type : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 2.
    
    Definition two_arg_type : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 3.
    
    Definition operation (__b_value : int) : Alpha_context.Gas.cost :=
      __bytes_value __b_value.
    
    Definition type_ (nb_args : int) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost (Pervasives.op_plus nb_args 1).
    
    Definition instr (i : Script_typed_ir.instr) : Alpha_context.Gas.cost :=
      Alpha_context.Gas.op_plusat (Alpha_context.Gas.alloc_cost 1)
        match i with
        | Script_typed_ir.Drop => Alpha_context.Gas.alloc_cost 0
        
        | Script_typed_ir.Dup => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Swap => Alpha_context.Gas.alloc_cost 0
        
        | Script_typed_ir.Const _ => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Cons_pair => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Car => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Cdr => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Cons_some => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Cons_none _ => Alpha_context.Gas.alloc_cost 3
        
        | Script_typed_ir.If_none _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Left => Alpha_context.Gas.alloc_cost 3
        
        | Script_typed_ir.Right => Alpha_context.Gas.alloc_cost 3
        
        | Script_typed_ir.If_left _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Cons_list => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Nil => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.If_cons _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.List_map _ => Alpha_context.Gas.alloc_cost 5
        
        | Script_typed_ir.List_iter _ => Alpha_context.Gas.alloc_cost 4
        
        | Script_typed_ir.List_size => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Empty_set _ => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Set_iter _ => Alpha_context.Gas.alloc_cost 4
        
        | Script_typed_ir.Set_mem => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Set_update => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Set_size => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Empty_map _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Map_map _ => Alpha_context.Gas.alloc_cost 5
        
        | Script_typed_ir.Map_iter _ => Alpha_context.Gas.alloc_cost 4
        
        | Script_typed_ir.Map_mem => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Map_get => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Map_update => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Map_size => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Empty_big_map _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Big_map_mem => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Big_map_get => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Big_map_update => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Concat_string => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Concat_string_pair => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Concat_bytes => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Concat_bytes_pair => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Slice_string => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Slice_bytes => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.String_size => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Bytes_size => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_seconds_to_timestamp =>
          Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_timestamp_to_seconds =>
          Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sub_timestamp_seconds =>
          Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Diff_timestamps => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_tez => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sub_tez => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_teznat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_nattez => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_teznat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_tez => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Or => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.And => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Xor => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Not => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Is_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Neg_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Neg_int => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Abs_int => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Int_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_intint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_intnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_natint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Add_natnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sub_int => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_intint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_intnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_natint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Mul_natnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_intint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_intnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_natint => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ediv_natnat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Lsl_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Lsr_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Or_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.And_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.And_int_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Xor_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Not_nat => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Not_int => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Seq _ _ => Alpha_context.Gas.alloc_cost 8
        
        | Script_typed_ir.If _ _ => Alpha_context.Gas.alloc_cost 8
        
        | Script_typed_ir.Loop _ => Alpha_context.Gas.alloc_cost 4
        
        | Script_typed_ir.Loop_left _ => Alpha_context.Gas.alloc_cost 5
        
        | Script_typed_ir.Dip _ => Alpha_context.Gas.alloc_cost 4
        
        | Script_typed_ir.Exec => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Apply _ => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Lambda _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Failwith _ => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Nop => Alpha_context.Gas.alloc_cost 0
        
        | Script_typed_ir.Compare _ => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Eq => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Neq => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Lt => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Gt => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Le => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Ge => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Address => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Contract _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Transfer_tokens => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Create_account => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Implicit_account => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Create_contract _ _ _ _ =>
          Alpha_context.Gas.alloc_cost 8
        
        | Script_typed_ir.Create_contract_2 _ _ _ _ =>
          Alpha_context.Gas.alloc_cost 7
        
        | Script_typed_ir.Set_delegate => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Now => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Balance => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Check_signature => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Hash_key => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Pack _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Unpack _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Blake2b => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sha256 => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sha512 => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Steps_to_quota => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Source => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Sender => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Self _ _ => Alpha_context.Gas.alloc_cost 2
        
        | Script_typed_ir.Amount => Alpha_context.Gas.alloc_cost 1
        
        | Script_typed_ir.Dig n _ =>
          Alpha_context.Gas.op_starat n (Alpha_context.Gas.alloc_cost 1)
        
        | Script_typed_ir.Dug n _ =>
          Alpha_context.Gas.op_starat n (Alpha_context.Gas.alloc_cost 1)
        
        | Script_typed_ir.Dipn n _ _ =>
          Alpha_context.Gas.op_starat n (Alpha_context.Gas.alloc_cost 1)
        
        | Script_typed_ir.Dropn n _ =>
          Alpha_context.Gas.op_starat n (Alpha_context.Gas.alloc_cost 1)
        
        | Script_typed_ir.ChainId => Alpha_context.Gas.alloc_cost 1
        end.
  End Typechecking.
  
  Module Unparse.
    Definition prim_cost (l : int) (annot : Alpha_context.Script.annot)
      : Alpha_context.Gas.cost :=
      Alpha_context.Script.prim_node_cost_nonrec_of_length l annot.
    
    Definition seq_cost : int -> Alpha_context.Gas.cost :=
      Alpha_context.Script.seq_node_cost_nonrec_of_length.
    
    Definition string_cost (length : int) : Alpha_context.Gas.cost :=
      Alpha_context.Script.string_node_cost_of_length length.
    
    Definition cycle : Alpha_context.Gas.cost := Alpha_context.Gas.step_cost 1.
    
    Definition __bool_value : Alpha_context.Gas.cost := prim_cost 0 nil.
    
    Definition __unit_value : Alpha_context.Gas.cost := prim_cost 0 nil.
    
    Definition __string_value (s : string) : Alpha_context.Gas.cost :=
      Alpha_context.Script.string_node_cost s.
    
    Definition __bytes_value (s : MBytes.t) : Alpha_context.Gas.cost :=
      Alpha_context.Script.bytes_node_cost s.
    
    Definition z (i : Z.t) : Alpha_context.Gas.cost :=
      Alpha_context.Script.int_node_cost i.
    
    Definition __int_value (i : Alpha_context.Script_int.num)
      : Alpha_context.Gas.cost :=
      Alpha_context.Script.int_node_cost (Alpha_context.Script_int.to_zint i).
    
    Definition tez : Alpha_context.Gas.cost :=
      Alpha_context.Script.int_node_cost_of_numbits 60.
    
    Definition timestamp (x : Alpha_context.Script_timestamp.t)
      : Alpha_context.Gas.cost :=
      __int_value
        (Alpha_context.Script_int.of_zint
          (Alpha_context.Script_timestamp.to_zint x)).
    
    Definition operation (__bytes_value : MBytes.t) : Alpha_context.Gas.cost :=
      Alpha_context.Script.bytes_node_cost __bytes_value.
    
    Definition chain_id (__bytes_value : MBytes.t) : Alpha_context.Gas.cost :=
      Alpha_context.Script.bytes_node_cost __bytes_value.
    
    Definition __key_value : Alpha_context.Gas.cost := string_cost 54.
    
    Definition key_hash : Alpha_context.Gas.cost := string_cost 36.
    
    Definition signature : Alpha_context.Gas.cost := string_cost 128.
    
    Definition contract : Alpha_context.Gas.cost := string_cost 36.
    
    Definition pair : Alpha_context.Gas.cost := prim_cost 2 nil.
    
    Definition union : Alpha_context.Gas.cost := prim_cost 1 nil.
    
    Definition some : Alpha_context.Gas.cost := prim_cost 1 nil.
    
    Definition none : Alpha_context.Gas.cost := prim_cost 0 nil.
    
    Definition list_element : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 2.
    
    Definition set_element : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 2.
    
    Definition map_element : Alpha_context.Gas.cost :=
      Alpha_context.Gas.alloc_cost 2.
    
    Definition one_arg_type
      : Alpha_context.Script.annot -> Alpha_context.Gas.cost := prim_cost 1.
    
    Definition two_arg_type
      : Alpha_context.Script.annot -> Alpha_context.Gas.cost := prim_cost 2.
    
    Definition set_to_list {A : Set}
      : Script_typed_ir.set A -> Alpha_context.Gas.cost := Legacy.set_to_list.
    
    Definition map_to_list {A B : Set}
      : Script_typed_ir.map A B -> Alpha_context.Gas.cost := Legacy.map_to_list.
  End Unparse.
End Cost_of.
