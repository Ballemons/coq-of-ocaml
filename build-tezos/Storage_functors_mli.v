(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Raw_context.
Require Tezos.Storage_description.
Require Tezos.Storage_sigs.

Import Storage_sigs.

Parameter Registered : {_ : unit & REGISTER.signature}.

Parameter Ghost : {_ : unit & REGISTER.signature}.

Parameter Make_subcontext :
  forall (R : {_ : unit & REGISTER.signature}),
    (forall (C : {t : _ & Raw_context.T.signature t}),
      (forall (N : {_ : unit & NAME.signature}),
        {_ : unit & Raw_context.T.signature (|C|).(Raw_context.T.t)})).

Parameter Make_single_data_storage :
  forall (R : {_ : unit & REGISTER.signature}),
    (forall (C : {t : _ & Raw_context.T.signature t}),
      (forall (N : {_ : unit & NAME.signature}),
        (forall (V : {t : _ & VALUE.signature t}),
          {_ : unit &
            Single_data_storage.signature (|C|).(Raw_context.T.t)
              (|V|).(Storage_sigs.VALUE.t)}))).

Module INDEX.
  Record signature {t : Set} {ipath : Set -> Set} : Set := {
    t := t;
    path_length : int;
    to_path : t -> list string -> list string;
    of_path : list string -> option t;
    ipath := ipath;
    args : forall {a : Set}, unit -> Storage_description.args a t (ipath a);
  }.
  Arguments signature : clear implicits.
End INDEX.

Parameter Pair :
  forall (I1 : {'[t, ipath] : _ & INDEX.signature t ipath}),
    (forall (I2 : {'[t, ipath] : _ & INDEX.signature t ipath}),
      {ipath : _ & INDEX.signature ((|I1|).(INDEX.t) * (|I2|).(INDEX.t)) ipath}).

Parameter Make_data_set_storage :
  forall (C : {t : _ & Raw_context.T.signature t}),
    (forall (I : {'[t, ipath] : _ & INDEX.signature t ipath}),
      {_ : unit &
        Data_set_storage.signature (|C|).(Raw_context.T.t) (|I|).(INDEX.t)}).

Parameter Make_indexed_data_storage :
  forall (C : {t : _ & Raw_context.T.signature t}),
    (forall (I : {'[t, ipath] : _ & INDEX.signature t ipath}),
      (forall (V : {t : _ & VALUE.signature t}),
        {_ : unit &
          Indexed_data_storage.signature (|C|).(Raw_context.T.t) (|I|).(INDEX.t)
            (|V|).(Storage_sigs.VALUE.t)})).

Parameter Make_indexed_carbonated_data_storage :
  forall (C : {t : _ & Raw_context.T.signature t}),
    (forall (I : {'[t, ipath] : _ & INDEX.signature t ipath}),
      (forall (V : {t : _ & VALUE.signature t}),
        {_ : unit &
          Non_iterable_indexed_carbonated_data_storage.signature
            (|C|).(Raw_context.T.t) (|I|).(INDEX.t) (|V|).(Storage_sigs.VALUE.t)})).

Parameter Make_indexed_data_snapshotable_storage :
  forall (C : {t : _ & Raw_context.T.signature t}),
    (forall (Snapshot : {'[t, ipath] : _ & INDEX.signature t ipath}),
      (forall (I : {'[t, ipath] : _ & INDEX.signature t ipath}),
        (forall (V : {t : _ & VALUE.signature t}),
          {_ : unit &
            Indexed_data_snapshotable_storage.signature (|Snapshot|).(INDEX.t)
              (|I|).(INDEX.t) (|C|).(Raw_context.T.t)
              (|V|).(Storage_sigs.VALUE.t)}))).

Parameter Make_indexed_subcontext :
  forall (C : {t : _ & Raw_context.T.signature t}),
    (forall (I : {'[t, ipath] : _ & INDEX.signature t ipath}),
      {_ : unit &
        Indexed_raw_context.signature (|C|).(Raw_context.T.t) (|I|).(INDEX.t)
          (fun (a : Set) => (|I|).(INDEX.ipath) a)}).

Module WRAPPER.
  Record signature {t key : Set} : Set := {
    t := t;
    key := key;
    wrap : t -> key;
    unwrap : key -> option t;
  }.
  Arguments signature : clear implicits.
End WRAPPER.

Parameter Wrap_indexed_data_storage :
  forall (C :
    {'[t, key, value] : _ & Indexed_data_storage.signature t key value}),
    (forall (K :
      {t : _ &
        WRAPPER.signature t (|C|).(Storage_sigs.Indexed_data_storage.key)}),
      {_ : unit &
        Indexed_data_storage.signature
          (|C|).(Storage_sigs.Indexed_data_storage.t) (|K|).(WRAPPER.t)
          (|C|).(Storage_sigs.Indexed_data_storage.value)}).
