(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Require Tezos.Alpha_context.
Require Tezos.Script_tc_errors.

Import Alpha_context.

Import Alpha_context.Script.

Import Script_tc_errors.

Definition type_map_enc
  : Data_encoding.encoding
    (list
      (Alpha_context.Script.location *
        (list (Alpha_context.Script.expr * list string) *
          list (Alpha_context.Script.expr * list string)))) :=
  let stack_enc :=
    Data_encoding.__list_value None
      (Data_encoding.tup2 Alpha_context.Script.expr_encoding
        (Data_encoding.__list_value None Data_encoding.__string_value)) in
  Data_encoding.__list_value None
    (Data_encoding.conv
      (fun function_parameter =>
        let '(loc, (bef, aft)) := function_parameter in
        (loc, bef, aft))
      (fun function_parameter =>
        let '(loc, bef, aft) := function_parameter in
        (loc, (bef, aft))) None
      (Data_encoding.obj3
        (Data_encoding.req None None "location"
          Alpha_context.Script.location_encoding)
        (Data_encoding.req None None "stack_before" stack_enc)
        (Data_encoding.req None None "stack_after" stack_enc))).

Definition stack_ty_enc
  : Data_encoding.encoding (list (Alpha_context.Script.expr * list string)) :=
  Data_encoding.__list_value None
    (Data_encoding.obj2
      (Data_encoding.req None None "type" Alpha_context.Script.expr_encoding)
      (Data_encoding.dft None None "annots"
        (Data_encoding.__list_value None Data_encoding.__string_value) nil)).

(* ‚ùå Top-level evaluations are ignored *)
(* top_level_evaluation *)
