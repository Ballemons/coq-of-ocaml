(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Storage_description.

Parameter t : Set.

Definition cycle : Set := t.

Parameter Included_S : {_ : unit & Compare.S.signature t}.

Definition op_eq : t -> t -> bool := (|Included_S|).(Compare.S.op_eq).

Definition op_ltgt : t -> t -> bool := (|Included_S|).(Compare.S.op_ltgt).

Definition op_lt : t -> t -> bool := (|Included_S|).(Compare.S.op_lt).

Definition op_lteq : t -> t -> bool := (|Included_S|).(Compare.S.op_lteq).

Definition op_gteq : t -> t -> bool := (|Included_S|).(Compare.S.op_gteq).

Definition op_gt : t -> t -> bool := (|Included_S|).(Compare.S.op_gt).

Definition compare : t -> t -> Z := (|Included_S|).(Compare.S.compare).

Definition equal : t -> t -> bool := (|Included_S|).(Compare.S.equal).

Definition max : t -> t -> t := (|Included_S|).(Compare.S.max).

Definition min : t -> t -> t := (|Included_S|).(Compare.S.min).

Parameter encoding : Data_encoding.t cycle.

Parameter rpc_arg : RPC_arg.arg cycle.

Parameter pp : Format.formatter -> cycle -> unit.

Parameter root : cycle.

Parameter pred : cycle -> option cycle.

Parameter add : cycle -> Z -> cycle.

Parameter sub : cycle -> Z -> option cycle.

Parameter succ : cycle -> cycle.

Parameter to_int32 : cycle -> int32.

Parameter of_int32_exn : int32 -> cycle.

Parameter Map : {t : _ & S.MAP.signature cycle t}.

Parameter Index : {_ : unit & Storage_description.INDEX.signature cycle}.
