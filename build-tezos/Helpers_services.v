(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Require Tezos.Alpha_context.
Require Tezos.Apply_results_mli. Module Apply_results := Apply_results_mli.
Require Tezos.Constants_repr.
Require Tezos.Contract_services_mli. Module Contract_services := Contract_services_mli.
Require Tezos.Michelson_v1_primitives.
Require Tezos.Nonce_hash.
Require Tezos.Script_ir_translator_mli. Module Script_ir_translator := Script_ir_translator_mli.
Require Tezos.Script_tc_errors_registration.
Require Tezos.Script_typed_ir.
Require Tezos.Services_registration.

Import Alpha_context.

(* ❌ Structure item `typext` not handled. *)
(* type_extension *)

(* ❌ Top-level evaluations are ignored *)
(* top_level_evaluation *)

Definition parse_operation (op : Alpha_context.Operation.raw)
  : Error_monad.tzresult Alpha_context.packed_operation :=
  match
    Data_encoding.Binary.of_bytes Alpha_context.Operation.protocol_data_encoding
      op.(Alpha_context.Operation.raw.proto) with
  | Some protocol_data =>
    Error_monad.ok
      {|
        Alpha_context.packed_operation.shell :=
          op.(Alpha_context.Operation.raw.shell);
        Alpha_context.packed_operation.protocol_data := protocol_data |}
  | None => Error_monad.__error_value extensible_type_value
  end.

Definition path : RPC_path.path Updater.rpc_context Updater.rpc_context :=
  RPC_path.op_div RPC_path.open_root "helpers".

Module Scripts.
  Module S.
    Import Data_encoding.
    
    Definition path : RPC_path.path Updater.rpc_context Updater.rpc_context :=
      RPC_path.op_div path "scripts".
    
    Definition run_code_input_encoding
      : Data_encoding.encoding
        (Alpha_context.Script.expr * Alpha_context.Script.expr *
          Alpha_context.Script.expr * Alpha_context.Tez.t *
          (|Chain_id|).(S.HASH.t) * option Alpha_context.Contract.t *
          option Alpha_context.Contract.t * option Z.t * string) :=
      Data_encoding.obj9
        (Data_encoding.req None None "script" Alpha_context.Script.expr_encoding)
        (Data_encoding.req None None "storage"
          Alpha_context.Script.expr_encoding)
        (Data_encoding.req None None "input" Alpha_context.Script.expr_encoding)
        (Data_encoding.req None None "amount" Alpha_context.Tez.encoding)
        (Data_encoding.req None None "chain_id" (|Chain_id|).(S.HASH.encoding))
        (Data_encoding.opt None None "source" Alpha_context.Contract.encoding)
        (Data_encoding.opt None None "payer" Alpha_context.Contract.encoding)
        (Data_encoding.opt None None "gas" Data_encoding.z)
        (Data_encoding.dft None None "entrypoint" Data_encoding.__string_value
          "default").
    
    Definition trace_encoding
      : Data_encoding.encoding
        (list
          (Alpha_context.Script.location * Alpha_context.Gas.t *
            list (Alpha_context.Script.expr * option string))) :=
      Pervasives.op_atat
        (let arg := Data_encoding.def "scripted.trace" in
        fun eta => arg None None eta)
        (Pervasives.op_atat
          (let arg := Data_encoding.__list_value in
          fun eta => arg None eta)
          (Data_encoding.obj3
            (Data_encoding.req None None "location"
              Alpha_context.Script.location_encoding)
            (Data_encoding.req None None "gas" Alpha_context.Gas.encoding)
            (Data_encoding.req None None "stack"
              (Data_encoding.__list_value None
                (Data_encoding.obj2
                  (Data_encoding.req None None "item"
                    Alpha_context.Script.expr_encoding)
                  (Data_encoding.opt None None "annot"
                    Data_encoding.__string_value)))))).
    
    Definition run_code
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Alpha_context.Script.expr * Alpha_context.Script.expr *
          Alpha_context.Script.expr * Alpha_context.Tez.t *
          (|Chain_id|).(S.HASH.t) * option Alpha_context.Contract.t *
          option Alpha_context.Contract.t * option Z.t * string)
        (Alpha_context.Script.expr *
          list Alpha_context.packed_internal_operation *
          option Alpha_context.Contract.big_map_diff) :=
      RPC_service.post_service
        (Some "Run a piece of code in the current context") RPC_query.empty
        run_code_input_encoding
        (Data_encoding.obj3
          (Data_encoding.req None None "storage"
            Alpha_context.Script.expr_encoding)
          (Data_encoding.req None None "operations"
            (Data_encoding.__list_value None
              Alpha_context.Operation.internal_operation_encoding))
          (Data_encoding.opt None None "big_map_diff"
            Alpha_context.Contract.big_map_diff_encoding))
        (RPC_path.op_div path "run_code").
    
    Definition trace_code
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Alpha_context.Script.expr * Alpha_context.Script.expr *
          Alpha_context.Script.expr * Alpha_context.Tez.t *
          (|Chain_id|).(S.HASH.t) * option Alpha_context.Contract.t *
          option Alpha_context.Contract.t * option Z.t * string)
        (Alpha_context.Script.expr *
          list Alpha_context.packed_internal_operation *
          list
            (Alpha_context.Script.location * Alpha_context.Gas.t *
              list (Alpha_context.Script.expr * option string)) *
          option Alpha_context.Contract.big_map_diff) :=
      RPC_service.post_service
        (Some "Run a piece of code in the current context, keeping a trace")
        RPC_query.empty run_code_input_encoding
        (Data_encoding.obj4
          (Data_encoding.req None None "storage"
            Alpha_context.Script.expr_encoding)
          (Data_encoding.req None None "operations"
            (Data_encoding.__list_value None
              Alpha_context.Operation.internal_operation_encoding))
          (Data_encoding.req None None "trace" trace_encoding)
          (Data_encoding.opt None None "big_map_diff"
            Alpha_context.Contract.big_map_diff_encoding))
        (RPC_path.op_div path "trace_code").
    
    Definition typecheck_code
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit (Alpha_context.Script.expr * option Z.t)
        (list
          (Alpha_context.Script.location *
            (list (Alpha_context.Script.expr * list string) *
              list (Alpha_context.Script.expr * list string))) *
          Alpha_context.Gas.t) :=
      RPC_service.post_service
        (Some "Typecheck a piece of code in the current context")
        RPC_query.empty
        (Data_encoding.obj2
          (Data_encoding.req None None "program"
            Alpha_context.Script.expr_encoding)
          (Data_encoding.opt None None "gas" Data_encoding.z))
        (Data_encoding.obj2
          (Data_encoding.req None None "type_map"
            Script_tc_errors_registration.type_map_enc)
          (Data_encoding.req None None "gas" Alpha_context.Gas.encoding))
        (RPC_path.op_div path "typecheck_code").
    
    Definition typecheck_data
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Alpha_context.Script.expr * Alpha_context.Script.expr * option Z.t)
        Alpha_context.Gas.t :=
      RPC_service.post_service
        (Some
          "Check that some data expression is well formed and of a given type in the current context")
        RPC_query.empty
        (Data_encoding.obj3
          (Data_encoding.req None None "data" Alpha_context.Script.expr_encoding)
          (Data_encoding.req None None "type" Alpha_context.Script.expr_encoding)
          (Data_encoding.opt None None "gas" Data_encoding.z))
        (Data_encoding.obj1
          (Data_encoding.req None None "gas" Alpha_context.Gas.encoding))
        (RPC_path.op_div path "typecheck_data").
    
    Definition pack_data
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Alpha_context.Script.expr * Alpha_context.Script.expr * option Z.t)
        (MBytes.t * Alpha_context.Gas.t) :=
      RPC_service.post_service
        (Some
          "Computes the serialized version of some data expression using the same algorithm as script instruction PACK")
        RPC_query.empty
        (Data_encoding.obj3
          (Data_encoding.req None None "data" Alpha_context.Script.expr_encoding)
          (Data_encoding.req None None "type" Alpha_context.Script.expr_encoding)
          (Data_encoding.opt None None "gas" Data_encoding.z))
        (Data_encoding.obj2
          (Data_encoding.req None None "packed" Data_encoding.__bytes_value)
          (Data_encoding.req None None "gas" Alpha_context.Gas.encoding))
        (RPC_path.op_div path "pack_data").
    
    Definition run_operation
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Alpha_context.Operation.packed * (|Chain_id|).(S.HASH.t))
        (Alpha_context.Operation.packed_protocol_data *
          Apply_results.packed_operation_metadata) :=
      RPC_service.post_service
        (Some "Run an operation without signature checks") RPC_query.empty
        (Data_encoding.obj2
          (Data_encoding.req None None "operation"
            Alpha_context.Operation.encoding)
          (Data_encoding.req None None "chain_id" (|Chain_id|).(S.HASH.encoding)))
        Apply_results.operation_data_and_metadata_encoding
        (RPC_path.op_div path "run_operation").
    
    Definition entrypoint_type
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit (Alpha_context.Script.expr * string)
        Alpha_context.Script.expr :=
      RPC_service.post_service (Some "Return the type of the given entrypoint")
        RPC_query.empty
        (Data_encoding.obj2
          (Data_encoding.req None None "script"
            Alpha_context.Script.expr_encoding)
          (Data_encoding.dft None None "entrypoint" Data_encoding.__string_value
            "default"))
        (Data_encoding.obj1
          (Data_encoding.req None None "entrypoint_type"
            Alpha_context.Script.expr_encoding))
        (RPC_path.op_div path "entrypoint").
    
    Definition list_entrypoints
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit Alpha_context.Script.expr
        (list (list Michelson_v1_primitives.prim) *
          list (string * Alpha_context.Script.expr)) :=
      RPC_service.post_service
        (Some "Return the list of entrypoints of the given script")
        RPC_query.empty
        (Data_encoding.obj1
          (Data_encoding.req None None "script"
            Alpha_context.Script.expr_encoding))
        (Data_encoding.obj2
          (Data_encoding.dft None None "unreachable"
            (Data_encoding.__list_value None
              (Data_encoding.obj1
                (Data_encoding.req None None "path"
                  (Data_encoding.__list_value None
                    Michelson_v1_primitives.prim_encoding)))) nil)
          (Data_encoding.req None None "entrypoints"
            (Data_encoding.assoc Alpha_context.Script.expr_encoding)))
        (RPC_path.op_div path "entrypoints").
  End S.
  
  Definition register (function_parameter : unit) : unit :=
    let '_ := function_parameter in
    let originate_dummy_contract
      (ctxt : Alpha_context.context) (script : Alpha_context.Script.t)
      : Lwt.t
        (Error_monad.tzresult (Alpha_context.context * Alpha_context.Contract.t)) :=
      let ctxt :=
        Alpha_context.Contract.init_origination_nonce ctxt
          (|Operation_hash|).(S.HASH.zero) in
      Error_monad.op_gtgteqquestion
        (Alpha_context.Contract.fresh_contract_from_current_nonce ctxt)
        (fun function_parameter =>
          let '(ctxt, dummy_contract) := function_parameter in
          let balance :=
            match
              Alpha_context.Tez.of_mutez
                (* ❌ Constant of type int64 is converted to int *)
                4000000000000 with
            | Some balance => balance
            | None =>
              (* ❌ Assert instruction is not handled. *)
              assert false
            end in
          Error_monad.op_gtgteqquestion
            (Alpha_context.Contract.originate ctxt dummy_contract balance
              (script, None) None)
            (fun ctxt => Error_monad.__return (ctxt, dummy_contract))) in
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    Services_registration.register0 S.list_entrypoints
      (fun ctxt =>
        fun function_parameter =>
          let '_ := function_parameter in
          fun expr =>
            let ctxt := Alpha_context.Gas.set_unlimited ctxt in
            let legacy := false in
            Error_monad.op_gtgteqquestion
              (Lwt.__return
                (Error_monad.op_gtgtquestion
                  (Script_ir_translator.parse_toplevel legacy expr)
                  (fun function_parameter =>
                    let '(arg_type, _, _, root_name) := function_parameter in
                    Error_monad.op_gtgtquestion
                      (Script_ir_translator.parse_ty ctxt legacy true false true
                        arg_type)
                      (fun function_parameter =>
                        let '(Script_ir_translator.Ex_ty arg_type, _) :=
                          function_parameter in
                        let 'existT _ __Ex_ty_'a3 arg_type :=
                          existT (A := Set)
                            (fun __Ex_ty_'a3 => (Script_typed_ir.ty __Ex_ty_'a3))
                            _ arg_type in
                        Script_ir_translator.list_entrypoints arg_type ctxt
                          root_name))))
              (fun function_parameter =>
                let '(unreachable_entrypoint, map) := function_parameter in
                Error_monad.__return
                  (unreachable_entrypoint,
                    ((|Script_ir_translator.Entrypoints_map|).(S.MAP.fold)
                      (fun entry =>
                        fun function_parameter =>
                          let '(_, ty) := function_parameter in
                          fun acc =>
                            cons (entry, (Micheline.strip_locations ty)) acc)
                      map nil)))).
  
  Definition run_code {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (code : Alpha_context.Script.expr)
    (function_parameter :
      Alpha_context.Script.expr * Alpha_context.Script.expr *
        Alpha_context.Tez.t * (|Chain_id|).(S.HASH.t) *
        option Alpha_context.Contract.t * option Alpha_context.Contract.t *
        option Z.t * string)
    : Lwt.t
      (Error_monad.shell_tzresult
        (Alpha_context.Script.expr *
          list Alpha_context.packed_internal_operation *
          option Alpha_context.Contract.big_map_diff)) :=
    let '(storage, input, amount, chain_id, source, payer, gas, entrypoint) :=
      function_parameter in
    RPC_context.make_call0 S.run_code ctxt block tt
      (code, storage, input, amount, chain_id, source, payer, gas, entrypoint).
  
  Definition trace_code {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (code : Alpha_context.Script.expr)
    (function_parameter :
      Alpha_context.Script.expr * Alpha_context.Script.expr *
        Alpha_context.Tez.t * (|Chain_id|).(S.HASH.t) *
        option Alpha_context.Contract.t * option Alpha_context.Contract.t *
        option Z.t * string)
    : Lwt.t
      (Error_monad.shell_tzresult
        (Alpha_context.Script.expr *
          list Alpha_context.packed_internal_operation *
          list
            (Alpha_context.Script.location * Alpha_context.Gas.t *
              list (Alpha_context.Script.expr * option string)) *
          option Alpha_context.Contract.big_map_diff)) :=
    let '(storage, input, amount, chain_id, source, payer, gas, entrypoint) :=
      function_parameter in
    RPC_context.make_call0 S.trace_code ctxt block tt
      (code, storage, input, amount, chain_id, source, payer, gas, entrypoint).
  
  Definition typecheck_code {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Script.expr * option Z.t ->
    Lwt.t
      (Error_monad.shell_tzresult
        (list
          (Alpha_context.Script.location *
            (list (Alpha_context.Script.expr * list string) *
              list (Alpha_context.Script.expr * list string))) *
          Alpha_context.Gas.t)) :=
    RPC_context.make_call0 S.typecheck_code ctxt block tt.
  
  Definition typecheck_data {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Script.expr * Alpha_context.Script.expr * option Z.t ->
    Lwt.t (Error_monad.shell_tzresult Alpha_context.Gas.t) :=
    RPC_context.make_call0 S.typecheck_data ctxt block tt.
  
  Definition pack_data {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Script.expr * Alpha_context.Script.expr * option Z.t ->
    Lwt.t (Error_monad.shell_tzresult (MBytes.t * Alpha_context.Gas.t)) :=
    RPC_context.make_call0 S.pack_data ctxt block tt.
  
  Definition run_operation {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Operation.packed * (|Chain_id|).(S.HASH.t) ->
    Lwt.t
      (Error_monad.shell_tzresult
        (Alpha_context.Operation.packed_protocol_data *
          Apply_results.packed_operation_metadata)) :=
    RPC_context.make_call0 S.run_operation ctxt block tt.
  
  Definition entrypoint_type {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Script.expr * string ->
    Lwt.t (Error_monad.shell_tzresult Alpha_context.Script.expr) :=
    RPC_context.make_call0 S.entrypoint_type ctxt block tt.
  
  Definition list_entrypoints {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    : Alpha_context.Script.expr ->
    Lwt.t
      (Error_monad.shell_tzresult
        (list (list Michelson_v1_primitives.prim) *
          list (string * Alpha_context.Script.expr))) :=
    RPC_context.make_call0 S.list_entrypoints ctxt block tt.
End Scripts.

Module Forge.
  Module S.
    Import Data_encoding.
    
    Definition path : RPC_path.path Updater.rpc_context Updater.rpc_context :=
      RPC_path.op_div path "forge".
    
    Definition operations
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (Operation.shell_header * Alpha_context.packed_contents_list) MBytes.t :=
      RPC_service.post_service (Some "Forge an operation") RPC_query.empty
        Alpha_context.Operation.unsigned_encoding Data_encoding.__bytes_value
        (RPC_path.op_div path "operations").
    
    Definition empty_proof_of_work_nonce : MBytes.t :=
      MBytes.of_string
        (String.make Constants_repr.proof_of_work_nonce_size "000" % char).
    
    Definition protocol_data
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit (Z * option Nonce_hash.t * MBytes.t) MBytes.t :=
      RPC_service.post_service
        (Some "Forge the protocol-specific part of a block header")
        RPC_query.empty
        (Data_encoding.obj3
          (Data_encoding.req None None "priority" Data_encoding.uint16)
          (Data_encoding.opt None None "nonce_hash" Nonce_hash.encoding)
          (Data_encoding.dft None None "proof_of_work_nonce"
            (Data_encoding.Fixed.__bytes_value
              Alpha_context.Constants.proof_of_work_nonce_size)
            empty_proof_of_work_nonce))
        (Data_encoding.obj1
          (Data_encoding.req None None "protocol_data"
            Data_encoding.__bytes_value)) (RPC_path.op_div path "protocol_data").
  End S.
  
  Definition register (function_parameter : unit) : unit :=
    let '_ := function_parameter in
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    Services_registration.register0_noctxt S.protocol_data
      (fun function_parameter =>
        let '_ := function_parameter in
        fun function_parameter =>
          let '(priority, seed_nonce_hash, proof_of_work_nonce) :=
            function_parameter in
          Error_monad.__return
            (Data_encoding.Binary.to_bytes_exn
              Alpha_context.Block_header.contents_encoding
              {| Alpha_context.Block_header.contents.priority := priority;
                Alpha_context.Block_header.contents.seed_nonce_hash :=
                  seed_nonce_hash;
                Alpha_context.Block_header.contents.proof_of_work_nonce :=
                  proof_of_work_nonce |})).
  
  Module Manager.
    Definition operations {D E G I K L a b c i o q : Set}
      (ctxt :
        (((RPC_service.t
          ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
            (* `POST *) unit + (* `PATCH *) unit) RPC_context.t RPC_context.t q
          i o -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
          (E * q * i * o)) *
          (((RPC_service.t
            ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
              (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
            (RPC_context.t * a) q i o -> D -> a -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
            (((RPC_service.t
              ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
              ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
            Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
              (((RPC_service.t
                ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                  (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
                (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c ->
              q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
                (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
      (branch : (|Block_hash|).(S.HASH.t))
      (source : Alpha_context.public_key_hash)
      (sourcePubKey : option (|Signature.Public_key|).(S.SPublic_key.t))
      (counter : Alpha_context.counter) (fee : Alpha_context.Tez.tez)
      (gas_limit : Z.t) (storage_limit : Z.t)
      (operations : list Alpha_context.packed_manager_operation)
      : Lwt.t (Pervasives.result MBytes.t (list Error_monad.shell_error)) :=
      Error_monad.op_gtgteq (Contract_services.manager_key ctxt block source)
        (fun function_parameter =>
          match function_parameter with
          | (Pervasives.Error _) as e => Lwt.__return e
          | Pervasives.Ok revealed =>
            let ops :=
              List.map
                (fun function_parameter =>
                  let 'Alpha_context.Manager operation := function_parameter in
                  let 'existT _ __Manager_'kind operation :=
                    existT (A := Set)
                      (fun __Manager_'kind =>
                        (Alpha_context.manager_operation __Manager_'kind)) _
                      operation in
                  Alpha_context.Contents
                    (Alpha_context.Manager_operation
                      {|
                        Alpha_context.contents.Manager_operation.source :=
                          source;
                        Alpha_context.contents.Manager_operation.fee := fee;
                        Alpha_context.contents.Manager_operation.counter :=
                          counter;
                        Alpha_context.contents.Manager_operation.operation :=
                          operation;
                        Alpha_context.contents.Manager_operation.gas_limit :=
                          gas_limit;
                        Alpha_context.contents.Manager_operation.storage_limit :=
                          storage_limit |})) operations in
            let ops :=
              match (sourcePubKey, revealed) with
              | ((None, _) | (_, Some _)) => ops
              | (Some pk, None) =>
                let operation := Alpha_context.Reveal pk in
                cons
                  (Alpha_context.Contents
                    (Alpha_context.Manager_operation
                      {|
                        Alpha_context.contents.Manager_operation.source :=
                          source;
                        Alpha_context.contents.Manager_operation.fee := fee;
                        Alpha_context.contents.Manager_operation.counter :=
                          counter;
                        Alpha_context.contents.Manager_operation.operation :=
                          operation;
                        Alpha_context.contents.Manager_operation.gas_limit :=
                          gas_limit;
                        Alpha_context.contents.Manager_operation.storage_limit :=
                          storage_limit |})) ops
              end in
            RPC_context.make_call0 S.operations ctxt block tt
              ({| Operation.shell_header.branch := branch |},
                (Alpha_context.Operation.of_list ops))
          end).
    
    Definition reveal {D E G I K L a b c i o q : Set}
      (ctxt :
        (((RPC_service.t
          ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
            (* `POST *) unit + (* `PATCH *) unit) RPC_context.t RPC_context.t q
          i o -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
          (E * q * i * o)) *
          (((RPC_service.t
            ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
              (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
            (RPC_context.t * a) q i o -> D -> a -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
            (((RPC_service.t
              ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
              ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
            Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
              (((RPC_service.t
                ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                  (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
                (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c ->
              q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
                (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
      (branch : (|Block_hash|).(S.HASH.t))
      (source : Alpha_context.public_key_hash)
      (sourcePubKey : (|Signature.Public_key|).(S.SPublic_key.t))
      (counter : Alpha_context.counter) (fee : Alpha_context.Tez.tez)
      (function_parameter : unit)
      : Lwt.t (Pervasives.result MBytes.t (list Error_monad.shell_error)) :=
      let '_ := function_parameter in
      operations ctxt block branch source (Some sourcePubKey) counter fee Z.zero
        Z.zero nil.
    
    Definition transaction {D E G I K L a b c i o q : Set}
      (ctxt :
        (((RPC_service.t
          ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
            (* `POST *) unit + (* `PATCH *) unit) RPC_context.t RPC_context.t q
          i o -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
          (E * q * i * o)) *
          (((RPC_service.t
            ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
              (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
            (RPC_context.t * a) q i o -> D -> a -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
            (((RPC_service.t
              ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
              ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
            Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
              (((RPC_service.t
                ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                  (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
                (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c ->
              q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
                (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
      (branch : (|Block_hash|).(S.HASH.t))
      (source : Alpha_context.public_key_hash)
      (sourcePubKey : option (|Signature.Public_key|).(S.SPublic_key.t))
      (counter : Alpha_context.counter) (amount : Alpha_context.Tez.tez)
      (destination : Alpha_context.Contract.contract)
      (op_staroptstar : option string)
      : option Alpha_context.Script.expr -> Z.t -> Z.t ->
      Alpha_context.Tez.tez -> unit ->
      Lwt.t (Pervasives.result MBytes.t (list Error_monad.shell_error)) :=
      let entrypoint :=
        match op_staroptstar with
        | Some op_starsthstar => op_starsthstar
        | None => "default"
        end in
      fun parameters =>
        fun gas_limit =>
          fun storage_limit =>
            fun fee =>
              fun function_parameter =>
                let '_ := function_parameter in
                let parameters :=
                  Option.unopt_map Alpha_context.Script.__lazy_expr_value
                    Alpha_context.Script.unit_parameter parameters in
                operations ctxt block branch source sourcePubKey counter fee
                  gas_limit storage_limit
                  [
                    Alpha_context.Manager
                      (Alpha_context.Transaction
                        {|
                          Alpha_context.manager_operation.Transaction.amount :=
                            amount;
                          Alpha_context.manager_operation.Transaction.parameters :=
                            parameters;
                          Alpha_context.manager_operation.Transaction.entrypoint :=
                            entrypoint;
                          Alpha_context.manager_operation.Transaction.destination :=
                            destination
                          |})
                  ].
    
    Definition origination {D E G I K L a b c i o q : Set}
      (ctxt :
        (((RPC_service.t
          ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
            (* `POST *) unit + (* `PATCH *) unit) RPC_context.t RPC_context.t q
          i o -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
          (E * q * i * o)) *
          (((RPC_service.t
            ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
              (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
            (RPC_context.t * a) q i o -> D -> a -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
            (((RPC_service.t
              ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
              ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
            Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
              (((RPC_service.t
                ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                  (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
                (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c ->
              q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
                (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
      (branch : (|Block_hash|).(S.HASH.t))
      (source : Alpha_context.public_key_hash)
      (sourcePubKey : option (|Signature.Public_key|).(S.SPublic_key.t))
      (counter : Alpha_context.counter) (balance : Alpha_context.Tez.tez)
      (delegatePubKey :
        option (|Signature.Public_key_hash|).(S.SPublic_key_hash.t))
      (script : Alpha_context.Script.t) (gas_limit : Z.t) (storage_limit : Z.t)
      (fee : Alpha_context.Tez.tez) (function_parameter : unit)
      : Lwt.t (Pervasives.result MBytes.t (list Error_monad.shell_error)) :=
      let '_ := function_parameter in
      operations ctxt block branch source sourcePubKey counter fee gas_limit
        storage_limit
        [
          Alpha_context.Manager
            (Alpha_context.Origination
              {|
                Alpha_context.manager_operation.Origination.delegate :=
                  delegatePubKey;
                Alpha_context.manager_operation.Origination.script :=
                  script;
                Alpha_context.manager_operation.Origination.credit :=
                  balance;
                Alpha_context.manager_operation.Origination.preorigination :=
                  None |})
        ].
    
    Definition delegation {D E G I K L a b c i o q : Set}
      (ctxt :
        (((RPC_service.t
          ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
            (* `POST *) unit + (* `PATCH *) unit) RPC_context.t RPC_context.t q
          i o -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
          (E * q * i * o)) *
          (((RPC_service.t
            ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
              (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
            (RPC_context.t * a) q i o -> D -> a -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
            (((RPC_service.t
              ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
              ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
            Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
              (((RPC_service.t
                ((* `PUT *) unit + (* `GET *) unit + (* `DELETE *) unit +
                  (* `POST *) unit + (* `PATCH *) unit) RPC_context.t
                (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c ->
              q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
                (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
      (branch : (|Block_hash|).(S.HASH.t))
      (source : Alpha_context.public_key_hash)
      (sourcePubKey : option (|Signature.Public_key|).(S.SPublic_key.t))
      (counter : Alpha_context.counter) (fee : Alpha_context.Tez.tez)
      (delegate : option (|Signature.Public_key_hash|).(S.SPublic_key_hash.t))
      : Lwt.t (Pervasives.result MBytes.t (list Error_monad.shell_error)) :=
      operations ctxt block branch source sourcePubKey counter fee Z.zero Z.zero
        [ Alpha_context.Manager (Alpha_context.Delegation delegate) ].
  End Manager.
  
  Definition operation {D E G I K L M a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (branch : (|Block_hash|).(S.HASH.t)) (operation : Alpha_context.contents M)
    : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    RPC_context.make_call0 S.operations ctxt block tt
      ({| Operation.shell_header.branch := branch |},
        (Alpha_context.Contents_list (Alpha_context.Single operation))).
  
  Definition endorsement {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (__b_value : D)
    (branch : (|Block_hash|).(S.HASH.t)) (level : Alpha_context.Raw_level.t)
    (function_parameter : unit) : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt __b_value branch
      (Alpha_context.Endorsement
        {| Alpha_context.contents.Endorsement.level := level |}).
  
  Definition proposals {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (__b_value : D)
    (branch : (|Block_hash|).(S.HASH.t))
    (source : (|Signature.Public_key_hash|).(S.SPublic_key_hash.t))
    (period : Alpha_context.Voting_period.t)
    (proposals : list (|Protocol_hash|).(S.HASH.t)) (function_parameter : unit)
    : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt __b_value branch
      (Alpha_context.Proposals
        {| Alpha_context.contents.Proposals.source := source;
          Alpha_context.contents.Proposals.period := period;
          Alpha_context.contents.Proposals.proposals := proposals |}).
  
  Definition ballot {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (__b_value : D)
    (branch : (|Block_hash|).(S.HASH.t))
    (source : (|Signature.Public_key_hash|).(S.SPublic_key_hash.t))
    (period : Alpha_context.Voting_period.t)
    (proposal : (|Protocol_hash|).(S.HASH.t))
    (ballot : Alpha_context.Vote.ballot) (function_parameter : unit)
    : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt __b_value branch
      (Alpha_context.Ballot
        {| Alpha_context.contents.Ballot.source := source;
          Alpha_context.contents.Ballot.period := period;
          Alpha_context.contents.Ballot.proposal := proposal;
          Alpha_context.contents.Ballot.ballot := ballot |}).
  
  Definition seed_nonce_revelation {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (branch : (|Block_hash|).(S.HASH.t)) (level : Alpha_context.Raw_level.t)
    (__nonce_value : Alpha_context.Nonce.t) (function_parameter : unit)
    : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt block branch
      (Alpha_context.Seed_nonce_revelation
        {| Alpha_context.contents.Seed_nonce_revelation.level := level;
          Alpha_context.contents.Seed_nonce_revelation.nonce := __nonce_value |}).
  
  Definition double_baking_evidence {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (branch : (|Block_hash|).(S.HASH.t)) (bh1 : Alpha_context.Block_header.t)
    (bh2 : Alpha_context.Block_header.t) (function_parameter : unit)
    : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt block branch
      (Alpha_context.Double_baking_evidence
        {| Alpha_context.contents.Double_baking_evidence.bh1 := bh1;
          Alpha_context.contents.Double_baking_evidence.bh2 := bh2 |}).
  
  Definition double_endorsement_evidence {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (branch : (|Block_hash|).(S.HASH.t))
    (op1 : Alpha_context.operation Alpha_context.Kind.endorsement)
    (op2 : Alpha_context.operation Alpha_context.Kind.endorsement)
    (function_parameter : unit) : Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let '_ := function_parameter in
    operation ctxt block branch
      (Alpha_context.Double_endorsement_evidence
        {| Alpha_context.contents.Double_endorsement_evidence.op1 := op1;
          Alpha_context.contents.Double_endorsement_evidence.op2 := op2 |}).
  
  Definition empty_proof_of_work_nonce : MBytes.t :=
    MBytes.of_string
      (String.make Constants_repr.proof_of_work_nonce_size "000" % char).
  
  Definition protocol_data {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (priority : Z) (seed_nonce_hash : option Nonce_hash.t)
    (op_staroptstar : option MBytes.t)
    : unit -> Lwt.t (Error_monad.shell_tzresult MBytes.t) :=
    let proof_of_work_nonce :=
      match op_staroptstar with
      | Some op_starsthstar => op_starsthstar
      | None => empty_proof_of_work_nonce
      end in
    fun function_parameter =>
      let '_ := function_parameter in
      RPC_context.make_call0 S.protocol_data ctxt block tt
        (priority, seed_nonce_hash, proof_of_work_nonce).
End Forge.

Module Parse.
  Module S.
    Import Data_encoding.
    
    Definition path : RPC_path.path Updater.rpc_context Updater.rpc_context :=
      RPC_path.op_div path "parse".
    
    Definition operations
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit
        (list Alpha_context.Operation.raw * option bool)
        (list Alpha_context.Operation.packed) :=
      RPC_service.post_service (Some "Parse operations") RPC_query.empty
        (Data_encoding.obj2
          (Data_encoding.req None None "operations"
            (Data_encoding.__list_value None
              (Data_encoding.dynamic_size None
                Alpha_context.Operation.raw_encoding)))
          (Data_encoding.opt None None "check_signature"
            Data_encoding.__bool_value))
        (Data_encoding.__list_value None
          (Data_encoding.dynamic_size None Alpha_context.Operation.encoding))
        (RPC_path.op_div path "operations").
    
    Definition block
      : RPC_service.service (* `POST *) unit Updater.rpc_context
        Updater.rpc_context unit Alpha_context.Block_header.raw
        Alpha_context.Block_header.protocol_data :=
      RPC_service.post_service (Some "Parse a block") RPC_query.empty
        Alpha_context.Block_header.raw_encoding
        Alpha_context.Block_header.protocol_data_encoding
        (RPC_path.op_div path "block").
  End S.
  
  Definition parse_protocol_data (protocol_data : MBytes.t)
    : Lwt.t (Error_monad.tzresult Alpha_context.Block_header.protocol_data) :=
    match
      Data_encoding.Binary.of_bytes
        Alpha_context.Block_header.protocol_data_encoding protocol_data with
    | None => Pervasives.failwith "Cant_parse_protocol_data"
    | Some protocol_data => Error_monad.__return protocol_data
    end.
  
  Definition register (function_parameter : unit) : unit :=
    let '_ := function_parameter in
    (* ❌ Sequences of instructions are ignored (operator ";") *)
    (* ❌ instruction_sequence ";" *)
    Services_registration.register0_noctxt S.block
      (fun function_parameter =>
        let '_ := function_parameter in
        fun raw_block =>
          parse_protocol_data raw_block.(Block_header.t.protocol_data)).
  
  Definition operations {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (check : option bool) (operations : list Alpha_context.Operation.raw)
    : Lwt.t (Error_monad.shell_tzresult (list Alpha_context.Operation.packed)) :=
    RPC_context.make_call0 S.operations ctxt block tt (operations, check).
  
  Definition block {D E G I K L a b c i o q : Set}
    (ctxt :
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o
      -> D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o))
        *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          (RPC_context.t * a) q i o -> D -> a -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (G * a * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
          Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
            (((RPC_service.t
              ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
                (* `POST *) unit + (* `PUT *) unit) RPC_context.t
              (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
            i -> Lwt.t (Error_monad.shell_tzresult o)) *
              (K * a * b * c * q * i * o)) * L)))) * L * D) (block : D)
    (shell : Block_header.shell_header) (protocol_data : MBytes.t)
    : Lwt.t
      (Error_monad.shell_tzresult Alpha_context.Block_header.protocol_data) :=
    RPC_context.make_call0 S.block ctxt block tt
      {| Block_header.t.shell := shell;
        Block_header.t.protocol_data := protocol_data |}.
End Parse.

Module S.
  Import Data_encoding.
  
  Module level_query.
    Record record : Set := Build {
      offset : int32 }.
    Definition with_offset offset (r : record) :=
      Build offset.
  End level_query.
  Definition level_query := level_query.record.
  
  Definition level_query : RPC_query.t level_query :=
    Pervasives.op_pipegt
      (RPC_query.op_pipeplus
        (RPC_query.__query_value
          (fun offset => {| level_query.offset := offset |}))
        (RPC_query.__field_value None "offset" RPC_arg.__int32_value
          (* ❌ Constant of type int32 is converted to int *)
          0 (fun __t_value => __t_value.(level_query.offset)))) RPC_query.seal.
  
  Definition current_level
    : RPC_service.service (* `GET *) unit Updater.rpc_context
      Updater.rpc_context level_query unit Alpha_context.Level.t :=
    RPC_service.get_service
      (Some
        "Returns the level of the interrogated block, or the one of a block located `offset` blocks after in the chain (or before when negative). For instance, the next block if `offset` is 1.")
      level_query Alpha_context.Level.encoding
      (RPC_path.op_div path "current_level").
  
  Definition levels_in_current_cycle
    : RPC_service.service (* `GET *) unit Updater.rpc_context
      Updater.rpc_context level_query unit
      (Alpha_context.Raw_level.t * Alpha_context.Raw_level.t) :=
    RPC_service.get_service (Some "Levels of a cycle") level_query
      (Data_encoding.obj2
        (Data_encoding.req None None "first" Alpha_context.Raw_level.encoding)
        (Data_encoding.req None None "last" Alpha_context.Raw_level.encoding))
      (RPC_path.op_div path "levels_in_current_cycle").
End S.

Definition register (function_parameter : unit) : unit :=
  let '_ := function_parameter in
  (* ❌ Sequences of instructions are ignored (operator ";") *)
  (* ❌ instruction_sequence ";" *)
  (* ❌ Sequences of instructions are ignored (operator ";") *)
  (* ❌ instruction_sequence ";" *)
  (* ❌ Sequences of instructions are ignored (operator ";") *)
  (* ❌ instruction_sequence ";" *)
  (* ❌ Sequences of instructions are ignored (operator ";") *)
  (* ❌ instruction_sequence ";" *)
  Services_registration.register0 S.levels_in_current_cycle
    (fun ctxt =>
      fun q =>
        fun function_parameter =>
          let '_ := function_parameter in
          let levels :=
            Alpha_context.Level.levels_in_current_cycle ctxt
              (Some q.(S.level_query.offset)) tt in
          match levels with
          | [] => Pervasives.raise extensible_type_value
          | _ =>
            let first := List.hd (List.rev levels) in
            let last := List.hd levels in
            Error_monad.__return
              (first.(Alpha_context.Level.t.level),
                last.(Alpha_context.Level.t.level))
          end).

Definition current_level {D E G I K L a b c i o q : Set}
  (ctxt :
    (((RPC_service.t
      ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
        (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o ->
    D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o)) *
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t (RPC_context.t * a)
        q i o -> D -> a -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
        (G * a * q * i * o)) *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
          i -> Lwt.t (Error_monad.shell_tzresult o)) *
            (K * a * b * c * q * i * o)) * L)))) * L * D)
  (op_staroptstar : option int32)
  : D -> Lwt.t (Error_monad.shell_tzresult Alpha_context.Level.t) :=
  let offset :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None =>
      (* ❌ Constant of type int32 is converted to int *)
      0
    end in
  fun block =>
    RPC_context.make_call0 S.current_level ctxt block
      {| S.level_query.offset := offset |} tt.

Definition levels_in_current_cycle {D E G I K L a b c i o q : Set}
  (ctxt :
    (((RPC_service.t
      ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
        (* `POST *) unit + (* `PUT *) unit) RPC_context.t RPC_context.t q i o ->
    D -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) * (E * q * i * o)) *
      (((RPC_service.t
        ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
          (* `POST *) unit + (* `PUT *) unit) RPC_context.t (RPC_context.t * a)
        q i o -> D -> a -> q -> i -> Lwt.t (Error_monad.shell_tzresult o)) *
        (G * a * q * i * o)) *
        (((RPC_service.t
          ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
            (* `POST *) unit + (* `PUT *) unit) RPC_context.t
          ((RPC_context.t * a) * b) q i o -> D -> a -> b -> q -> i ->
        Lwt.t (Error_monad.shell_tzresult o)) * (I * a * b * q * i * o)) *
          (((RPC_service.t
            ((* `DELETE *) unit + (* `GET *) unit + (* `PATCH *) unit +
              (* `POST *) unit + (* `PUT *) unit) RPC_context.t
            (((RPC_context.t * a) * b) * c) q i o -> D -> a -> b -> c -> q ->
          i -> Lwt.t (Error_monad.shell_tzresult o)) *
            (K * a * b * c * q * i * o)) * L)))) * L * D)
  (op_staroptstar : option int32)
  : D ->
  Lwt.t
    (Error_monad.shell_tzresult
      (Alpha_context.Raw_level.t * Alpha_context.Raw_level.t)) :=
  let offset :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None =>
      (* ❌ Constant of type int32 is converted to int *)
      0
    end in
  fun block =>
    RPC_context.make_call0 S.levels_in_current_cycle ctxt block
      {| S.level_query.offset := offset |} tt.
