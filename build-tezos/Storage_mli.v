(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Blinded_public_key_hash.
Require Tezos.Contract_repr.
Require Tezos.Cycle_repr.
Require Tezos.Level_repr.
Require Tezos.Manager_repr.
Require Tezos.Nonce_hash.
Require Tezos.Raw_context.
Require Tezos.Roll_repr.
Require Tezos.Script_expr_hash.
Require Tezos.Script_repr.
Require Tezos.Seed_repr.
Require Tezos.Storage_sigs.
Require Tezos.Tez_repr.
Require Tezos.Vote_repr.
Require Tezos.Voting_period_repr.

Import Storage_sigs.

Module Block_priority.
  Parameter get : Raw_context.t -> Lwt.t (Error_monad.tzresult int).
  
  Parameter set :
    Raw_context.t -> int -> Lwt.t (Error_monad.tzresult Raw_context.t).
  
  Parameter init :
    Raw_context.t -> int -> Lwt.t (Error_monad.tzresult Raw_context.t).
End Block_priority.

Module Roll.
  Parameter Owner :
    {_ : unit &
      Indexed_data_snapshotable_storage.signature (Cycle_repr.t * int)
        Roll_repr.t Raw_context.t (|Signature.Public_key|).(S.SPublic_key.t)}.
  
  Parameter clear : Raw_context.t -> Lwt.t Raw_context.t.
  
  Parameter Next :
    {_ : unit & Single_data_storage.signature Raw_context.t Roll_repr.t}.
  
  Parameter Limbo :
    {_ : unit & Single_data_storage.signature Raw_context.t Roll_repr.t}.
  
  Parameter Delegate_roll_list :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) Roll_repr.t}.
  
  Parameter Successor :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Roll_repr.t Roll_repr.t}.
  
  Parameter Delegate_change :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) Tez_repr.t}.
  
  Parameter Snapshot_for_cycle :
    {_ : unit & Indexed_data_storage.signature Raw_context.t Cycle_repr.t int}.
  
  Parameter Last_for_snapshot :
    {_ : unit &
      Indexed_data_storage.signature (Raw_context.t * Cycle_repr.t) int
        Roll_repr.t}.
End Roll.

Module Contract.
  Module Global_counter.
    Parameter get : Raw_context.t -> Lwt.t (Error_monad.tzresult Z.t).
    
    Parameter set :
      Raw_context.t -> Z.t -> Lwt.t (Error_monad.tzresult Raw_context.t).
    
    Parameter init :
      Raw_context.t -> Z.t -> Lwt.t (Error_monad.tzresult Raw_context.t).
  End Global_counter.
  
  Parameter fold : forall {a : Set},
    Raw_context.t -> a -> (Contract_repr.t -> a -> Lwt.t a) -> Lwt.t a.
  
  Parameter __list_value : Raw_context.t -> Lwt.t (list Contract_repr.t).
  
  Parameter Balance :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t Tez_repr.t}.
  
  Parameter Frozen_deposits :
    {_ : unit &
      Indexed_data_storage.signature (Raw_context.t * Contract_repr.t)
        Cycle_repr.t Tez_repr.t}.
  
  Parameter Frozen_fees :
    {_ : unit &
      Indexed_data_storage.signature (Raw_context.t * Contract_repr.t)
        Cycle_repr.t Tez_repr.t}.
  
  Parameter Frozen_rewards :
    {_ : unit &
      Indexed_data_storage.signature (Raw_context.t * Contract_repr.t)
        Cycle_repr.t Tez_repr.t}.
  
  Parameter Manager :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t
        Manager_repr.t}.
  
  Parameter Delegate :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t)}.
  
  Parameter Delegated :
    {_ : unit &
      Data_set_storage.signature (Raw_context.t * Contract_repr.t)
        Contract_repr.t}.
  
  Parameter Inactive_delegate :
    {_ : unit & Data_set_storage.signature Raw_context.t Contract_repr.t}.
  
  Parameter Delegate_desactivation :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t Cycle_repr.t}.
  
  Parameter Counter :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t Z.t}.
  
  Parameter Code :
    {_ : unit &
      Non_iterable_indexed_carbonated_data_storage.signature Raw_context.t
        Contract_repr.t Script_repr.lazy_expr}.
  
  Parameter Storage :
    {_ : unit &
      Non_iterable_indexed_carbonated_data_storage.signature Raw_context.t
        Contract_repr.t Script_repr.lazy_expr}.
  
  Parameter Used_storage_space :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t Z.t}.
  
  Parameter Paid_storage_space :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Contract_repr.t Z.t}.
End Contract.

Module Big_map.
  Module Next.
    Parameter incr :
      Raw_context.t -> Lwt.t (Error_monad.tzresult (Raw_context.t * Z.t)).
    
    Parameter init_with_default_value :
      Raw_context.t -> Lwt.t (Error_monad.tzresult Raw_context.t).
  End Next.
  
  Parameter fold : forall {a : Set},
    Raw_context.t -> a -> (Z.t -> a -> Lwt.t a) -> Lwt.t a.
  
  Parameter __list_value : Raw_context.t -> Lwt.t (list Z.t).
  
  Parameter remove_rec : Raw_context.t -> Z.t -> Lwt.t Raw_context.t.
  
  Parameter copy :
    Raw_context.t -> Z.t -> Z.t -> Lwt.t (Error_monad.tzresult Raw_context.t).
  
  Definition key : Set := Raw_context.t * Z.t.
  
  Parameter rpc_arg : RPC_arg.t Z.t.
  
  Parameter Contents :
    {_ : unit &
      Non_iterable_indexed_carbonated_data_storage.signature key
        Script_expr_hash.t Script_repr.expr}.
  
  Parameter Total_bytes :
    {_ : unit & Indexed_data_storage.signature Raw_context.t Z.t Z.t}.
  
  Parameter Key_type :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Z.t Script_repr.expr}.
  
  Parameter Value_type :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Z.t Script_repr.expr}.
End Big_map.

Parameter Delegates :
  {_ : unit &
    Data_set_storage.signature Raw_context.t
      (|Signature.Public_key_hash|).(S.SPublic_key_hash.t)}.

Parameter Active_delegates_with_rolls :
  {_ : unit &
    Data_set_storage.signature Raw_context.t
      (|Signature.Public_key_hash|).(S.SPublic_key_hash.t)}.

Parameter Delegates_with_frozen_balance :
  {_ : unit &
    Data_set_storage.signature (Raw_context.t * Cycle_repr.t)
      (|Signature.Public_key_hash|).(S.SPublic_key_hash.t)}.

Module Vote.
  Parameter Current_period_kind :
    {_ : unit &
      Single_data_storage.signature Raw_context.t Voting_period_repr.kind}.
  
  Parameter Participation_ema :
    {_ : unit & Single_data_storage.signature Raw_context.t int32}.
  
  Parameter Current_proposal :
    {_ : unit &
      Single_data_storage.signature Raw_context.t (|Protocol_hash|).(S.HASH.t)}.
  
  Parameter Listings_size :
    {_ : unit & Single_data_storage.signature Raw_context.t int32}.
  
  Parameter Listings :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) int32}.
  
  Parameter Proposals :
    {_ : unit &
      Data_set_storage.signature Raw_context.t
        ((|Protocol_hash|).(S.HASH.t) *
          (|Signature.Public_key_hash|).(S.SPublic_key_hash.t))}.
  
  Parameter Proposals_count :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) int}.
  
  Parameter Ballots :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t
        (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) Vote_repr.ballot}.
End Vote.

Module unrevealed_nonce.
  Record record : Set := Build {
    nonce_hash : Nonce_hash.t;
    delegate : (|Signature.Public_key_hash|).(S.SPublic_key_hash.t);
    rewards : Tez_repr.t;
    fees : Tez_repr.t }.
  Definition with_nonce_hash nonce_hash (r : record) :=
    Build nonce_hash r.(delegate) r.(rewards) r.(fees).
  Definition with_delegate delegate (r : record) :=
    Build r.(nonce_hash) delegate r.(rewards) r.(fees).
  Definition with_rewards rewards (r : record) :=
    Build r.(nonce_hash) r.(delegate) rewards r.(fees).
  Definition with_fees fees (r : record) :=
    Build r.(nonce_hash) r.(delegate) r.(rewards) fees.
End unrevealed_nonce.
Definition unrevealed_nonce := unrevealed_nonce.record.

Inductive nonce_status : Set :=
| Unrevealed : unrevealed_nonce -> nonce_status
| Revealed : Seed_repr.nonce -> nonce_status.

Module For_cycle_sig.
  Record signature : Set := {
    init :
      Raw_context.t -> Cycle_repr.t -> Seed_repr.seed ->
      Lwt.t (Error_monad.tzresult Raw_context.t);
    get :
      Raw_context.t -> Cycle_repr.t ->
      Lwt.t (Error_monad.tzresult Seed_repr.seed);
    delete :
      Raw_context.t -> Cycle_repr.t ->
      Lwt.t (Error_monad.tzresult Raw_context.t);
  }.
End For_cycle_sig.

Module Seed.
  Parameter Nonce :
    {_ : unit &
      Non_iterable_indexed_data_storage.signature Raw_context.t Level_repr.t
        nonce_status}.
  
  Parameter For_cycle : {_ : unit & For_cycle_sig.signature}.
End Seed.

Parameter Commitments :
  {_ : unit &
    Indexed_data_storage.signature Raw_context.t Blinded_public_key_hash.t
      Tez_repr.t}.

Module Ramp_up.
  Parameter Rewards :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Cycle_repr.t
        (Tez_repr.t * Tez_repr.t)}.
  
  Parameter Security_deposits :
    {_ : unit &
      Indexed_data_storage.signature Raw_context.t Cycle_repr.t
        (Tez_repr.t * Tez_repr.t)}.
End Ramp_up.
