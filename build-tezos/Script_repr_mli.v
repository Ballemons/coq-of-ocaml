(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.
Import Notations.
Require Tezos.Gas_limit_repr.
Require Tezos.Michelson_v1_primitives.

Definition location : Set := Micheline.canonical_location.

Definition annot : Set := Micheline.annot.

Definition expr : Set := Micheline.canonical Michelson_v1_primitives.prim.

(* extensible_type_definition `error` *)

Definition lazy_expr : Set := Data_encoding.lazy_t expr.

Definition node : Set := Micheline.node location Michelson_v1_primitives.prim.

Parameter location_encoding : Data_encoding.t location.

Parameter expr_encoding : Data_encoding.t expr.

Parameter lazy_expr_encoding : Data_encoding.t lazy_expr.

Parameter __lazy_expr_value : expr -> lazy_expr.

Module t.
  Record record : Set := Build {
    code : lazy_expr;
    storage : lazy_expr }.
  Definition with_code code (r : record) :=
    Build code r.(storage).
  Definition with_storage storage (r : record) :=
    Build r.(code) storage.
End t.
Definition t := t.record.

Parameter encoding : Data_encoding.encoding t.

Parameter deserialized_cost : expr -> Gas_limit_repr.cost.

Parameter serialized_cost : MBytes.t -> Gas_limit_repr.cost.

Parameter traversal_cost : node -> Gas_limit_repr.cost.

Parameter node_cost : node -> Gas_limit_repr.cost.

Parameter int_node_cost : Z.t -> Gas_limit_repr.cost.

Parameter int_node_cost_of_numbits : Z -> Gas_limit_repr.cost.

Parameter string_node_cost : string -> Gas_limit_repr.cost.

Parameter string_node_cost_of_length : Z -> Gas_limit_repr.cost.

Parameter bytes_node_cost : MBytes.t -> Gas_limit_repr.cost.

Parameter bytes_node_cost_of_length : Z -> Gas_limit_repr.cost.

Parameter prim_node_cost_nonrec : list expr -> annot -> Gas_limit_repr.cost.

Parameter prim_node_cost_nonrec_of_length : Z -> annot -> Gas_limit_repr.cost.

Parameter seq_node_cost_nonrec : list expr -> Gas_limit_repr.cost.

Parameter seq_node_cost_nonrec_of_length : Z -> Gas_limit_repr.cost.

Parameter force_decode :
  lazy_expr -> Error_monad.tzresult (expr * Gas_limit_repr.cost).

Parameter force_bytes :
  lazy_expr -> Error_monad.tzresult (MBytes.t * Gas_limit_repr.cost).

Parameter minimal_deserialize_cost : lazy_expr -> Gas_limit_repr.cost.

Parameter unit_parameter : lazy_expr.

Parameter is_unit_parameter : lazy_expr -> bool.

Parameter strip_annotations : node -> node.
