(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Bootstrap_storage.
Require Tezos.Commitment_storage.
Require Tezos.Contract_storage.
Require Tezos.Parameters_repr.
Require Tezos.Raw_context.
Require Tezos.Roll_storage.
Require Tezos.Script_repr.
Require Tezos.Seed_storage.
Require Tezos.Storage_mli. Module Storage := Storage_mli.
Require Tezos.Vote_storage.

Definition prepare_first_block
  (ctxt : Context.t)
  (typecheck :
    Raw_context.t -> Script_repr.t ->
    Lwt.t
      (Error_monad.tzresult
        ((Script_repr.t * option Contract_storage.big_map_diff) * Raw_context.t)))
  (level : int32) (timestamp : Time.t) (fitness : (|Fitness|).(S.T.t))
  : Lwt.t (Error_monad.tzresult Raw_context.t) :=
  let=? '(previous_protocol, ctxt) :=
    Raw_context.prepare_first_block level timestamp fitness ctxt in
  let=? ctxt := Storage.Big_map.Next.init ctxt in
  match previous_protocol with
  | Raw_context.Genesis param =>
    let=? ctxt :=
      Commitment_storage.init ctxt param.(Parameters_repr.t.commitments) in
    let=? ctxt := Roll_storage.init ctxt in
    let=? ctxt := Seed_storage.init ctxt in
    let=? ctxt := Contract_storage.init ctxt in
    let=? ctxt :=
      Bootstrap_storage.init ctxt typecheck
        param.(Parameters_repr.t.security_deposit_ramp_up_cycles)
        param.(Parameters_repr.t.no_reward_cycles)
        param.(Parameters_repr.t.bootstrap_accounts)
        param.(Parameters_repr.t.bootstrap_contracts) in
    let=? ctxt := Roll_storage.init_first_cycles ctxt in
    let=? ctxt := Vote_storage.init ctxt in
    let=? ctxt := Storage.Block_priority.init ctxt 0 in
    let=? ctxt := Vote_storage.freeze_listings ctxt in
    Error_monad.__return ctxt
  | Raw_context.Alpha_previous => Error_monad.__return ctxt
  end.

Definition prepare
  (ctxt : Context.t) (level : Int32.t) (predecessor_timestamp : Time.t)
  (timestamp : Time.t) (fitness : (|Fitness|).(S.T.t))
  : Lwt.t (Error_monad.tzresult Raw_context.context) :=
  Raw_context.prepare level predecessor_timestamp timestamp fitness ctxt.
