(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Require Import Tezos.Environment.
Import Environment.Notations.
Require Tezos.Alpha_context.
Require Tezos.Nonce_hash.

Import Alpha_context.

Module
  ConstructorRecords_packed_operation_metadata_contents_result_list_packed_contents_result_list_contents_result_packed_contents_result_manager_operation_result_successful_manager_operation_result_packed_successful_manager_operation_result_packed_internal_operation_result.
  Module contents_result.
    Module Endorsement_result.
      Record record {balance_updates delegate slots : Set} : Set := Build {
        balance_updates : balance_updates;
        delegate : delegate;
        slots : slots }.
      Arguments record : clear implicits.
      Definition with_balance_updates {t_balance_updates t_delegate t_slots}
        balance_updates (r : record t_balance_updates t_delegate t_slots) :=
        Build t_balance_updates t_delegate t_slots balance_updates r.(delegate)
          r.(slots).
      Definition with_delegate {t_balance_updates t_delegate t_slots} delegate
        (r : record t_balance_updates t_delegate t_slots) :=
        Build t_balance_updates t_delegate t_slots r.(balance_updates) delegate
          r.(slots).
      Definition with_slots {t_balance_updates t_delegate t_slots} slots
        (r : record t_balance_updates t_delegate t_slots) :=
        Build t_balance_updates t_delegate t_slots r.(balance_updates)
          r.(delegate) slots.
    End Endorsement_result.
    Definition Endorsement_result_skeleton := Endorsement_result.record.
    
    Module Manager_operation_result.
      Record record {balance_updates operation_result internal_operation_results
        : Set} : Set := Build {
        balance_updates : balance_updates;
        operation_result : operation_result;
        internal_operation_results : internal_operation_results }.
      Arguments record : clear implicits.
      Definition with_balance_updates
        {t_balance_updates t_operation_result t_internal_operation_results}
        balance_updates
        (r :
          record t_balance_updates t_operation_result
            t_internal_operation_results) :=
        Build t_balance_updates t_operation_result t_internal_operation_results
          balance_updates r.(operation_result) r.(internal_operation_results).
      Definition with_operation_result
        {t_balance_updates t_operation_result t_internal_operation_results}
        operation_result
        (r :
          record t_balance_updates t_operation_result
            t_internal_operation_results) :=
        Build t_balance_updates t_operation_result t_internal_operation_results
          r.(balance_updates) operation_result r.(internal_operation_results).
      Definition with_internal_operation_results
        {t_balance_updates t_operation_result t_internal_operation_results}
        internal_operation_results
        (r :
          record t_balance_updates t_operation_result
            t_internal_operation_results) :=
        Build t_balance_updates t_operation_result t_internal_operation_results
          r.(balance_updates) r.(operation_result) internal_operation_results.
    End Manager_operation_result.
    Definition Manager_operation_result_skeleton :=
      Manager_operation_result.record.
  End contents_result.
  Module successful_manager_operation_result.
    Module Reveal_result.
      Record record {consumed_gas : Set} : Set := Build {
        consumed_gas : consumed_gas }.
      Arguments record : clear implicits.
      Definition with_consumed_gas {t_consumed_gas} consumed_gas
        (r : record t_consumed_gas) :=
        Build t_consumed_gas consumed_gas.
    End Reveal_result.
    Definition Reveal_result_skeleton := Reveal_result.record.
    
    Module Transaction_result.
      Record record {storage big_map_diff balance_updates originated_contracts
        consumed_gas storage_size paid_storage_size_diff
        allocated_destination_contract : Set} : Set := Build {
        storage : storage;
        big_map_diff : big_map_diff;
        balance_updates : balance_updates;
        originated_contracts : originated_contracts;
        consumed_gas : consumed_gas;
        storage_size : storage_size;
        paid_storage_size_diff : paid_storage_size_diff;
        allocated_destination_contract : allocated_destination_contract }.
      Arguments record : clear implicits.
      Definition with_storage
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} storage
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract storage r.(big_map_diff)
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_big_map_diff
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} big_map_diff
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) big_map_diff
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_balance_updates
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} balance_updates
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          balance_updates r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_originated_contracts
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} originated_contracts
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          r.(balance_updates) originated_contracts r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_consumed_gas
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} consumed_gas
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          r.(balance_updates) r.(originated_contracts) consumed_gas
          r.(storage_size) r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_storage_size
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} storage_size
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          storage_size r.(paid_storage_size_diff)
          r.(allocated_destination_contract).
      Definition with_paid_storage_size_diff
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} paid_storage_size_diff
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) paid_storage_size_diff
          r.(allocated_destination_contract).
      Definition with_allocated_destination_contract
        {t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract} allocated_destination_contract
        (r :
          record t_storage t_big_map_diff t_balance_updates
            t_originated_contracts t_consumed_gas t_storage_size
            t_paid_storage_size_diff t_allocated_destination_contract) :=
        Build t_storage t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          t_allocated_destination_contract r.(storage) r.(big_map_diff)
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff)
          allocated_destination_contract.
    End Transaction_result.
    Definition Transaction_result_skeleton := Transaction_result.record.
    
    Module Origination_result.
      Record record {big_map_diff balance_updates originated_contracts
        consumed_gas storage_size paid_storage_size_diff : Set} : Set := Build {
        big_map_diff : big_map_diff;
        balance_updates : balance_updates;
        originated_contracts : originated_contracts;
        consumed_gas : consumed_gas;
        storage_size : storage_size;
        paid_storage_size_diff : paid_storage_size_diff }.
      Arguments record : clear implicits.
      Definition with_big_map_diff
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} big_map_diff
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff big_map_diff
          r.(balance_updates) r.(originated_contracts) r.(consumed_gas)
          r.(storage_size) r.(paid_storage_size_diff).
      Definition with_balance_updates
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} balance_updates
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          r.(big_map_diff) balance_updates r.(originated_contracts)
          r.(consumed_gas) r.(storage_size) r.(paid_storage_size_diff).
      Definition with_originated_contracts
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} originated_contracts
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          r.(big_map_diff) r.(balance_updates) originated_contracts
          r.(consumed_gas) r.(storage_size) r.(paid_storage_size_diff).
      Definition with_consumed_gas
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} consumed_gas
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          r.(big_map_diff) r.(balance_updates) r.(originated_contracts)
          consumed_gas r.(storage_size) r.(paid_storage_size_diff).
      Definition with_storage_size
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} storage_size
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          r.(big_map_diff) r.(balance_updates) r.(originated_contracts)
          r.(consumed_gas) storage_size r.(paid_storage_size_diff).
      Definition with_paid_storage_size_diff
        {t_big_map_diff t_balance_updates t_originated_contracts t_consumed_gas
          t_storage_size t_paid_storage_size_diff} paid_storage_size_diff
        (r :
          record t_big_map_diff t_balance_updates t_originated_contracts
            t_consumed_gas t_storage_size t_paid_storage_size_diff) :=
        Build t_big_map_diff t_balance_updates t_originated_contracts
          t_consumed_gas t_storage_size t_paid_storage_size_diff
          r.(big_map_diff) r.(balance_updates) r.(originated_contracts)
          r.(consumed_gas) r.(storage_size) paid_storage_size_diff.
    End Origination_result.
    Definition Origination_result_skeleton := Origination_result.record.
    
    Module Delegation_result.
      Record record {consumed_gas : Set} : Set := Build {
        consumed_gas : consumed_gas }.
      Arguments record : clear implicits.
      Definition with_consumed_gas {t_consumed_gas} consumed_gas
        (r : record t_consumed_gas) :=
        Build t_consumed_gas consumed_gas.
    End Delegation_result.
    Definition Delegation_result_skeleton := Delegation_result.record.
  End successful_manager_operation_result.
End
  ConstructorRecords_packed_operation_metadata_contents_result_list_packed_contents_result_list_contents_result_packed_contents_result_manager_operation_result_successful_manager_operation_result_packed_successful_manager_operation_result_packed_internal_operation_result.
Import
  ConstructorRecords_packed_operation_metadata_contents_result_list_packed_contents_result_list_contents_result_packed_contents_result_manager_operation_result_successful_manager_operation_result_packed_successful_manager_operation_result_packed_internal_operation_result.

Module operation_metadata.
  Record record {contents : Set} : Set := Build {
    contents : contents }.
  Arguments record : clear implicits.
  Definition with_contents {t_contents} contents (r : record t_contents) :=
    Build t_contents contents.
End operation_metadata.
Definition operation_metadata_skeleton := operation_metadata.record.

Reserved Notation "'contents_result.Endorsement_result".
Reserved Notation "'contents_result.Manager_operation_result".
Reserved Notation "'successful_manager_operation_result.Reveal_result".
Reserved Notation "'successful_manager_operation_result.Transaction_result".
Reserved Notation "'successful_manager_operation_result.Origination_result".
Reserved Notation "'successful_manager_operation_result.Delegation_result".
Reserved Notation "'operation_metadata".

Inductive packed_operation_metadata : Set :=
| Operation_metadata : 'operation_metadata -> packed_operation_metadata
| No_operation_metadata : packed_operation_metadata

with contents_result_list : Set :=
| Single_result : contents_result -> contents_result_list
| Cons_result : contents_result -> contents_result_list -> contents_result_list

with packed_contents_result_list : Set :=
| Contents_result_list : contents_result_list -> packed_contents_result_list

with contents_result : Set :=
| Endorsement_result : 'contents_result.Endorsement_result -> contents_result
| Seed_nonce_revelation_result :
  Alpha_context.Delegate.balance_updates -> contents_result
| Double_endorsement_evidence_result :
  Alpha_context.Delegate.balance_updates -> contents_result
| Double_baking_evidence_result :
  Alpha_context.Delegate.balance_updates -> contents_result
| Activate_account_result :
  Alpha_context.Delegate.balance_updates -> contents_result
| Proposals_result : contents_result
| Ballot_result : contents_result
| Manager_operation_result :
  'contents_result.Manager_operation_result -> contents_result

with packed_contents_result : Set :=
| Contents_result : contents_result -> packed_contents_result

with manager_operation_result : Set :=
| Applied : successful_manager_operation_result -> manager_operation_result
| Backtracked :
  successful_manager_operation_result -> option (list Error_monad.__error) ->
  manager_operation_result
| Failed :
  Alpha_context.Kind.manager -> list Error_monad.__error ->
  manager_operation_result
| Skipped : Alpha_context.Kind.manager -> manager_operation_result

with successful_manager_operation_result : Set :=
| Reveal_result :
  'successful_manager_operation_result.Reveal_result ->
  successful_manager_operation_result
| Transaction_result :
  'successful_manager_operation_result.Transaction_result ->
  successful_manager_operation_result
| Origination_result :
  'successful_manager_operation_result.Origination_result ->
  successful_manager_operation_result
| Delegation_result :
  'successful_manager_operation_result.Delegation_result ->
  successful_manager_operation_result

with packed_successful_manager_operation_result : Set :=
| Successful_manager_result :
  successful_manager_operation_result ->
  packed_successful_manager_operation_result

with packed_internal_operation_result : Set :=
| Internal_operation_result :
  Alpha_context.internal_operation -> manager_operation_result ->
  packed_internal_operation_result

where "'operation_metadata" :=
  (operation_metadata_skeleton contents_result_list)
and "'contents_result.Endorsement_result" :=
  (contents_result.Endorsement_result_skeleton
    Alpha_context.Delegate.balance_updates
    (|Signature.Public_key_hash|).(S.SPublic_key_hash.t) (list int))
and "'contents_result.Manager_operation_result" :=
  (contents_result.Manager_operation_result_skeleton
    Alpha_context.Delegate.balance_updates manager_operation_result
    (list packed_internal_operation_result))
and "'successful_manager_operation_result.Reveal_result" :=
  (successful_manager_operation_result.Reveal_result_skeleton Z.t)
and "'successful_manager_operation_result.Transaction_result" :=
  (successful_manager_operation_result.Transaction_result_skeleton
    (option Alpha_context.Script.expr)
    (option Alpha_context.Contract.big_map_diff)
    Alpha_context.Delegate.balance_updates (list Alpha_context.Contract.t) Z.t
    Z.t Z.t bool)
and "'successful_manager_operation_result.Origination_result" :=
  (successful_manager_operation_result.Origination_result_skeleton
    (option Alpha_context.Contract.big_map_diff)
    Alpha_context.Delegate.balance_updates (list Alpha_context.Contract.t) Z.t
    Z.t Z.t)
and "'successful_manager_operation_result.Delegation_result" :=
  (successful_manager_operation_result.Delegation_result_skeleton Z.t).

Module contents_result.
  Include ConstructorRecords_packed_operation_metadata_contents_result_list_packed_contents_result_list_contents_result_packed_contents_result_manager_operation_result_successful_manager_operation_result_packed_successful_manager_operation_result_packed_internal_operation_result.contents_result.
  Definition Endorsement_result := 'contents_result.Endorsement_result.
  Definition Manager_operation_result :=
    'contents_result.Manager_operation_result.
End contents_result.
Module successful_manager_operation_result.
  Include ConstructorRecords_packed_operation_metadata_contents_result_list_packed_contents_result_list_contents_result_packed_contents_result_manager_operation_result_successful_manager_operation_result_packed_successful_manager_operation_result_packed_internal_operation_result.successful_manager_operation_result.
  Definition Reveal_result :=
    'successful_manager_operation_result.Reveal_result.
  Definition Transaction_result :=
    'successful_manager_operation_result.Transaction_result.
  Definition Origination_result :=
    'successful_manager_operation_result.Origination_result.
  Definition Delegation_result :=
    'successful_manager_operation_result.Delegation_result.
End successful_manager_operation_result.

Definition operation_metadata := 'operation_metadata.

Parameter operation_metadata_encoding :
  Data_encoding.t packed_operation_metadata.

Parameter operation_data_and_metadata_encoding :
  Data_encoding.t
    (Alpha_context.Operation.packed_protocol_data * packed_operation_metadata).

Inductive contents_and_result_list : Set :=
| Single_and_result :
  Alpha_context.contents -> contents_result -> contents_and_result_list
| Cons_and_result :
  Alpha_context.contents -> contents_result -> contents_and_result_list ->
  contents_and_result_list.

Inductive packed_contents_and_result_list : Set :=
| Contents_and_result_list :
  contents_and_result_list -> packed_contents_and_result_list.

Parameter contents_and_result_list_encoding :
  Data_encoding.t packed_contents_and_result_list.

Parameter pack_contents_list :
  Alpha_context.contents_list -> contents_result_list ->
  contents_and_result_list.

Parameter unpack_contents_list :
  contents_and_result_list -> Alpha_context.contents_list * contents_result_list.

Parameter to_list : packed_contents_result_list -> list packed_contents_result.

Parameter of_list : list packed_contents_result -> packed_contents_result_list.

Inductive eq : Set :=
| Eq : eq.

Parameter kind_equal_list :
  Alpha_context.contents_list -> contents_result_list -> option eq.

Module block_metadata.
  Record record : Set := Build {
    baker : (|Signature.Public_key_hash|).(S.SPublic_key_hash.t);
    level : Alpha_context.Level.t;
    voting_period_kind : Alpha_context.Voting_period.kind;
    nonce_hash : option Nonce_hash.t;
    consumed_gas : Z.t;
    deactivated : list (|Signature.Public_key_hash|).(S.SPublic_key_hash.t);
    balance_updates : Alpha_context.Delegate.balance_updates }.
  Definition with_baker baker (r : record) :=
    Build baker r.(level) r.(voting_period_kind) r.(nonce_hash) r.(consumed_gas)
      r.(deactivated) r.(balance_updates).
  Definition with_level level (r : record) :=
    Build r.(baker) level r.(voting_period_kind) r.(nonce_hash) r.(consumed_gas)
      r.(deactivated) r.(balance_updates).
  Definition with_voting_period_kind voting_period_kind (r : record) :=
    Build r.(baker) r.(level) voting_period_kind r.(nonce_hash) r.(consumed_gas)
      r.(deactivated) r.(balance_updates).
  Definition with_nonce_hash nonce_hash (r : record) :=
    Build r.(baker) r.(level) r.(voting_period_kind) nonce_hash r.(consumed_gas)
      r.(deactivated) r.(balance_updates).
  Definition with_consumed_gas consumed_gas (r : record) :=
    Build r.(baker) r.(level) r.(voting_period_kind) r.(nonce_hash) consumed_gas
      r.(deactivated) r.(balance_updates).
  Definition with_deactivated deactivated (r : record) :=
    Build r.(baker) r.(level) r.(voting_period_kind) r.(nonce_hash)
      r.(consumed_gas) deactivated r.(balance_updates).
  Definition with_balance_updates balance_updates (r : record) :=
    Build r.(baker) r.(level) r.(voting_period_kind) r.(nonce_hash)
      r.(consumed_gas) r.(deactivated) balance_updates.
End block_metadata.
Definition block_metadata := block_metadata.record.

Parameter block_metadata_encoding : Data_encoding.encoding block_metadata.
