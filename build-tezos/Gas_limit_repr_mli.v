(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Unset Positivity Checking.
Unset Guard Checking.

Require Import Tezos.Environment.

Module t.
  Module Limited.
    Record record {remaining : Set} := {
      remaining : remaining }.
    Arguments record : clear implicits.
  End Limited.
  Definition Limited_skeleton := Limited.record.
End t.

Reserved Notation "'t.Limited".

Inductive t : Set :=
| Unaccounted : t
| Limited : 't.Limited -> t

where "'t.Limited" := (t.Limited_skeleton Z.t).

Module ConstructorRecordNotations_t.
  Module t.
    Definition Limited := 't.Limited.
  End t.
End ConstructorRecordNotations_t.
Import ConstructorRecordNotations_t.

Parameter internal_gas : Set.

Parameter encoding : Data_encoding.encoding t.

Parameter pp : Format.formatter -> t -> unit.

Parameter cost : Set.

Parameter cost_encoding : Data_encoding.encoding cost.

Parameter pp_cost : Format.formatter -> cost -> unit.

(* extensible_type error *)

(* extensible_type error *)

Parameter consume :
  Z.t -> t -> internal_gas -> cost ->
  Error_monad.tzresult (Z.t * t * internal_gas).

Parameter check_enough :
  Z.t -> t -> internal_gas -> cost -> Error_monad.tzresult unit.

Parameter internal_gas_zero : internal_gas.

Parameter free : cost.

Parameter atomic_step_cost : Z -> cost.

Parameter step_cost : Z -> cost.

Parameter alloc_cost : Z -> cost.

Parameter alloc_bytes_cost : Z -> cost.

Parameter alloc_mbytes_cost : Z -> cost.

Parameter alloc_bits_cost : Z -> cost.

Parameter read_bytes_cost : Z.t -> cost.

Parameter write_bytes_cost : Z.t -> cost.

Parameter op_starat : Z -> cost -> cost.

Parameter op_plusat : cost -> cost -> cost.
