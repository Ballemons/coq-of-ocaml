(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Inductive foo_tags : Type :=
| foo_Var_tag : forall (a : Set), foo_tags.

Fixpoint dec_foo_tags (tag : foo_tags) : Set :=
  let 'foo_Var_tag a := tag in
  a.

Inductive foo : foo_tags -> foo_tags -> Set :=
| Bar : forall {a b : foo_tags}, dec_foo_tags a -> dec_foo_tags b -> foo a b
| Other : forall {a b : foo_tags}, int -> foo a b.

Inductive expr_tags : Type :=
| expr_foo_tag : forall (a b : foo_tags), expr_tags
| expr_int_tag : expr_tags
| expr_string_tag : expr_tags
| expr_Tuple_tag : forall (a b : expr_tags), expr_tags
| expr_Var_tag : forall (a : Set), expr_tags.

Fixpoint dec_expr_tags (tag : expr_tags) : Set :=
  match tag with
  | expr_foo_tag a b => foo a b
  | expr_int_tag => int
  | expr_string_tag => string
  | expr_Tuple_tag a b => dec_expr_tags a * dec_expr_tags b
  | expr_Var_tag a => a
  end.

Inductive expr : expr_tags -> Type :=
| Int : int -> expr expr_int_tag
| String : string -> expr expr_string_tag
| Sum : expr expr_int_tag -> expr expr_int_tag -> expr expr_int_tag
| Foo : expr expr_int_tag -> expr expr_string_tag -> expr (expr_foo_tag (foo_Var_tag int) (foo_Var_tag string))
| Pair : forall {a b : expr_tags},
  expr a -> expr b -> expr (expr_Tuple_tag a b).

Fixpoint proj_int (e : expr expr_int_tag) : dec_expr_tags expr_int_tag :=
  match e with
  | Int n => n
  | Sum e1 e2 => Z.add (proj_int e1) (proj_int e2)
  end.

Inductive one_case_tags : Type :=
| one_case_bool_tag : one_case_tags
| one_case_int_tag : one_case_tags
| one_case_Var_tag : forall (a : Set), one_case_tags.

Fixpoint dec_one_case_tags (tag : one_case_tags) : Set :=
  match tag with
  | one_case_bool_tag => bool
  | one_case_int_tag => int
  | one_case_Var_tag a => a
  end.

Inductive one_case : one_case_tags -> Set :=
| SingleCase : one_case one_case_int_tag
| Impossible : one_case one_case_bool_tag.

Definition x : int :=
  match SingleCase with
  | SingleCase => 0
  | _ => unreachable_gadt_branch
  end.
