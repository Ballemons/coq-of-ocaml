Module 'List2':
  Inductive 't':
    ([ 'a' ], [ ('Nil', [ ]); ('Cons', [ 'a'; Type ('t', 'a') ]) ])
  
  Value
    (rec, 'sum_rec', [ ],
      [ ('counter', Type ('nat')); ('l', Type ('t', Type ('Z'))) ], Some
      Type ('Z')) =
    Match
      ('counter',
        [
          (Nat(0), Apply ('not_terminated', 'tt'));
          (Constructor ('S', 'counter'),
            Match
              ('l',
                [
                  (Constructor ('Nil'), Int(0));
                  (Constructor ('Cons', 'x', 'xs'),
                    Apply
                      (Apply
                        ('Z.add',
                          'x'),
                        Apply
                          (Apply
                            ('sum_rec',
                              'counter'),
                            'xs')))
                ]))
        ])
  
  Value
    (non_rec, 'sum', [ ], [ ('l', Type ('t', Type ('Z'))) ], Some Type ('Z')) =
    Let (non_rec, 'counter', [ ], [ ], None) =
      Apply ('read_counter', 'tt') in
    Apply (Apply ('sum_rec', 'counter'), 'l')
  
  Value
    (rec, 'of_list_rec', [ 'A' ],
      [ ('counter', Type ('nat')); ('match_var_0', Type ('list', 'A')) ], Some
      Type ('t', 'A')) =
    Match
      ('counter',
        [
          (Nat(0), Apply ('not_terminated', 'tt'));
          (Constructor ('S', 'counter'),
            Match
              ('match_var_0',
                [
                  (Constructor ('[]'),
                    Constructor
                      ('Nil'));
                  (Constructor ('cons', 'x', 'xs'),
                    Constructor
                      ('Cons',
                        'x',
                        Apply
                          (Apply
                            ('of_list_rec',
                              'counter'),
                            'xs')))
                ]))
        ])
  
  Value
    (non_rec, 'of_list', [ 'A' ], [ ('match_var_0', Type ('list', 'A')) ], Some
      Type ('t', 'A')) =
    Let (non_rec, 'counter', [ ], [ ], None) =
      Apply ('read_counter', 'tt') in
    Apply (Apply ('of_list_rec', 'counter'), 'match_var_0')
  
  Module 'Inside':
    Value (non_rec, 'x', [ ], [ ], Some Type ('Z')) =
      Int(12)

Value (non_rec, 'n', [ ], [ ], Some Type ('Z')) =
  Apply
    ('List2.sum',
      Apply
        ('List2.of_list',
          Constructor
            ('cons', Int(5),
              Constructor
                ('cons', Int(7),
                  Constructor
                    ('cons', Int(6),
                      Constructor ('cons', 'List2.Inside.x', Constructor ('[]')))))))
