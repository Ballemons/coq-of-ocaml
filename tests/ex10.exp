Module 'List2':
  Inductive 't':
    ([ 'a' ], [ ('Nil', [ ]); ('Cons', [ 'a'; Type ('t', 'a') ]) ])
  
  Value
    (rec, 'sum_rec', [ ],
      [ ('counter', Type ('nat')); ('l', Type ('t', Type ('Z'))) ],
      Some Type ('Z')) =
    Match
      ((), Variable ((), 'counter'),
        [
          (Nat(0),
            Apply
              ((), Variable ((), 'not_terminated'),
                Variable ((), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((), Variable ((), 'l'),
                [
                  (Constructor ('Nil'),
                    Constant
                      ((),
                        Int(0)));
                  (Constructor ('Cons', 'x', 'xs'),
                    Apply
                      ((),
                        Apply
                          ((),
                            Variable
                              ((),
                                'Z.add'),
                            Variable
                              ((),
                                'x')),
                        Apply
                          ((),
                            Apply
                              ((),
                                Variable
                                  ((),
                                    'sum_rec'),
                                Variable
                                  ((),
                                    'counter')),
                            Variable
                              ((),
                                'xs'))))
                ]))
        ])
  
  Value
    (non_rec, 'sum', [ ], [ ('l', Type ('t', Type ('Z'))) ], Some Type ('Z')) =
    Let () (non_rec, 'counter', [ ], [ ], None) =
      Apply ((), Variable ((), 'read_counter'), Variable ((), 'tt')) in
    Apply
      ((), Apply ((), Variable ((), 'sum_rec'), Variable ((), 'counter')),
        Variable ((), 'l'))
  
  Value
    (rec, 'of_list_rec', [ 'A' ],
      [ ('counter', Type ('nat')); ('match_var_0', Type ('list', 'A')) ],
      Some Type ('t', 'A')) =
    Match
      ((), Variable ((), 'counter'),
        [
          (Nat(0),
            Apply
              ((), Variable ((), 'not_terminated'),
                Variable ((), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((), Variable ((), 'match_var_0'),
                [
                  (Constructor ('[]'),
                    Constructor
                      ((),
                        'Nil'));
                  (Constructor ('cons', 'x', 'xs'),
                    Constructor
                      ((),
                        'Cons',
                        Variable
                          ((),
                            'x'),
                        Apply
                          ((),
                            Apply
                              ((),
                                Variable
                                  ((),
                                    'of_list_rec'),
                                Variable
                                  ((),
                                    'counter')),
                            Variable
                              ((),
                                'xs'))))
                ]))
        ])
  
  Value
    (non_rec, 'of_list', [ 'A' ], [ ('match_var_0', Type ('list', 'A')) ],
      Some Type ('t', 'A')) =
    Let () (non_rec, 'counter', [ ], [ ], None) =
      Apply ((), Variable ((), 'read_counter'), Variable ((), 'tt')) in
    Apply
      ((), Apply ((), Variable ((), 'of_list_rec'), Variable ((), 'counter')),
        Variable ((), 'match_var_0'))
  
  Module 'Inside':
    Value (non_rec, 'x', [ ], [ ], Some Type ('Z')) =
      Constant ((), Int(12))

Value (non_rec, 'n', [ ], [ ], Some Type ('Z')) =
  Apply
    ((), Variable ((), 'List2.sum'),
      Apply
        ((), Variable ((), 'List2.of_list'),
          Constructor
            ((), 'cons', Constant ((), Int(5)),
              Constructor
                ((), 'cons', Constant ((), Int(7)),
                  Constructor
                    ((), 'cons', Constant ((), Int(6)),
                      Constructor
                        ((), 'cons', Variable ((), 'List2.Inside.x'),
                          Constructor ((), '[]')))))))
