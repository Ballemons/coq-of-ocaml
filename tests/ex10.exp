Module 'List2':
  Inductive 't':
    ([ 'a' ], [ ('Nil', [ ]); ('Cons', [ 'a'; Type ('t', 'a') ]) ])
  
  Value (rec, 'sum', [ ], [ ('l', Type ('t', Type ('Z'))) ], Some Type ('Z')) =
    Match
      ('l',
        [
          (Constructor ('Nil'), Int(0));
          (Constructor ('Cons', 'x', 'xs'),
            Apply (Apply ('Z.add', 'x'), Apply ('sum', 'xs')))
        ])
  
  Value
    (rec, 'of_list', [ 'A' ], [ ('match_var_0', Type ('list', 'A')) ], Some
      Type ('t', 'A')) =
    Match
      ('match_var_0',
        [
          (Constructor ('[]'), Constructor ('Nil'));
          (Constructor ('cons', 'x', 'xs'),
            Constructor ('Cons', 'x', Apply ('of_list', 'xs')))
        ])
  
  Module 'Inside':
    Value (non_rec, 'x', [ ], [ ], Some Type ('Z')) =
      Int(12)

Value (non_rec, 'n', [ ], [ ], Some Type ('Z')) =
  Apply
    ('List2.sum',
      Apply
        ('List2.of_list',
          Constructor
            ('cons', Int(5),
              Constructor
                ('cons', Int(7),
                  Constructor
                    ('cons', Int(6),
                      Constructor ('cons', 'List2.Inside.x', Constructor ('[]')))))))
