Module List2:
  Inductive t:
    ([ a ], [ (Nil, [ ]); (Cons, [ a; Type (t/0, a) ]) ])
  
  ((),
    Value (rec, sum, [ ], [ (l, Type (t/0, Type (Z/2))) ], Some Type (Z/2)) =
      Match
        (9, Variable (9, l/0),
          [
            (Constructor (Nil/0), Constant (10, Int(0)));
            (Constructor (Cons/0, x, xs),
              Apply
                (?,
                  Apply
                    (11, Variable (11, Z.add/2),
                      Variable (11, x/0)),
                  Apply
                    (11, Variable (11, sum/0),
                      Variable
                        (11,
                          xs/0))))
          ]))
  
  ((),
    Value (rec, of_list, [ A ], [ (x, Type (list/2, A)) ], Some Type (t/0, A)) =
      Match
        (?, Variable (?, x/0),
          [
            (Constructor ([]/2), Constructor (14, Nil/0));
            (Constructor (cons/2, x, xs),
              Constructor
                (15, Cons/0, Variable (15, x/0),
                  Apply
                    (15,
                      Variable
                        (15,
                          of_list/0),
                      Variable
                        (15,
                          xs/0))))
          ]))
  
  Module Inside:
    ((),
      Value (non_rec, x, [ ], [ ], Some Type (Z/3)) =
        Constant (18, Int(12)))

((),
  Value (non_rec, n, [ ], [ ], Some Type (Z/1)) =
    Apply
      (22, Variable (22, List2.sum/0),
        Apply
          (22, Variable (22, List2.of_list/0),
            Constructor
              (22, cons/1, Constant (22, Int(5)),
                Constructor
                  (22, cons/1, Constant (22, Int(7)),
                    Constructor
                      (22, cons/1, Constant (22, Int(6)),
                        Constructor
                          (22, cons/1, Variable (22, List2.Inside.x/0),
                            Constructor (22, []/1))))))))
