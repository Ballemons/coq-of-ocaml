((TypeDefinition
  (Inductive set ()
   (NonGadt
    ((Empty ())
     (Node
      ((Apply ((path ()) (base set)) ()) (Apply ((path ()) (base Z)) ())
       (Apply ((path ()) (base set)) ())))))))
 (Value
  ((is_rec (New false))
   (cases
    ((((name empty) (typ_vars ()) (args ())
       (typ ((Apply ((path ()) (base set)) ()))))
      (Constructor ((path ()) (base Empty)) ()))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name member) (typ_vars ())
       (args
        ((x (Apply ((path ()) (base Z)) ()))
         (s (Apply ((path ()) (base set)) ()))))
       (typ ((Apply ((path ()) (base bool)) ()))))
      (Match (Variable ((path ()) (base s)))
       (((Constructor ((path ()) (base Empty)) ())
         (Constructor ((path ()) (base false)) ()))
        ((Constructor ((path ()) (base Node))
          ((Variable s1) (Variable y) (Variable s2)))
         (IfThenElse
          (Apply (Variable ((path (OCaml Pervasives)) (base lt)))
           ((Variable ((path ()) (base x))) (Variable ((path ()) (base y)))))
          (Apply (Variable ((path ()) (base member)))
           ((Variable ((path ()) (base x))) (Variable ((path ()) (base s1)))))
          (IfThenElse
           (Apply (Variable ((path (OCaml Pervasives)) (base lt)))
            ((Variable ((path ()) (base y))) (Variable ((path ()) (base x)))))
           (Apply (Variable ((path ()) (base member)))
            ((Variable ((path ()) (base x)))
             (Variable ((path ()) (base s2)))))
           (Constructor ((path ()) (base true)) ())))))))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name insert) (typ_vars ())
       (args
        ((x (Apply ((path ()) (base Z)) ()))
         (s (Apply ((path ()) (base set)) ()))))
       (typ ((Apply ((path ()) (base set)) ()))))
      (Match (Variable ((path ()) (base s)))
       (((Constructor ((path ()) (base Empty)) ())
         (Constructor ((path ()) (base Node))
          ((Constructor ((path ()) (base Empty)) ())
           (Variable ((path ()) (base x)))
           (Constructor ((path ()) (base Empty)) ()))))
        ((Constructor ((path ()) (base Node))
          ((Variable s1) (Variable y) (Variable s2)))
         (IfThenElse
          (Apply (Variable ((path (OCaml Pervasives)) (base lt)))
           ((Variable ((path ()) (base x))) (Variable ((path ()) (base y)))))
          (Constructor ((path ()) (base Node))
           ((Apply (Variable ((path ()) (base insert)))
             ((Variable ((path ()) (base x)))
              (Variable ((path ()) (base s1)))))
            (Variable ((path ()) (base y))) (Variable ((path ()) (base s2)))))
          (IfThenElse
           (Apply (Variable ((path (OCaml Pervasives)) (base lt)))
            ((Variable ((path ()) (base y))) (Variable ((path ()) (base x)))))
           (Constructor ((path ()) (base Node))
            ((Variable ((path ()) (base s1))) (Variable ((path ()) (base y)))
             (Apply (Variable ((path ()) (base insert)))
              ((Variable ((path ()) (base x)))
               (Variable ((path ()) (base s2)))))))
           (Variable ((path ()) (base s))))))))))))))
