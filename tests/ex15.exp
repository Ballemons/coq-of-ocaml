((TypeDefinition
  (Inductive set ()
   ((Empty ())
    (Node
     ((Apply ((path_name ((path ()) (base set))) (depth 0)) ())
      (Apply ((path_name ((path ()) (base Z))) (depth 1)) ())
      (Apply ((path_name ((path ()) (base set))) (depth 0)) ()))))))
 (Value
  ((is_rec (New false))
   (cases
    ((((name empty) (typ_vars ()) (args ())
       (typ ((Apply ((path_name ((path ()) (base set))) (depth 0)) ()))))
      (Constructor ((path_name ((path ()) (base Empty))) (depth 0)) ()))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name member) (typ_vars ())
       (args
        ((x (Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))
         (s (Apply ((path_name ((path ()) (base set))) (depth 0)) ()))))
       (typ ((Apply ((path_name ((path ()) (base bool))) (depth 1)) ()))))
      (Match (Variable ((path_name ((path ()) (base s))) (depth 0)))
       (((Constructor ((path_name ((path ()) (base Empty))) (depth 0)) ())
         (Constructor ((path_name ((path ()) (base false))) (depth 1)) ()))
        ((Constructor ((path_name ((path ()) (base Node))) (depth 0))
          ((Variable s1) (Variable y) (Variable s2)))
         (IfThenElse
          (Apply
           (Variable
            ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
           ((Variable ((path_name ((path ()) (base x))) (depth 0)))
            (Variable ((path_name ((path ()) (base y))) (depth 0)))))
          (Apply (Variable ((path_name ((path ()) (base member))) (depth 0)))
           ((Variable ((path_name ((path ()) (base x))) (depth 0)))
            (Variable ((path_name ((path ()) (base s1))) (depth 0)))))
          (IfThenElse
           (Apply
            (Variable
             ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
            ((Variable ((path_name ((path ()) (base y))) (depth 0)))
             (Variable ((path_name ((path ()) (base x))) (depth 0)))))
           (Apply
            (Variable ((path_name ((path ()) (base member))) (depth 0)))
            ((Variable ((path_name ((path ()) (base x))) (depth 0)))
             (Variable ((path_name ((path ()) (base s2))) (depth 0)))))
           (Constructor ((path_name ((path ()) (base true))) (depth 1)) ())))))))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name insert) (typ_vars ())
       (args
        ((x (Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))
         (s (Apply ((path_name ((path ()) (base set))) (depth 0)) ()))))
       (typ ((Apply ((path_name ((path ()) (base set))) (depth 0)) ()))))
      (Match (Variable ((path_name ((path ()) (base s))) (depth 0)))
       (((Constructor ((path_name ((path ()) (base Empty))) (depth 0)) ())
         (Constructor ((path_name ((path ()) (base Node))) (depth 0))
          ((Constructor ((path_name ((path ()) (base Empty))) (depth 0)) ())
           (Variable ((path_name ((path ()) (base x))) (depth 0)))
           (Constructor ((path_name ((path ()) (base Empty))) (depth 0)) ()))))
        ((Constructor ((path_name ((path ()) (base Node))) (depth 0))
          ((Variable s1) (Variable y) (Variable s2)))
         (IfThenElse
          (Apply
           (Variable
            ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
           ((Variable ((path_name ((path ()) (base x))) (depth 0)))
            (Variable ((path_name ((path ()) (base y))) (depth 0)))))
          (Constructor ((path_name ((path ()) (base Node))) (depth 0))
           ((Apply
             (Variable ((path_name ((path ()) (base insert))) (depth 0)))
             ((Variable ((path_name ((path ()) (base x))) (depth 0)))
              (Variable ((path_name ((path ()) (base s1))) (depth 0)))))
            (Variable ((path_name ((path ()) (base y))) (depth 0)))
            (Variable ((path_name ((path ()) (base s2))) (depth 0)))))
          (IfThenElse
           (Apply
            (Variable
             ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
            ((Variable ((path_name ((path ()) (base y))) (depth 0)))
             (Variable ((path_name ((path ()) (base x))) (depth 0)))))
           (Constructor ((path_name ((path ()) (base Node))) (depth 0))
            ((Variable ((path_name ((path ()) (base s1))) (depth 0)))
             (Variable ((path_name ((path ()) (base y))) (depth 0)))
             (Apply
              (Variable ((path_name ((path ()) (base insert))) (depth 0)))
              ((Variable ((path_name ((path ()) (base x))) (depth 0)))
               (Variable ((path_name ((path ()) (base s2))) (depth 0)))))))
           (Variable ((path_name ((path ()) (base s))) (depth 0))))))))))))))
