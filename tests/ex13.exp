((),
  Value
    (non_rec, 'tail', [ 'A' ], [ ('l', Type ('list/1', 'A')) ],
      Some Type ('list/1', 'A')) =
    Match
      (4, Variable (4, 'l/0'),
        [
          (Constructor ('cons/0', Any, 'xs'), Variable (5, 'xs/0'));
          (Constructor ('[]/0'),
            Apply
              (6, Variable (6, 'failwith/0'),
                Constant
                  (6,
                    String("Cannot take the tail of an empty list."))))
        ]))

((),
  Value
    (rec, 'print_list_rec', [ ],
      [
        ('counter', Type ('nat/0'));
        ('match_var_0', Type ('list/1', Type ('string/1')))
      ], Some Type ('unit/1')) =
    Match
      (?, Variable (?, 'counter/0'),
        [
          (Nat(0),
            Apply
              (?, Variable (?, 'not_terminated/0'),
                Variable (?, 'tt/0')));
          (Constructor ('S/0', 'counter'),
            Match
              (?, Variable (?, 'match_var_0/0'),
                [
                  (Constructor ('[]/0'),
                    Constructor
                      (9,
                        'tt/0'));
                  (Constructor ('cons/0', 'x', 'xs'),
                    Sequence
                      (11,
                        Apply
                          (11,
                            Variable
                              (11,
                                'print_string/0'),
                            Variable
                              (11,
                                'x/0')),
                        Apply
                          (12,
                            Apply
                              (?,
                                Variable
                                  (?,
                                    'print_list_rec/0'),
                                Variable
                                  (?,
                                    'counter/0')),
                            Variable
                              (12,
                                'xs/0'))))
                ]))
        ]))

((),
  Value
    (non_rec, 'print_list', [ ],
      [ ('match_var_0', Type ('list/1', Type ('string/1'))) ],
      Some Type ('unit/1')) =
    Let ? (non_rec, 'counter', [ ], [ ], None) =
      Apply (?, Variable (?, 'read_counter/0'), Variable (?, 'tt/0')) in
    Apply
      (?,
        Apply (?, Variable (?, 'print_list_rec/0'), Variable (?, 'counter/0')),
        Variable (?, 'match_var_0/0')))

((),
  Value
    (non_rec, 'f', [ ], [ ],
      Some (Type ('list/1', Type ('string/1')) -> Type ('unit/1'))) =
    Variable (14, 'print_list/0'))

((),
  Value (non_rec, 'x', [ 'A' ], [ ('z', 'A') ], Some Type ('unit/1')) =
    Apply
      (16, Variable (16, 'f/0'),
        Apply
          (16, Variable (16, 'tail/0'),
            Constructor
              (16, 'cons/0', Constant (16, String("Stop")),
                Constructor
                  (16, 'cons/0', Constant (16, String("Hello")),
                    Constructor
                      (16, 'cons/0', Constant (16, String(" ")),
                        Constructor
                          (16, 'cons/0', Constant (16, String("world")),
                            Constructor (16, '[]/0'))))))))
