((),
  Value (non_rec, l, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Let 4
      (rec, map, [ A; B ], [ (f, (B -> A)); (x, Type (list/1, B)) ],
        Some Type (list/1, A)) =
      Match
        (?, Variable (?, x/0),
          [
            (Constructor ([]/1), Constructor (5, []/1));
            (Constructor (cons/1, x, xs),
              Constructor
                (6, cons/1,
                  Apply
                    (6, Variable (6, f/0),
                      Variable (6, x/0)),
                  Apply
                    (?,
                      Apply
                        (6,
                          Variable
                            (6,
                              map/0),
                          Variable
                            (6,
                              f/0)),
                      Variable (6, xs/0))))
          ]) in
    Let 7 (rec, loop, [ A ], [ (x, A) ], Some A) =
      Variable (7, x/0) in
    Apply
      (?,
        Apply
          (8, Variable (8, map/0),
            Function
              (8, n,
                Apply
                  (?, Apply (8, Variable (8, Z.add/1), Variable (8, n/0)),
                    Constant (8, Int(1))))),
        Constructor
          (8, cons/1, Constant (8, Int(5)),
            Constructor
              (8, cons/1, Constant (8, Int(7)),
                Constructor
                  (8, cons/1, Constant (8, Int(8)), Constructor (8, []/1))))))
