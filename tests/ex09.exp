Value (non_rec, 'l', [ ], [ ], Some Type ('list', Type ('Z'))) =
  Let
    (rec, 'map_rec', [ 'A'; 'B' ],
      [
        ('counter', Type ('nat'));
        ('f', ('B' -> 'A'));
        ('match_var_0', Type ('list', 'B'))
      ], Some Type ('list', 'A')) =
    Match
      ('counter',
        [
          (Nat(0), Apply ('not_terminated', 'tt'));
          (Constructor ('S', 'counter'),
            Match
              ('match_var_0',
                [
                  (Constructor ('[]'),
                    Constructor
                      ('[]'));
                  (Constructor ('cons', 'x', 'xs'),
                    Constructor
                      ('cons',
                        Apply
                          ('f',
                            'x'),
                        Apply
                          (Apply
                            (Apply
                              ('map_rec',
                                'counter'),
                              'f'),
                            'xs')))
                ]))
        ]) in
  Let
    (non_rec, 'map', [ 'A'; 'B' ],
      [ ('f', ('B' -> 'A')); ('match_var_0', Type ('list', 'B')) ], Some
      Type ('list', 'A')) =
    Let (non_rec, 'counter', [ ], [ ], None) =
      Apply ('read_counter', 'tt') in
    Apply (Apply (Apply ('map_rec', 'counter'), 'f'), 'match_var_0') in
  Let
    (rec, 'loop_rec', [ 'A' ], [ ('counter', Type ('nat')); ('x', 'A') ], Some
      'A') =
    Match
      ('counter',
        [
          (Nat(0), Apply ('not_terminated', 'tt'));
          (Constructor ('S', 'counter'), 'x')
        ]) in
  Let (non_rec, 'loop', [ 'A' ], [ ('x', 'A') ], Some 'A') =
    Let (non_rec, 'counter', [ ], [ ], None) =
      Apply ('read_counter', 'tt') in
    Apply (Apply ('loop_rec', 'counter'), 'x') in
  Apply
    (Apply ('map', Function ('n', Apply (Apply ('Z.add', 'n'), Int(1)))),
      Constructor
        ('cons', Int(5),
          Constructor
            ('cons', Int(7), Constructor ('cons', Int(8), Constructor ('[]')))))
