Inductive 't1':
  ([ ],
    [
      ('C1', [ Type ('Z') ]);
      ('C2', [ Type ('bool'); Type ('Z') ]);
      ('C3', [ ])
    ])

Value (non_rec, 'n', [ ], [ ], Some Type ('t1')) =
  Constructor ('C2', Constructor ('false'), Int(3))

Value (non_rec, 'm', [ ], [ ], Some Type ('bool')) =
  Match
    ('n', [ (Constructor ('C2', 'b', Any), 'b'); (Any, Constructor ('true')) ])

Inductive 't2':
  ([ 'a' ], [ ('D1', [ ]); ('D2', [ 'a'; Type ('t2', 'a') ]) ])

Value
  (rec, 'of_list_rec', [ 'A' ],
    [ ('counter', Type ('nat')); ('l', Type ('list', 'A')) ], Some
    Monad ([ 'NonTermination' ], Type ('t2', 'A'))) =
  Match
    ('counter',
      [
        (Nat(0), Apply ('not_terminated', 'tt'));
        (Constructor ('S', 'counter'),
          Match
            ('l',
              [
                (Constructor ('[]'),
                  Return
                    (Constructor
                      ('D1')));
                (Constructor ('cons', 'x', 'xs'),
                  Bind
                    (Apply
                      (Apply
                        ('of_list_rec',
                          'counter'),
                        'xs'),
                      Some
                        'x_1',
                      Return
                        (Constructor
                          ('D2',
                            'x',
                            'x_1'))))
              ]))
      ])

Value
  (non_rec, 'of_list', [ 'A' ], [ ('l', Type ('list', 'A')) ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('t2', 'A'))) =
  Bind
    (Lift
      ([ 'Counter' ], [ 'Counter'; 'NonTermination' ],
        Apply ('read_counter', 'tt')), Some 'counter',
      Lift
        ([ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
          Apply (Apply ('of_list_rec', 'counter'), 'l')))

Value
  (rec, 'sum_rec', [ ],
    [ ('counter', Type ('nat')); ('l', Type ('t2', Type ('Z'))) ], Some
    Monad ([ 'NonTermination' ], Type ('Z'))) =
  Match
    ('counter',
      [
        (Nat(0), Apply ('not_terminated', 'tt'));
        (Constructor ('S', 'counter'),
          Match
            ('l',
              [
                (Constructor ('D1'), Return (Int(0)));
                (Constructor ('D2', 'x', 'xs'),
                  Bind
                    (Apply
                      (Apply
                        ('sum_rec',
                          'counter'),
                        'xs'),
                      Some
                        'x_1',
                      Return
                        (Apply
                          (Apply
                            ('Z.add',
                              'x'),
                            'x_1'))))
              ]))
      ])

Value
  (non_rec, 'sum', [ ], [ ('l', Type ('t2', Type ('Z'))) ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
  Bind
    (Lift
      ([ 'Counter' ], [ 'Counter'; 'NonTermination' ],
        Apply ('read_counter', 'tt')), Some 'counter',
      Lift
        ([ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
          Apply (Apply ('sum_rec', 'counter'), 'l')))

Value
  (non_rec, 's', [ ], [ ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
  Bind
    (Apply
      ('of_list',
        Constructor
          ('cons', Int(5),
            Constructor
              ('cons', Int(7), Constructor ('cons', Int(3), Constructor ('[]'))))),
      Some 'x', Apply ('sum', 'x'))
