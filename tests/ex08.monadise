Inductive 't1':
  ([ ],
    [
      ('C1', [ Type ('Z') ]);
      ('C2', [ Type ('bool'); Type ('Z') ]);
      ('C3', [ ])
    ])

Value (non_rec, 'n', [ ], [ ], Some Type ('t1')) =
  Constructor ((), 'C2', Constructor ((), 'false'), Constant ((), Int(3)))

Value (non_rec, 'm', [ ], [ ], Some Type ('bool')) =
  Match
    ((), Variable ((), 'n'),
      [
        (Constructor ('C2', 'b', Any), Variable ((), 'b'));
        (Any, Constructor ((), 'true'))
      ])

Inductive 't2':
  ([ 'a' ], [ ('D1', [ ]); ('D2', [ 'a'; Type ('t2', 'a') ]) ])

Value
  (rec, 'of_list_rec', [ 'A' ],
    [ ('counter', Type ('nat')); ('l', Type ('list', 'A')) ], Some
    Monad ([ 'NonTermination' ], Type ('t2', 'A'))) =
  Match
    ((), Variable ((), 'counter'),
      [
        (Nat(0),
          Apply ((), Variable ((), 'not_terminated'), Variable ((), 'tt')));
        (Constructor ('S', 'counter'),
          Match
            ((), Variable ((), 'l'),
              [
                (Constructor ('[]'),
                  Return
                    ((),
                      Constructor
                        ((),
                          'D1')));
                (Constructor ('cons', 'x', 'xs'),
                  Bind
                    ((),
                      Apply
                        ((),
                          Apply
                            ((),
                              Variable
                                ((),
                                  'of_list_rec'),
                              Variable
                                ((),
                                  'counter')),
                          Variable
                            ((),
                              'xs')),
                      Some
                        'x_1',
                      Return
                        ((),
                          Constructor
                            ((),
                              'D2',
                              Variable
                                ((),
                                  'x'),
                              Variable
                                ((),
                                  'x_1')))))
              ]))
      ])

Value
  (non_rec, 'of_list', [ 'A' ], [ ('l', Type ('list', 'A')) ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('t2', 'A'))) =
  Bind
    ((),
      Lift
        ((), [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
          Apply ((), Variable ((), 'read_counter'), Variable ((), 'tt'))),
      Some 'counter',
      Lift
        ((), [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
          Apply
            ((),
              Apply ((), Variable ((), 'of_list_rec'), Variable ((), 'counter')),
              Variable ((), 'l'))))

Value
  (rec, 'sum_rec', [ ],
    [ ('counter', Type ('nat')); ('l', Type ('t2', Type ('Z'))) ], Some
    Monad ([ 'NonTermination' ], Type ('Z'))) =
  Match
    ((), Variable ((), 'counter'),
      [
        (Nat(0),
          Apply ((), Variable ((), 'not_terminated'), Variable ((), 'tt')));
        (Constructor ('S', 'counter'),
          Match
            ((), Variable ((), 'l'),
              [
                (Constructor ('D1'),
                  Return
                    ((),
                      Constant
                        ((),
                          Int(0))));
                (Constructor ('D2', 'x', 'xs'),
                  Bind
                    ((),
                      Apply
                        ((),
                          Apply
                            ((),
                              Variable
                                ((),
                                  'sum_rec'),
                              Variable
                                ((),
                                  'counter')),
                          Variable
                            ((),
                              'xs')),
                      Some
                        'x_1',
                      Return
                        ((),
                          Apply
                            ((),
                              Apply
                                ((),
                                  Variable
                                    ((),
                                      'Z.add'),
                                  Variable
                                    ((),
                                      'x')),
                              Variable
                                ((),
                                  'x_1')))))
              ]))
      ])

Value
  (non_rec, 'sum', [ ], [ ('l', Type ('t2', Type ('Z'))) ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
  Bind
    ((),
      Lift
        ((), [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
          Apply ((), Variable ((), 'read_counter'), Variable ((), 'tt'))),
      Some 'counter',
      Lift
        ((), [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
          Apply
            ((), Apply ((), Variable ((), 'sum_rec'), Variable ((), 'counter')),
              Variable ((), 'l'))))

Value
  (non_rec, 's', [ ], [ ], Some
    Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
  Bind
    ((),
      Apply
        ((), Variable ((), 'of_list'),
          Constructor
            ((), 'cons', Constant ((), Int(5)),
              Constructor
                ((), 'cons', Constant ((), Int(7)),
                  Constructor
                    ((), 'cons', Constant ((), Int(3)), Constructor ((), '[]'))))),
      Some 'x', Apply ((), Variable ((), 'sum'), Variable ((), 'x')))
