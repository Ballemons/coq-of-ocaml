((),
  Value
    (rec, 'map_rec', [ 'A'; 'B' ],
      [
        ('counter', Type ('nat'));
        ('f', ('B' -> 'A'));
        ('l', Type ('list', 'B'))
      ], Some Monad ([ 'NonTermination' ], Type ('list', 'A'))) =
    Match
      (?, Variable (?, 'counter'),
        [
          (Nat(0),
            Apply (?, Variable (?, 'not_terminated'), Variable (?, 'tt')));
          (Constructor ('S', 'counter'),
            Match
              (4, Variable (4, 'l'),
                [
                  (Constructor ('[]'),
                    Return
                      (?,
                        Constructor
                          (5,
                            '[]')));
                  (Constructor ('cons', 'x', 'xs'),
                    Bind
                      (?,
                        Apply
                          (?,
                            Apply
                              (6,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        'map_rec'),
                                    Variable
                                      (?,
                                        'counter')),
                                Variable
                                  (6,
                                    'f')),
                            Variable
                              (6,
                                'xs')),
                        Some
                          'x_1',
                        Return
                          (?,
                            Constructor
                              (6,
                                'cons',
                                Apply
                                  (6,
                                    Variable
                                      (6,
                                        'f'),
                                    Variable
                                      (6,
                                        'x')),
                                Variable
                                  (?,
                                    'x_1')))))
                ]))
        ]))

((),
  Value
    (non_rec, 'map', [ 'A'; 'B' ],
      [ ('f', ('B' -> 'A')); ('l', Type ('list', 'B')) ],
      Some Monad ([ 'Counter'; 'NonTermination' ], Type ('list', 'A'))) =
    Bind
      (?,
        Lift
          (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
            Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
        Some 'counter',
        Lift
          (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
            Apply
              (?,
                Apply
                  (?,
                    Apply (?, Variable (?, 'map_rec'), Variable (?, 'counter')),
                    Variable (?, 'f')), Variable (?, 'l')))))

((),
  Value
    (rec, 'fold_rec', [ 'A'; 'B' ],
      [
        ('counter', Type ('nat'));
        ('f', ('A' -> ('B' -> 'A')));
        ('a', 'A');
        ('l', Type ('list', 'B'))
      ], Some Monad ([ 'NonTermination' ], 'A')) =
    Match
      (?, Variable (?, 'counter'),
        [
          (Nat(0),
            Apply (?, Variable (?, 'not_terminated'), Variable (?, 'tt')));
          (Constructor ('S', 'counter'),
            Match
              (9, Variable (9, 'l'),
                [
                  (Constructor ('[]'),
                    Return
                      (?,
                        Variable
                          (10,
                            'a')));
                  (Constructor ('cons', 'x', 'xs'),
                    Apply
                      (?,
                        Apply
                          (?,
                            Apply
                              (11,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        'fold_rec'),
                                    Variable
                                      (?,
                                        'counter')),
                                Variable
                                  (11,
                                    'f')),
                            Apply
                              (?,
                                Apply
                                  (11,
                                    Variable
                                      (11,
                                        'f'),
                                    Variable
                                      (11,
                                        'a')),
                                Variable
                                  (11,
                                    'x'))),
                        Variable
                          (11,
                            'xs')))
                ]))
        ]))

((),
  Value
    (non_rec, 'fold', [ 'A'; 'B' ],
      [ ('f', ('A' -> ('B' -> 'A'))); ('a', 'A'); ('l', Type ('list', 'B')) ],
      Some Monad ([ 'Counter'; 'NonTermination' ], 'A')) =
    Bind
      (?,
        Lift
          (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
            Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
        Some 'counter',
        Lift
          (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
            Apply
              (?,
                Apply
                  (?,
                    Apply
                      (?,
                        Apply
                          (?, Variable (?, 'fold_rec'), Variable (?, 'counter')),
                        Variable (?, 'f')), Variable (?, 'a')),
                Variable (?, 'l')))))

((),
  Value (non_rec, 'l', [ ], [ ], Some Type ('list', Type ('Z'))) =
    Constructor
      (13, 'cons', Constant (13, Int(5)),
        Constructor
          (13, 'cons', Constant (13, Int(6)),
            Constructor
              (13, 'cons', Constant (13, Int(7)),
                Constructor
                  (13, 'cons', Constant (13, Int(2)), Constructor (13, '[]'))))))

((),
  Value
    (non_rec, 'n', [ 'A' ],
      [
        ('incr', (Type ('Z') -> 'A'));
        ('plus', (Type ('Z') -> ('A' -> Type ('Z'))))
      ], Some Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
    Bind
      (?,
        Apply
          (?, Apply (16, Variable (16, 'map'), Variable (16, 'incr')),
            Variable (16, 'l')), Some 'x',
        Apply
          (?,
            Apply
              (?,
                Apply
                  (16, Variable (16, 'fold'),
                    Function
                      (16, 'x',
                        Function
                          (16, 'y',
                            Apply
                              (?,
                                Apply
                                  (16, Variable (16, 'plus'), Variable (16, 'x')),
                                Variable (16, 'y'))))), Constant (16, Int(0))),
            Variable (?, 'x'))))
