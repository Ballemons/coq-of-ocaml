16
(.,
  Value
    (@coq_rec, rec, length_aux, [ A698 ],
      [ (len, Type (Z/1)); (x, Type (list/1, A698/0)) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Variable ((17, Effect ([ ], .)), len/0));
          (Constructor (cons/1, a, l),
            Apply
              ((18, Effect ([ ], .)),
                Variable ((18, Effect ([ ], .)), length_aux/0),
                [
                  Apply
                    ((18,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((18,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/0),
                      [
                        Variable
                          ((18,
                            Effect
                              ([
                              ],
                                .)),
                            len/0);
                        Constant
                          ((18,
                            Effect
                              ([
                              ],
                                .)),
                            Int(1))
                      ]);
                  Variable ((18, Effect ([ ], .)), l/0)
                ]))
        ]))

21
(. -> .,
  Value
    (@., non_rec, length, [ A730 ], [ (l, Type (list/1, A730/0)) ],
      Some Type (Z/1)) =
    Apply
      ((21, Effect ([ ], .)), Variable ((21, Effect ([ ], .)), length_aux/0),
        [
          Constant ((21, Effect ([ ], .)), Int(0));
          Variable ((21, Effect ([ ], .)), l/0)
        ]))

23
(. -[ OCaml.Failure/1 ]-> .,
  Value (@., non_rec, hd, [ A739 ], [ (x, Type (list/1, A739/0)) ], Some A739/0)
    =
    Match
      ((?, Effect ([ OCaml.Failure/1 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1),
            Apply
              ((24, Effect ([ OCaml.Failure/1 ], .)),
                Variable
                  ((24,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/1
                          ]-> .)),
                    OCaml.Pervasives.failwith/1),
                [
                  Constant
                    ((24,
                      Effect
                        ([
                        ],
                          .)),
                      String("hd"))
                ]));
          (Constructor (cons/1, a, l), Variable ((25, Effect ([ ], .)), a/0))
        ]))

27
(. -[ OCaml.Failure/1 ]-> .,
  Value
    (@., non_rec, tl, [ A772 ], [ (x, Type (list/1, A772/0)) ],
      Some Type (list/1, A772/0)) =
    Match
      ((?, Effect ([ OCaml.Failure/1 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1),
            Apply
              ((28, Effect ([ OCaml.Failure/1 ], .)),
                Variable
                  ((28,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/1
                          ]-> .)),
                    OCaml.Pervasives.failwith/1),
                [
                  Constant
                    ((28,
                      Effect
                        ([
                        ],
                          .)),
                      String("tl"))
                ]));
          (Constructor (cons/1, a, l), Variable ((29, Effect ([ ], .)), l/0))
        ]))

31
(. -> . -[ OCaml.Failure/1; OCaml.Invalid_argument/1 ]-> .,
  Value
    (@., non_rec, nth, [ A791 ],
      [ (l, Type (list/1, A791/0)); (n, Type (Z/1)) ], Some A791/0) =
    IfThenElse
      ((32, Effect ([ OCaml.Failure/1; OCaml.Invalid_argument/1 ], .)),
        Apply
          ((32, Effect ([ ], .)),
            Variable ((32, Effect ([ ], .)), OCaml.Pervasives.lt/0),
            [
              Variable ((32, Effect ([ ], .)), n/0);
              Constant ((32, Effect ([ ], .)), Int(0))
            ]),
        Apply
          ((32, Effect ([ OCaml.Invalid_argument/1 ], .)),
            Variable
              ((32, Effect ([ ], . -[ OCaml.Invalid_argument/1 ]-> .)),
                OCaml.Pervasives.invalid_arg/1),
            [ Constant ((32, Effect ([ ], .)), String("List.nth")) ]),
        Let (33, Effect ([ OCaml.Failure/1 ], .))
          (@coq_rec, rec, nth_aux, [ A813 ],
            [ (l, Type (list/1, A813/0)); (n, Type (Z/1)) ], Some A813/0) =
          Match
            ((34, Effect ([ OCaml.Failure/1 ], .)),
              Variable ((34, Effect ([ ], .)), l/0),
              [
                (Constructor ([]/1),
                  Apply
                    ((35,
                      Effect
                        ([
                          OCaml.Failure/1
                        ], .)),
                      Variable
                        ((35,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  OCaml.Failure/1
                                ]->
                                .)),
                          OCaml.Pervasives.failwith/1),
                      [
                        Constant
                          ((35,
                            Effect
                              ([
                              ],
                                .)),
                            String("nth"))
                      ]));
                (Constructor (cons/1, a, l),
                  IfThenElse
                    ((36,
                      Effect
                        ([
                          OCaml.Failure/1
                        ], .)),
                      Apply
                        ((36,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((36,
                              Effect
                                ([
                                ],
                                  .)),
                              equiv_decb/0),
                          [
                            Variable
                              ((36,
                                Effect
                                  ([
                                  ],
                                    .)),
                                n/0);
                            Constant
                              ((36,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(0))
                          ]),
                      Variable
                        ((36,
                          Effect
                            ([
                            ],
                              .)),
                          a/0),
                      Apply
                        ((36,
                          Effect
                            ([
                              OCaml.Failure/1
                            ],
                              .)),
                          Variable
                            ((36,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      -[
                                        OCaml.Failure/1
                                      ]->
                                      .)),
                              nth_aux/0),
                          [
                            Variable
                              ((36,
                                Effect
                                  ([
                                  ],
                                    .)),
                                l/0);
                            Apply
                              ((36,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Variable
                                  ((36,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Z.sub/0),
                                [
                                  Variable
                                    ((36,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      n/0);
                                  Constant
                                    ((36,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(1))
                                ])
                          ])))
              ]) in
        Apply
          ((38, Effect ([ OCaml.Failure/1 ], .)),
            Variable
              ((38, Effect ([ ], . -> . -[ OCaml.Failure/1 ]-> .)), nth_aux/0),
            [
              Variable ((38, Effect ([ ], .)), l/0);
              Variable ((38, Effect ([ ], .)), n/0)
            ])))

40
(.,
  Value
    (@., non_rec, append, [ A886 ], [ ],
      Some
        (Type (list/1, A886/0) ->
          (Type (list/1, A886/0) -> Type (list/1, A886/0)))) =
    Variable ((40, Effect ([ ], .)), OCaml.Pervasives.app/0))

42
(.,
  Value
    (@coq_rec, rec, rev_append, [ A915 ],
      [ (l1, Type (list/1, A915/0)); (l2, Type (list/1, A915/0)) ],
      Some Type (list/1, A915/0)) =
    Match
      ((43, Effect ([ ], .)), Variable ((43, Effect ([ ], .)), l1/0),
        [
          (Constructor ([]/1), Variable ((44, Effect ([ ], .)), l2/0));
          (Constructor (cons/1, a, l),
            Apply
              ((45, Effect ([ ], .)),
                Variable ((45, Effect ([ ], .)), rev_append/0),
                [
                  Variable ((45, Effect ([ ], .)), l/0);
                  Constructor
                    ((45,
                      Effect
                        ([
                        ],
                          .)),
                      cons/1,
                      Variable
                        ((45,
                          Effect
                            ([
                            ],
                              .)),
                          a/0),
                      Variable
                        ((45,
                          Effect
                            ([
                            ],
                              .)),
                          l2/0))
                ]))
        ]))

48
(. -> .,
  Value
    (@., non_rec, rev, [ A932 ], [ (l, Type (list/1, A932/0)) ],
      Some Type (list/1, A932/0)) =
    Apply
      ((48, Effect ([ ], .)), Variable ((48, Effect ([ ], .)), rev_append/0),
        [
          Variable ((48, Effect ([ ], .)), l/0);
          Constructor ((48, Effect ([ ], .)), []/1)
        ]))

50
(.,
  Value
    (@coq_rec, rec, flatten, [ A961 ],
      [ (x, Type (list/1, Type (list/1, A961/0))) ], Some Type (list/1, A961/0))
    =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((51, Effect ([ ], .)), []/1));
          (Constructor (cons/1, l, r),
            Apply
              ((52, Effect ([ ], .)),
                Variable
                  ((52, Effect ([ ], .)),
                    OCaml.Pervasives.app/0),
                [
                  Variable ((52, Effect ([ ], .)), l/0);
                  Apply
                    ((52,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((52,
                          Effect
                            ([
                            ],
                              .)),
                          flatten/0),
                      [
                        Variable
                          ((52,
                            Effect
                              ([
                              ],
                                .)),
                            r/0)
                      ])
                ]))
        ]))

55
(.,
  Value
    (@., non_rec, concat, [ A976 ], [ ],
      Some (Type (list/1, Type (list/1, A976/0)) -> Type (list/1, A976/0))) =
    Variable ((55, Effect ([ ], .)), flatten/0))

57
(.,
  Value
    (@coq_rec, rec, map, [ A1001; A998 ],
      [ (f, (A1001/0 -> A998/0)); (x, Type (list/1, A1001/0)) ],
      Some Type (list/1, A998/0)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((58, Effect ([ ], .)), []/1));
          (Constructor (cons/1, a, l),
            Let (59, Effect ([ ], .)) (@., non_rec, r, [ ], [ ], None) =
              Apply
                ((59, Effect ([ ], .)),
                  Variable ((59, Effect ([ ], .)), f/0),
                  [
                    Variable
                      ((59,
                        Effect
                          ([
                          ],
                            .)),
                        a/0)
                  ]) in
            Constructor
              ((59, Effect ([ ], .)), cons/1,
                Variable ((59, Effect ([ ], .)), r/0),
                Apply
                  ((59, Effect ([ ], .)),
                    Variable
                      ((59, Effect ([ ], .)),
                        map/0),
                    [
                      Variable
                        ((59,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((59,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ])))
        ]))

62
(.,
  Value
    (@coq_rec, rec, mapi_aux, [ A1041; A1047 ],
      [
        (i, Type (Z/1));
        (f, (Type (Z/1) -> (A1047/0 -> A1041/0)));
        (x, Type (list/1, A1047/0))
      ], Some Type (list/1, A1041/0)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((63, Effect ([ ], .)), []/1));
          (Constructor (cons/1, a, l),
            Let (64, Effect ([ ], .)) (@., non_rec, r, [ ], [ ], None) =
              Apply
                ((64, Effect ([ ], .)),
                  Variable ((64, Effect ([ ], .)), f/0),
                  [
                    Variable
                      ((64,
                        Effect
                          ([
                          ],
                            .)),
                        i/0);
                    Variable
                      ((64,
                        Effect
                          ([
                          ],
                            .)),
                        a/0)
                  ]) in
            Constructor
              ((64, Effect ([ ], .)), cons/1,
                Variable ((64, Effect ([ ], .)), r/0),
                Apply
                  ((64, Effect ([ ], .)),
                    Variable
                      ((64, Effect ([ ], .)),
                        mapi_aux/0),
                    [
                      Apply
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((64,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.add/0),
                          [
                            Variable
                              ((64,
                                Effect
                                  ([
                                  ],
                                    .)),
                                i/0);
                            Constant
                              ((64,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(1))
                          ]);
                      Variable
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ])))
        ]))

67
(. -> . -> .,
  Value
    (@., non_rec, mapi, [ A1093; A1095 ],
      [ (f, (Type (Z/1) -> (A1095/0 -> A1093/0))); (l, Type (list/1, A1095/0)) ],
      Some Type (list/1, A1093/0)) =
    Apply
      ((67, Effect ([ ], .)), Variable ((67, Effect ([ ], .)), mapi_aux/0),
        [
          Constant ((67, Effect ([ ], .)), Int(0));
          Variable ((67, Effect ([ ], .)), f/0);
          Variable ((67, Effect ([ ], .)), l/0)
        ]))

69
(. -> . -> .,
  Value
    (@., non_rec, rev_map, [ A1142; A1145 ],
      [ (f, (A1145/0 -> A1142/0)); (l, Type (list/1, A1145/0)) ],
      Some Type (list/1, A1142/0)) =
    Let (70, Effect ([ ], .))
      (@coq_rec, rec, rmap_f, [ ],
        [ (accu, Type (list/1, A1142/0)); (x, Type (list/1, A1145/0)) ],
        Some Type (list/1, A1142/0)) =
      Match
        ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
          [
            (Constructor ([]/1), Variable ((71, Effect ([ ], .)), accu/0));
            (Constructor (cons/1, a, l),
              Apply
                ((72, Effect ([ ], .)),
                  Variable
                    ((72, Effect ([ ], .)),
                      rmap_f/0),
                  [
                    Constructor
                      ((72,
                        Effect
                          ([
                          ],
                            .)),
                        cons/1,
                        Apply
                          ((72,
                            Effect
                              ([
                              ],
                                .)),
                            Variable
                              ((72,
                                Effect
                                  ([
                                  ],
                                    .)),
                                f/0),
                            [
                              Variable
                                ((72,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  a/0)
                            ]),
                        Variable
                          ((72,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0));
                    Variable
                      ((72,
                        Effect
                          ([
                          ],
                            .)),
                        l/0)
                  ]))
          ]) in
    Apply
      ((74, Effect ([ ], .)), Variable ((74, Effect ([ ], .)), rmap_f/0),
        [
          Constructor ((74, Effect ([ ], .)), []/1);
          Variable ((74, Effect ([ ], .)), l/0)
        ]))

76
(.,
  Value
    (@coq_rec, rec, iter, [ A1188; A1190 ],
      [ (f, (A1190/0 -> A1188/0)); (x, Type (list/1, A1190/0)) ],
      Some Type (unit/1)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((77, Effect ([ ], .)), tt/1));
          (Constructor (cons/1, a, l),
            Sequence
              ((78, Effect ([ ], .)),
                Apply
                  ((78, Effect ([ ], .)),
                    Variable
                      ((78, Effect ([ ], .)),
                        f/0),
                    [
                      Variable
                        ((78,
                          Effect
                            ([
                            ],
                              .)),
                          a/0)
                    ]),
                Apply
                  ((78, Effect ([ ], .)),
                    Variable
                      ((78, Effect ([ ], .)),
                        iter/0),
                    [
                      Variable
                        ((78,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((78,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ])))
        ]))

81
(.,
  Value
    (@coq_rec, rec, iteri_aux, [ A1228; A1233 ],
      [
        (i, Type (Z/1));
        (f, (Type (Z/1) -> (A1233/0 -> A1228/0)));
        (x, Type (list/1, A1233/0))
      ], Some Type (unit/1)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((82, Effect ([ ], .)), tt/1));
          (Constructor (cons/1, a, l),
            Sequence
              ((83, Effect ([ ], .)),
                Apply
                  ((83, Effect ([ ], .)),
                    Variable
                      ((83, Effect ([ ], .)),
                        f/0),
                    [
                      Variable
                        ((83,
                          Effect
                            ([
                            ],
                              .)),
                          i/0);
                      Variable
                        ((83,
                          Effect
                            ([
                            ],
                              .)),
                          a/0)
                    ]),
                Apply
                  ((83, Effect ([ ], .)),
                    Variable
                      ((83, Effect ([ ], .)),
                        iteri_aux/0),
                    [
                      Apply
                        ((83,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((83,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.add/0),
                          [
                            Variable
                              ((83,
                                Effect
                                  ([
                                  ],
                                    .)),
                                i/0);
                            Constant
                              ((83,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(1))
                          ]);
                      Variable
                        ((83,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((83,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ])))
        ]))

86
(. -> . -> .,
  Value
    (@., non_rec, iteri, [ A1278; A1281 ],
      [ (f, (Type (Z/1) -> (A1278/0 -> A1281/0))); (l, Type (list/1, A1278/0)) ],
      Some Type (unit/1)) =
    Apply
      ((86, Effect ([ ], .)), Variable ((86, Effect ([ ], .)), iteri_aux/0),
        [
          Constant ((86, Effect ([ ], .)), Int(0));
          Variable ((86, Effect ([ ], .)), f/0);
          Variable ((86, Effect ([ ], .)), l/0)
        ]))

88
(.,
  Value
    (@coq_rec, rec, fold_left, [ A1323; A1326 ],
      [
        (f, (A1323/0 -> (A1326/0 -> A1323/0)));
        (accu, A1323/0);
        (l, Type (list/1, A1326/0))
      ], Some A1323/0) =
    Match
      ((89, Effect ([ ], .)), Variable ((89, Effect ([ ], .)), l/0),
        [
          (Constructor ([]/1), Variable ((90, Effect ([ ], .)), accu/0));
          (Constructor (cons/1, a, l),
            Apply
              ((91, Effect ([ ], .)),
                Variable ((91, Effect ([ ], .)), fold_left/0),
                [
                  Variable ((91, Effect ([ ], .)), f/0);
                  Apply
                    ((91,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((91,
                          Effect
                            ([
                            ],
                              .)),
                          f/0),
                      [
                        Variable
                          ((91,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0);
                        Variable
                          ((91,
                            Effect
                              ([
                              ],
                                .)),
                            a/0)
                      ]);
                  Variable ((91, Effect ([ ], .)), l/0)
                ]))
        ]))

94
(.,
  Value
    (@coq_rec, rec, fold_right, [ A1364; A1367 ],
      [
        (f, (A1364/0 -> (A1367/0 -> A1367/0)));
        (l, Type (list/1, A1364/0));
        (accu, A1367/0)
      ], Some A1367/0) =
    Match
      ((95, Effect ([ ], .)), Variable ((95, Effect ([ ], .)), l/0),
        [
          (Constructor ([]/1), Variable ((96, Effect ([ ], .)), accu/0));
          (Constructor (cons/1, a, l),
            Apply
              ((97, Effect ([ ], .)),
                Variable ((97, Effect ([ ], .)), f/0),
                [
                  Variable ((97, Effect ([ ], .)), a/0);
                  Apply
                    ((97,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((97,
                          Effect
                            ([
                            ],
                              .)),
                          fold_right/0),
                      [
                        Variable
                          ((97,
                            Effect
                              ([
                              ],
                                .)),
                            f/0);
                        Variable
                          ((97,
                            Effect
                              ([
                              ],
                                .)),
                            l/0);
                        Variable
                          ((97,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0)
                      ])
                ]))
        ]))

100
(. -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, map2, [ A1443; A1446; A1449 ],
      [
        (f, (A1446/0 -> (A1449/0 -> A1443/0)));
        (l1, Type (list/1, A1446/0));
        (l2, Type (list/1, A1449/0))
      ], Some Type (list/1, A1443/0)) =
    Match
      ((101, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((101, Effect ([ ], .)), Variable ((101, Effect ([ ], .)), l1/0),
            Variable ((101, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Constructor ((102, Effect ([ ], .)), []/1));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Let (103, Effect ([ OCaml.Invalid_argument/1 ], .))
              (@., non_rec, r, [ ], [ ], None) =
              Apply
                ((103, Effect ([ ], .)),
                  Variable ((103, Effect ([ ], .)), f/0),
                  [
                    Variable
                      ((103,
                        Effect
                          ([
                          ],
                            .)),
                        a1/0);
                    Variable
                      ((103,
                        Effect
                          ([
                          ],
                            .)),
                        a2/0)
                  ]) in
            Constructor
              ((103, Effect ([ OCaml.Invalid_argument/1 ], .)),
                cons/1,
                Variable ((103, Effect ([ ], .)), r/0),
                Apply
                  ((103,
                    Effect
                      ([
                        OCaml.Invalid_argument/1
                      ], .)),
                    Variable
                      ((103,
                        Effect
                          ([ ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    OCaml.Invalid_argument/1
                                  ]->
                                  .)),
                        map2/0),
                    [
                      Variable
                        ((103,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((103,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0);
                      Variable
                        ((103,
                          Effect
                            ([
                            ],
                              .)),
                          l2/0)
                    ])));
          (Tuple (Any, Any),
            Apply
              ((104, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((104,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((104,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.map2"))
                ]))
        ]))

107
(. -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@., non_rec, rev_map2, [ A1556; A1559; A1562 ],
      [
        (f, (A1559/0 -> (A1562/0 -> A1556/0)));
        (l1, Type (list/1, A1559/0));
        (l2, Type (list/1, A1562/0))
      ], Some Type (list/1, A1556/0)) =
    Let (108, Effect ([ OCaml.Invalid_argument/1 ], .))
      (@coq_rec, rec, rmap2_f, [ ],
        [
          (accu, Type (list/1, A1556/0));
          (l1, Type (list/1, A1559/0));
          (l2, Type (list/1, A1562/0))
        ], Some Type (list/1, A1556/0)) =
      Match
        ((109, Effect ([ OCaml.Invalid_argument/1 ], .)),
          Tuple
            ((109, Effect ([ ], .)), Variable ((109, Effect ([ ], .)), l1/0),
              Variable ((109, Effect ([ ], .)), l2/0)),
          [
            (Tuple (Constructor ([]/1), Constructor ([]/1)),
              Variable ((110, Effect ([ ], .)), accu/0));
            (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
              Apply
                ((111, Effect ([ OCaml.Invalid_argument/1 ], .)),
                  Variable
                    ((111,
                      Effect
                        ([ ],
                          .
                            ->
                            .
                              ->
                              .
                                -[
                                  OCaml.Invalid_argument/1
                                ]->
                                .)),
                      rmap2_f/0),
                  [
                    Constructor
                      ((111,
                        Effect
                          ([
                          ],
                            .)),
                        cons/1,
                        Apply
                          ((111,
                            Effect
                              ([
                              ],
                                .)),
                            Variable
                              ((111,
                                Effect
                                  ([
                                  ],
                                    .)),
                                f/0),
                            [
                              Variable
                                ((111,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  a1/0);
                              Variable
                                ((111,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  a2/0)
                            ]),
                        Variable
                          ((111,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0));
                    Variable
                      ((111,
                        Effect
                          ([
                          ],
                            .)),
                        l1/0);
                    Variable
                      ((111,
                        Effect
                          ([
                          ],
                            .)),
                        l2/0)
                  ]));
            (Tuple (Any, Any),
              Apply
                ((112, Effect ([ OCaml.Invalid_argument/1 ], .)),
                  Variable
                    ((112,
                      Effect
                        ([ ],
                          .
                            -[
                              OCaml.Invalid_argument/1
                            ]->
                            .)),
                      OCaml.Pervasives.invalid_arg/1),
                  [
                    Constant
                      ((112,
                        Effect
                          ([
                          ],
                            .)),
                        String("List.rev_map2"))
                  ]))
          ]) in
    Apply
      ((114, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Variable
          ((114, Effect ([ ], . -> . -> . -[ OCaml.Invalid_argument/1 ]-> .)),
            rmap2_f/0),
        [
          Constructor ((114, Effect ([ ], .)), []/1);
          Variable ((114, Effect ([ ], .)), l1/0);
          Variable ((114, Effect ([ ], .)), l2/0)
        ]))

116
(. -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, iter2, [ A1660; A1662; A1665 ],
      [
        (f, (A1662/0 -> (A1665/0 -> A1660/0)));
        (l1, Type (list/1, A1662/0));
        (l2, Type (list/1, A1665/0))
      ], Some Type (unit/1)) =
    Match
      ((117, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((117, Effect ([ ], .)), Variable ((117, Effect ([ ], .)), l1/0),
            Variable ((117, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Constructor ((118, Effect ([ ], .)), tt/1));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Sequence
              ((119, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Apply
                  ((119, Effect ([ ], .)),
                    Variable
                      ((119, Effect ([ ], .)),
                        f/0),
                    [
                      Variable
                        ((119,
                          Effect
                            ([
                            ],
                              .)),
                          a1/0);
                      Variable
                        ((119,
                          Effect
                            ([
                            ],
                              .)),
                          a2/0)
                    ]),
                Apply
                  ((119,
                    Effect
                      ([
                        OCaml.Invalid_argument/1
                      ], .)),
                    Variable
                      ((119,
                        Effect
                          ([ ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    OCaml.Invalid_argument/1
                                  ]->
                                  .)),
                        iter2/0),
                    [
                      Variable
                        ((119,
                          Effect
                            ([
                            ],
                              .)),
                          f/0);
                      Variable
                        ((119,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0);
                      Variable
                        ((119,
                          Effect
                            ([
                            ],
                              .)),
                          l2/0)
                    ])));
          (Tuple (Any, Any),
            Apply
              ((120, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((120,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((120,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.iter2"))
                ]))
        ]))

123
(. -> . -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, fold_left2, [ A1759; A1762; A1765 ],
      [
        (f, (A1759/0 -> (A1762/0 -> (A1765/0 -> A1759/0))));
        (accu, A1759/0);
        (l1, Type (list/1, A1762/0));
        (l2, Type (list/1, A1765/0))
      ], Some A1759/0) =
    Match
      ((124, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((124, Effect ([ ], .)), Variable ((124, Effect ([ ], .)), l1/0),
            Variable ((124, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Variable ((125, Effect ([ ], .)), accu/0));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              ((126, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((126,
                    Effect
                      ([ ],
                        . ->
                          . ->
                            .
                              ->
                              .
                                -[
                                  OCaml.Invalid_argument/1
                                ]->
                                .)),
                    fold_left2/0),
                [
                  Variable ((126, Effect ([ ], .)), f/0);
                  Apply
                    ((126,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((126,
                          Effect
                            ([
                            ],
                              .)),
                          f/0),
                      [
                        Variable
                          ((126,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0);
                        Variable
                          ((126,
                            Effect
                              ([
                              ],
                                .)),
                            a1/0);
                        Variable
                          ((126,
                            Effect
                              ([
                              ],
                                .)),
                            a2/0)
                      ]);
                  Variable
                    ((126,
                      Effect
                        ([
                        ],
                          .)),
                      l1/0);
                  Variable
                    ((126,
                      Effect
                        ([
                        ],
                          .)),
                      l2/0)
                ]));
          (Tuple (Any, Any),
            Apply
              ((127, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((127,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((127,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.fold_left2"))
                ]))
        ]))

130
(. -> . -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, fold_right2, [ A1850; A1853; A1856 ],
      [
        (f, (A1850/0 -> (A1853/0 -> (A1856/0 -> A1856/0))));
        (l1, Type (list/1, A1850/0));
        (l2, Type (list/1, A1853/0));
        (accu, A1856/0)
      ], Some A1856/0) =
    Match
      ((131, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((131, Effect ([ ], .)), Variable ((131, Effect ([ ], .)), l1/0),
            Variable ((131, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Variable ((132, Effect ([ ], .)), accu/0));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              ((133, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable ((133, Effect ([ ], .)), f/0),
                [
                  Variable
                    ((133,
                      Effect
                        ([
                        ],
                          .)),
                      a1/0);
                  Variable
                    ((133,
                      Effect
                        ([
                        ],
                          .)),
                      a2/0);
                  Apply
                    ((133,
                      Effect
                        ([
                          OCaml.Invalid_argument/1
                        ],
                          .)),
                      Variable
                        ((133,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .
                                    ->
                                    .
                                      -[
                                        OCaml.Invalid_argument/1
                                      ]->
                                      .)),
                          fold_right2/0),
                      [
                        Variable
                          ((133,
                            Effect
                              ([
                              ],
                                .)),
                            f/0);
                        Variable
                          ((133,
                            Effect
                              ([
                              ],
                                .)),
                            l1/0);
                        Variable
                          ((133,
                            Effect
                              ([
                              ],
                                .)),
                            l2/0);
                        Variable
                          ((133,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0)
                      ])
                ]));
          (Tuple (Any, Any),
            Apply
              ((134, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((134,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((134,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.fold_right2"))
                ]))
        ]))

137
(.,
  Value
    (@coq_rec, rec, for_all, [ A1912 ],
      [ (p, (A1912/0 -> Type (bool/1))); (x, Type (list/1, A1912/0)) ],
      Some Type (bool/1)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((138, Effect ([ ], .)), true/1));
          (Constructor (cons/1, a, l),
            Apply
              ((139, Effect ([ ], .)),
                Variable ((139, Effect ([ ], .)), andb/0),
                [
                  Apply
                    ((139,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((139,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((139,
                            Effect
                              ([
                              ],
                                .)),
                            a/0)
                      ]);
                  Apply
                    ((139,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((139,
                          Effect
                            ([
                            ],
                              .)),
                          for_all/0),
                      [
                        Variable
                          ((139,
                            Effect
                              ([
                              ],
                                .)),
                            p/0);
                        Variable
                          ((139,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ])
                ]))
        ]))

142
(.,
  Value
    (@coq_rec, rec, _exists, [ A1955 ],
      [ (p, (A1955/0 -> Type (bool/1))); (x, Type (list/1, A1955/0)) ],
      Some Type (bool/1)) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1), Constructor ((143, Effect ([ ], .)), false/1));
          (Constructor (cons/1, a, l),
            Apply
              ((144, Effect ([ ], .)),
                Variable ((144, Effect ([ ], .)), orb/0),
                [
                  Apply
                    ((144,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((144,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((144,
                            Effect
                              ([
                              ],
                                .)),
                            a/0)
                      ]);
                  Apply
                    ((144,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((144,
                          Effect
                            ([
                            ],
                              .)),
                          _exists/0),
                      [
                        Variable
                          ((144,
                            Effect
                              ([
                              ],
                                .)),
                            p/0);
                        Variable
                          ((144,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ])
                ]))
        ]))

147
(. -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, for_all2, [ A2038; A2041 ],
      [
        (p, (A2038/0 -> (A2041/0 -> Type (bool/1))));
        (l1, Type (list/1, A2038/0));
        (l2, Type (list/1, A2041/0))
      ], Some Type (bool/1)) =
    Match
      ((148, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((148, Effect ([ ], .)), Variable ((148, Effect ([ ], .)), l1/0),
            Variable ((148, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Constructor ((149, Effect ([ ], .)), true/1));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              ((150, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable ((150, Effect ([ ], .)), andb/0),
                [
                  Apply
                    ((150,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((150,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((150,
                            Effect
                              ([
                              ],
                                .)),
                            a1/0);
                        Variable
                          ((150,
                            Effect
                              ([
                              ],
                                .)),
                            a2/0)
                      ]);
                  Apply
                    ((150,
                      Effect
                        ([
                          OCaml.Invalid_argument/1
                        ],
                          .)),
                      Variable
                        ((150,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .
                                    -[
                                      OCaml.Invalid_argument/1
                                    ]->
                                    .)),
                          for_all2/0),
                      [
                        Variable
                          ((150,
                            Effect
                              ([
                              ],
                                .)),
                            p/0);
                        Variable
                          ((150,
                            Effect
                              ([
                              ],
                                .)),
                            l1/0);
                        Variable
                          ((150,
                            Effect
                              ([
                              ],
                                .)),
                            l2/0)
                      ])
                ]));
          (Tuple (Any, Any),
            Apply
              ((151, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((151,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((151,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.for_all2"))
                ]))
        ]))

154
(. -> . -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, _exists2, [ A2135; A2138 ],
      [
        (p, (A2135/0 -> (A2138/0 -> Type (bool/1))));
        (l1, Type (list/1, A2135/0));
        (l2, Type (list/1, A2138/0))
      ], Some Type (bool/1)) =
    Match
      ((155, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((155, Effect ([ ], .)), Variable ((155, Effect ([ ], .)), l1/0),
            Variable ((155, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Constructor ((156, Effect ([ ], .)), false/1));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              ((157, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable ((157, Effect ([ ], .)), orb/0),
                [
                  Apply
                    ((157,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((157,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((157,
                            Effect
                              ([
                              ],
                                .)),
                            a1/0);
                        Variable
                          ((157,
                            Effect
                              ([
                              ],
                                .)),
                            a2/0)
                      ]);
                  Apply
                    ((157,
                      Effect
                        ([
                          OCaml.Invalid_argument/1
                        ],
                          .)),
                      Variable
                        ((157,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .
                                    -[
                                      OCaml.Invalid_argument/1
                                    ]->
                                    .)),
                          _exists2/0),
                      [
                        Variable
                          ((157,
                            Effect
                              ([
                              ],
                                .)),
                            p/0);
                        Variable
                          ((157,
                            Effect
                              ([
                              ],
                                .)),
                            l1/0);
                        Variable
                          ((157,
                            Effect
                              ([
                              ],
                                .)),
                            l2/0)
                      ])
                ]));
          (Tuple (Any, Any),
            Apply
              ((158, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((158,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((158,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.exists2"))
                ]))
        ]))

194
(. -> . -[ OCaml.Not_found/1 ]-> .,
  Value
    (@coq_rec, rec, find, [ A2165 ],
      [ (p, (A2165/0 -> Type (bool/1))); (x, Type (list/1, A2165/0)) ],
      Some A2165/0) =
    Match
      ((?, Effect ([ OCaml.Not_found/1 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1),
            Apply
              ((195, Effect ([ OCaml.Not_found/1 ], .)),
                Variable
                  ((195,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Not_found/1
                          ]-> .)),
                    OCaml.raise_Not_found/1),
                [ Tuple ((?, Effect ([ ], .))) ]));
          (Constructor (cons/1, x, l),
            IfThenElse
              ((196, Effect ([ OCaml.Not_found/1 ], .)),
                Apply
                  ((196, Effect ([ ], .)),
                    Variable
                      ((196, Effect ([ ], .)),
                        p/0),
                    [
                      Variable
                        ((196,
                          Effect
                            ([
                            ],
                              .)),
                          x/0)
                    ]),
                Variable ((196, Effect ([ ], .)), x/0),
                Apply
                  ((196,
                    Effect
                      ([ OCaml.Not_found/1 ],
                        .)),
                    Variable
                      ((196,
                        Effect
                          ([ ],
                            .
                              ->
                              .
                                -[
                                  OCaml.Not_found/1
                                ]->
                                .)),
                        find/0),
                    [
                      Variable
                        ((196,
                          Effect
                            ([
                            ],
                              .)),
                          p/0);
                      Variable
                        ((196,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ])))
        ]))

199
(. -> .,
  Value
    (@., non_rec, find_all, [ A2232 ], [ (p, (A2232/0 -> Type (bool/1))) ],
      Some (Type (list/1, A2232/0) -> Type (list/1, A2232/0))) =
    Let (200, Effect ([ ], .))
      (@coq_rec, rec, find, [ ],
        [ (accu, Type (list/1, A2232/0)); (x, Type (list/1, A2232/0)) ],
        Some Type (list/1, A2232/0)) =
      Match
        ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
          [
            (Constructor ([]/1),
              Apply
                ((201, Effect ([ ], .)),
                  Variable
                    ((201, Effect ([ ], . -> .)),
                      rev/0),
                  [
                    Variable
                      ((201,
                        Effect
                          ([
                          ],
                            .)),
                        accu/0)
                  ]));
            (Constructor (cons/1, x, l),
              IfThenElse
                ((202, Effect ([ ], .)),
                  Apply
                    ((202, Effect ([ ], .)),
                      Variable
                        ((202,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((202,
                            Effect
                              ([
                              ],
                                .)),
                            x/0)
                      ]),
                  Apply
                    ((202, Effect ([ ], .)),
                      Variable
                        ((202,
                          Effect
                            ([
                            ],
                              .)),
                          find/0),
                      [
                        Constructor
                          ((202,
                            Effect
                              ([
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((202,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0),
                            Variable
                              ((202,
                                Effect
                                  ([
                                  ],
                                    .)),
                                accu/0));
                        Variable
                          ((202,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ]),
                  Apply
                    ((202, Effect ([ ], .)),
                      Variable
                        ((202,
                          Effect
                            ([
                            ],
                              .)),
                          find/0),
                      [
                        Variable
                          ((202,
                            Effect
                              ([
                              ],
                                .)),
                            accu/0);
                        Variable
                          ((202,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ])))
          ]) in
    Apply
      ((204, Effect ([ ], .)), Variable ((204, Effect ([ ], .)), find/0),
        [ Constructor ((204, Effect ([ ], .)), []/1) ]))

206
(. -> .,
  Value
    (@., non_rec, filter, [ A2276 ], [ ],
      Some
        ((A2276/0 -> Type (bool/1)) ->
          (Type (list/1, A2276/0) -> Type (list/1, A2276/0)))) =
    Variable ((206, Effect ([ ], . -> .)), find_all/0))

208
(. -> . -> .,
  Value
    (@., non_rec, partition, [ A2328 ],
      [ (p, (A2328/0 -> Type (bool/1))); (l, Type (list/1, A2328/0)) ],
      Some (Type (list/1, A2328/0) * Type (list/1, A2328/0))) =
    Let (209, Effect ([ ], .))
      (@coq_rec, rec, part, [ ],
        [
          (yes, Type (list/1, A2328/0));
          (no, Type (list/1, A2328/0));
          (x, Type (list/1, A2328/0))
        ], Some (Type (list/1, A2328/0) * Type (list/1, A2328/0))) =
      Match
        ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
          [
            (Constructor ([]/1),
              Tuple
                ((210, Effect ([ ], .)),
                  Apply
                    ((210, Effect ([ ], .)),
                      Variable
                        ((210,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .)),
                          rev/0),
                      [
                        Variable
                          ((210,
                            Effect
                              ([
                              ],
                                .)),
                            yes/0)
                      ]),
                  Apply
                    ((210, Effect ([ ], .)),
                      Variable
                        ((210,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .)),
                          rev/0),
                      [
                        Variable
                          ((210,
                            Effect
                              ([
                              ],
                                .)),
                            no/0)
                      ])));
            (Constructor (cons/1, x, l),
              IfThenElse
                ((211, Effect ([ ], .)),
                  Apply
                    ((211, Effect ([ ], .)),
                      Variable
                        ((211,
                          Effect
                            ([
                            ],
                              .)),
                          p/0),
                      [
                        Variable
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            x/0)
                      ]),
                  Apply
                    ((211, Effect ([ ], .)),
                      Variable
                        ((211,
                          Effect
                            ([
                            ],
                              .)),
                          part/0),
                      [
                        Constructor
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((211,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0),
                            Variable
                              ((211,
                                Effect
                                  ([
                                  ],
                                    .)),
                                yes/0));
                        Variable
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            no/0);
                        Variable
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ]),
                  Apply
                    ((211, Effect ([ ], .)),
                      Variable
                        ((211,
                          Effect
                            ([
                            ],
                              .)),
                          part/0),
                      [
                        Variable
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            yes/0);
                        Constructor
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((211,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0),
                            Variable
                              ((211,
                                Effect
                                  ([
                                  ],
                                    .)),
                                no/0));
                        Variable
                          ((211,
                            Effect
                              ([
                              ],
                                .)),
                            l/0)
                      ])))
          ]) in
    Apply
      ((213, Effect ([ ], .)), Variable ((213, Effect ([ ], .)), part/0),
        [
          Constructor ((213, Effect ([ ], .)), []/1);
          Constructor ((213, Effect ([ ], .)), []/1);
          Variable ((213, Effect ([ ], .)), l/0)
        ]))

215
(.,
  Value
    (@coq_rec, rec, split, [ A2410; A2412 ],
      [ (x, Type (list/1, (A2410/0 * A2412/0))) ],
      Some (Type (list/1, A2410/0) * Type (list/1, A2412/0))) =
    Match
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x/0),
        [
          (Constructor ([]/1),
            Tuple
              ((216, Effect ([ ], .)),
                Constructor ((216, Effect ([ ], .)), []/1),
                Constructor ((216, Effect ([ ], .)), []/1)));
          (Constructor (cons/1, Tuple (x, y), l),
            Match
              ((218, Effect ([ ], .)),
                Apply
                  ((218, Effect ([ ], .)),
                    Variable
                      ((218, Effect ([ ], .)),
                        split/0),
                    [
                      Variable
                        ((218,
                          Effect
                            ([
                            ],
                              .)),
                          l/0)
                    ]),
                [
                  (Tuple (rx, ry),
                    Tuple
                      ((218,
                        Effect
                          ([
                          ],
                            .)),
                        Constructor
                          ((218,
                            Effect
                              ([
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((218,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0),
                            Variable
                              ((218,
                                Effect
                                  ([
                                  ],
                                    .)),
                                rx/0)),
                        Constructor
                          ((218,
                            Effect
                              ([
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((218,
                                Effect
                                  ([
                                  ],
                                    .)),
                                y/0),
                            Variable
                              ((218,
                                Effect
                                  ([
                                  ],
                                    .)),
                                ry/0))))
                ]))
        ]))

221
(. -> . -[ OCaml.Invalid_argument/1 ]-> .,
  Value
    (@coq_rec, rec, combine, [ A2493; A2494 ],
      [ (l1, Type (list/1, A2493/0)); (l2, Type (list/1, A2494/0)) ],
      Some Type (list/1, (A2493/0 * A2494/0))) =
    Match
      ((222, Effect ([ OCaml.Invalid_argument/1 ], .)),
        Tuple
          ((222, Effect ([ ], .)), Variable ((222, Effect ([ ], .)), l1/0),
            Variable ((222, Effect ([ ], .)), l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Constructor ((223, Effect ([ ], .)), []/1));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Constructor
              ((224, Effect ([ OCaml.Invalid_argument/1 ], .)),
                cons/1,
                Tuple
                  ((224, Effect ([ ], .)),
                    Variable
                      ((224, Effect ([ ], .)),
                        a1/0),
                    Variable
                      ((224, Effect ([ ], .)),
                        a2/0)),
                Apply
                  ((224,
                    Effect
                      ([
                        OCaml.Invalid_argument/1
                      ], .)),
                    Variable
                      ((224,
                        Effect
                          ([ ],
                            .
                              ->
                              .
                                -[
                                  OCaml.Invalid_argument/1
                                ]->
                                .)),
                        combine/0),
                    [
                      Variable
                        ((224,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0);
                      Variable
                        ((224,
                          Effect
                            ([
                            ],
                              .)),
                          l2/0)
                    ])));
          (Tuple (Any, Any),
            Apply
              ((225, Effect ([ OCaml.Invalid_argument/1 ], .)),
                Variable
                  ((225,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Invalid_argument/1
                          ]-> .)),
                    OCaml.Pervasives.invalid_arg/1),
                [
                  Constant
                    ((225,
                      Effect
                        ([
                        ],
                          .)),
                      String("List.combine"))
                ]))
        ]))

230
(. -> . -> . -> . -[ NonTermination/1 ]-> .,
  Value
    (@., rec, merge_rec, [ A2583 ],
      [
        (counter, Type (nat/1));
        (cmp, (A2583/0 -> (A2583/0 -> Type (Z/1))));
        (l1, Type (list/1, A2583/0));
        (l2, Type (list/1, A2583/0))
      ], Some Type (list/1, A2583/0)) =
    Match
      ((?, Effect ([ NonTermination/1 ], .)),
        Variable ((?, Effect ([ ], .)), counter/0),
        [
          (Constructor (O/1),
            Apply
              ((?, Effect ([ NonTermination/1 ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            NonTermination/1
                          ]-> .)),
                    not_terminated/1),
                [ Tuple ((?, Effect ([ ], .))) ]));
          (Constructor (S/1, counter),
            Match
              ((231, Effect ([ NonTermination/1 ], .)),
                Tuple
                  ((231, Effect ([ ], .)),
                    Variable
                      ((231, Effect ([ ], .)),
                        l1/0),
                    Variable
                      ((231, Effect ([ ], .)),
                        l2/0)),
                [
                  (Tuple (Constructor ([]/1), l2),
                    Variable
                      ((232,
                        Effect
                          ([
                          ],
                            .)),
                        l2/0));
                  (Tuple (l1, Constructor ([]/1)),
                    Variable
                      ((233,
                        Effect
                          ([
                          ],
                            .)),
                        l1/0));
                  (Tuple
                    (Constructor
                      (cons/1,
                        h1,
                        t1),
                      Constructor
                        (cons/1,
                          h2,
                          t2)),
                    IfThenElse
                      ((235,
                        Effect
                          ([
                            NonTermination/1
                          ],
                            .)),
                        Apply
                          ((235,
                            Effect
                              ([
                              ],
                                .)),
                            Variable
                              ((235,
                                Effect
                                  ([
                                  ],
                                    .)),
                                OCaml.Pervasives.le/0),
                            [
                              Apply
                                ((235,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((235,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      cmp/0),
                                  [
                                    Variable
                                      ((235,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        h1/0);
                                    Variable
                                      ((235,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        h2/0)
                                  ]);
                              Constant
                                ((235,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Int(0))
                            ]),
                        Constructor
                          ((236,
                            Effect
                              ([
                                NonTermination/1
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((236,
                                Effect
                                  ([
                                  ],
                                    .)),
                                h1/0),
                            Apply
                              ((236,
                                Effect
                                  ([
                                    NonTermination/1
                                  ],
                                    .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            ->
                                            .
                                              -[
                                                NonTermination/1
                                              ]->
                                              .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                ->
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      NonTermination/1
                                                    ]->
                                                    .)),
                                        merge_rec/0),
                                    [
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    ((236,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      cmp/0);
                                  Variable
                                    ((236,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      t1/0);
                                  Variable
                                    ((236,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      l2/0)
                                ])),
                        Constructor
                          ((237,
                            Effect
                              ([
                                NonTermination/1
                              ],
                                .)),
                            cons/1,
                            Variable
                              ((237,
                                Effect
                                  ([
                                  ],
                                    .)),
                                h2/0),
                            Apply
                              ((237,
                                Effect
                                  ([
                                    NonTermination/1
                                  ],
                                    .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            ->
                                            .
                                              -[
                                                NonTermination/1
                                              ]->
                                              .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                ->
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      NonTermination/1
                                                    ]->
                                                    .)),
                                        merge_rec/0),
                                    [
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    ((237,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      cmp/0);
                                  Variable
                                    ((237,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      l1/0);
                                  Variable
                                    ((237,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      t2/0)
                                ]))))
                ]))
        ]))

230
(. -> . -> . -[ Counter/1; NonTermination/1 ]-> .,
  Value
    (@., non_rec, merge, [ A2583 ],
      [
        (cmp, (A2583/0 -> (A2583/0 -> Type (Z/1))));
        (l1, Type (list/1, A2583/0));
        (l2, Type (list/1, A2583/0))
      ], Some Type (list/1, A2583/0)) =
    Apply
      ((?, Effect ([ Counter/1; NonTermination/1 ], .)),
        Variable
          ((?, Effect ([ ], . -> . -> . -> . -[ NonTermination/1 ]-> .)),
            merge_rec/0),
        [
          Apply
            ((?, Effect ([ Counter/1 ], .)),
              Variable
                ((?, Effect ([ ], . -[ Counter/1 ]-> .)),
                  read_counter/1),
              [ Tuple ((?, Effect ([ ], .))) ]);
          Variable ((?, Effect ([ ], .)), cmp/0);
          Variable ((?, Effect ([ ], .)), l1/0);
          Variable ((?, Effect ([ ], .)), l2/0)
        ]))

239
(. -> . -[ OCaml.Assert_failure/1 ]-> .,
  Value
    (@coq_rec, rec, chop, [ A2642 ],
      [ (k, Type (Z/1)); (l, Type (list/1, A2642/0)) ],
      Some Type (list/1, A2642/0)) =
    IfThenElse
      ((240, Effect ([ OCaml.Assert_failure/1 ], .)),
        Apply
          ((240, Effect ([ ], .)),
            Variable ((240, Effect ([ ], .)), equiv_decb/0),
            [
              Variable ((240, Effect ([ ], .)), k/0);
              Constant ((240, Effect ([ ], .)), Int(0))
            ]), Variable ((240, Effect ([ ], .)), l/0),
        Match
          ((240, Effect ([ OCaml.Assert_failure/1 ], .)),
            Variable ((241, Effect ([ ], .)), l/0),
            [
              (Constructor (cons/1, x, t),
                Apply
                  ((242,
                    Effect
                      ([
                        OCaml.Assert_failure/1
                      ], .)),
                    Variable
                      ((242,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  OCaml.Assert_failure/1
                                ]->
                                .)),
                        chop/0),
                    [
                      Apply
                        ((242,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((242,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.sub/0),
                          [
                            Variable
                              ((242,
                                Effect
                                  ([
                                  ],
                                    .)),
                                k/0);
                            Constant
                              ((242,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(1))
                          ]);
                      Variable
                        ((242,
                          Effect
                            ([
                            ],
                              .)),
                          t/0)
                    ]));
              (Any,
                Apply
                  ((243,
                    Effect
                      ([
                        OCaml.Assert_failure/1
                      ], .)),
                    Variable
                      ((243,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Assert_failure/1
                              ]->
                              .)),
                        OCaml.assert/1),
                    [
                      Constructor
                        ((243,
                          Effect
                            ([
                            ],
                              .)),
                          false/1)
                    ]))
            ])))
