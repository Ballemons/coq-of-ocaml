(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Inductive pre_foo : Set :=
| Cfoo : int -> bar -> pre_foo

with bar : Set :=
| Cbar : bar.

Definition foo_wf (f : pre_foo) (b : Set) :=
   match f with
   | Cfoo _ _ => b = bar
   end.

Definition foo (b : Set) := { f | foo_wf f b }.


Inductive pre_foo2 : Set :=
| Cfoo2 : int -> pre_foo2.

Definition foo2_wf (f : pre_foo2) (b : Set) :=
   match f with
   | Cfoo2 _ => b = string
   end.

Definition foo2 (b : Set) := { f | foo2_wf f b }.

Inductive printable : Set :=
| Printable : forall {a : Set}, a -> (a -> string) -> printable.

Definition printable_to_string (x : printable) : string :=
  let 'Printable value print := x in
  let 'existT _ __Printable_'a [value, print] :=
    existT (A := Set)
      (fun __Printable_'a => [__Printable_'a ** __Printable_'a -> string]) _
      [value, print] in
  print value.
