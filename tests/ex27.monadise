16
((),
  Value
    (@coq_rec, rec, length_aux, [ A ],
      [ (len, Type (Z/1)); (x, Type (list/1, A)) ], Some Type (Z/1)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Variable (17, len/0));
          (Constructor (cons/1, a, l),
            Apply
              (18, Variable (18, length_aux/0),
                [
                  Apply
                    (18,
                      Variable
                        (18,
                          Z.add/0),
                      [
                        Variable
                          (18,
                            len/0);
                        Constant
                          (18,
                            Int(1))
                      ]);
                  Variable (18, l/0)
                ]))
        ]))

21
((),
  Value (@., non_rec, length, [ A ], [ (l, Type (list/1, A)) ], Some Type (Z/1))
    =
    Apply
      (21, Variable (21, length_aux/0),
        [ Constant (21, Int(0)); Variable (21, l/0) ]))

23
((),
  Value
    (@., non_rec, hd, [ A ], [ (x, Type (list/1, A)) ],
      Some Monad ([ OCaml.Failure/1 ], A)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1),
            Apply
              (24, Variable (24, OCaml.Pervasives.failwith/1),
                [ Constant (24, String("hd")) ]));
          (Constructor (cons/1, a, l), Return (?, Variable (25, a/0)))
        ]))

27
((),
  Value
    (@., non_rec, tl, [ A ], [ (x, Type (list/1, A)) ],
      Some Monad ([ OCaml.Failure/1 ], Type (list/1, A))) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1),
            Apply
              (28, Variable (28, OCaml.Pervasives.failwith/1),
                [ Constant (28, String("tl")) ]));
          (Constructor (cons/1, a, l), Return (?, Variable (29, l/0)))
        ]))

31
((),
  Value
    (@., non_rec, nth, [ A ], [ (l, Type (list/1, A)); (n, Type (Z/1)) ],
      Some Monad ([ OCaml.Failure/1; OCaml.Invalid_argument/1 ], A)) =
    IfThenElse
      (32,
        Apply
          (32, Variable (32, OCaml.Pervasives.lt/0),
            [ Variable (32, n/0); Constant (32, Int(0)) ]),
        Lift
          (?, [ OCaml.Invalid_argument/1 ],
            [ OCaml.Failure/1; OCaml.Invalid_argument/1 ],
            Apply
              (32, Variable (32, OCaml.Pervasives.invalid_arg/1),
                [ Constant (32, String("List.nth")) ])),
        Lift
          (?, [ OCaml.Failure/1 ],
            [ OCaml.Failure/1; OCaml.Invalid_argument/1 ],
            Let 33
              (@coq_rec, rec, nth_aux, [ A ],
                [ (l, Type (list/1, A)); (n, Type (Z/1)) ],
                Some Monad ([ OCaml.Failure/1 ], A)) =
              Match
                (34, Variable (34, l/0),
                  [
                    (Constructor ([]/1),
                      Apply
                        (35,
                          Variable
                            (35,
                              OCaml.Pervasives.failwith/1),
                          [
                            Constant
                              (35,
                                String("nth"))
                          ]));
                    (Constructor (cons/1, a, l),
                      IfThenElse
                        (36,
                          Apply
                            (36,
                              Variable
                                (36,
                                  equiv_decb/0),
                              [
                                Variable
                                  (36,
                                    n/0);
                                Constant
                                  (36,
                                    Int(0))
                              ]),
                          Return
                            (?,
                              Variable
                                (36,
                                  a/0)),
                          Apply
                            (36,
                              Variable
                                (36,
                                  nth_aux/0),
                              [
                                Variable
                                  (36,
                                    l/0);
                                Apply
                                  (36,
                                    Variable
                                      (36,
                                        Z.sub/0),
                                    [
                                      Variable
                                        (36,
                                          n/0);
                                      Constant
                                        (36,
                                          Int(1))
                                    ])
                              ])))
                  ]) in
            Apply
              (38, Variable (38, nth_aux/0),
                [ Variable (38, l/0); Variable (38, n/0) ]))))

40
((),
  Value
    (@., non_rec, append, [ A ], [ ],
      Some (Type (list/1, A) -> (Type (list/1, A) -> Type (list/1, A)))) =
    Variable (40, OCaml.Pervasives.app/0))

42
((),
  Value
    (@coq_rec, rec, rev_append, [ A ],
      [ (l1, Type (list/1, A)); (l2, Type (list/1, A)) ], Some Type (list/1, A))
    =
    Match
      (43, Variable (43, l1/0),
        [
          (Constructor ([]/1), Variable (44, l2/0));
          (Constructor (cons/1, a, l),
            Apply
              (45, Variable (45, rev_append/0),
                [
                  Variable (45, l/0);
                  Constructor
                    (45,
                      cons/1,
                      Variable
                        (45,
                          a/0),
                      Variable
                        (45,
                          l2/0))
                ]))
        ]))

48
((),
  Value
    (@., non_rec, rev, [ A ], [ (l, Type (list/1, A)) ], Some Type (list/1, A))
    =
    Apply
      (48, Variable (48, rev_append/0),
        [ Variable (48, l/0); Constructor (48, []/1) ]))

50
((),
  Value
    (@coq_rec, rec, flatten, [ A ], [ (x, Type (list/1, Type (list/1, A))) ],
      Some Type (list/1, A)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (51, []/1));
          (Constructor (cons/1, l, r),
            Apply
              (52, Variable (52, OCaml.Pervasives.app/0),
                [
                  Variable (52, l/0);
                  Apply
                    (52,
                      Variable
                        (52,
                          flatten/0),
                      [
                        Variable
                          (52,
                            r/0)
                      ])
                ]))
        ]))

55
((),
  Value
    (@., non_rec, concat, [ A ], [ ],
      Some (Type (list/1, Type (list/1, A)) -> Type (list/1, A))) =
    Variable (55, flatten/0))

57
((),
  Value
    (@coq_rec, rec, map, [ A; B ], [ (f, (A -> B)); (x, Type (list/1, A)) ],
      Some Type (list/1, B)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (58, []/1));
          (Constructor (cons/1, a, l),
            Let ? (@., non_rec, r, [ ], [ ], None) =
              Apply (59, Variable (59, f/0), [ Variable (59, a/0) ])
              in
            Constructor
              (59, cons/1, Variable (59, r/0),
                Apply
                  (59, Variable (59, map/0),
                    [
                      Variable (59, f/0);
                      Variable (59, l/0)
                    ])))
        ]))

62
((),
  Value
    (@coq_rec, rec, mapi_aux, [ A; B ],
      [ (i, Type (Z/1)); (f, (Type (Z/1) -> (B -> A))); (x, Type (list/1, B)) ],
      Some Type (list/1, A)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (63, []/1));
          (Constructor (cons/1, a, l),
            Let ? (@., non_rec, r, [ ], [ ], None) =
              Apply
                (64, Variable (64, f/0),
                  [
                    Variable (64, i/0);
                    Variable (64, a/0)
                  ]) in
            Constructor
              (64, cons/1, Variable (64, r/0),
                Apply
                  (64, Variable (64, mapi_aux/0),
                    [
                      Apply
                        (64,
                          Variable
                            (64,
                              Z.add/0),
                          [
                            Variable
                              (64,
                                i/0);
                            Constant
                              (64,
                                Int(1))
                          ]);
                      Variable (64, f/0);
                      Variable (64, l/0)
                    ])))
        ]))

67
((),
  Value
    (@., non_rec, mapi, [ A; B ],
      [ (f, (Type (Z/1) -> (B -> A))); (l, Type (list/1, B)) ],
      Some Type (list/1, A)) =
    Apply
      (67, Variable (67, mapi_aux/0),
        [ Constant (67, Int(0)); Variable (67, f/0); Variable (67, l/0) ]))

76
((),
  Value
    (@coq_rec, rec, iter, [ A; B ], [ (f, (B -> A)); (x, Type (list/1, B)) ],
      Some Type (unit/1)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (77, tt/1));
          (Constructor (cons/1, a, l),
            Apply
              (78, Variable (78, iter/0),
                [ Variable (78, f/0); Variable (78, l/0) ]))
        ]))

81
((),
  Value
    (@coq_rec, rec, iteri_aux, [ A; B ],
      [ (i, Type (Z/1)); (f, (Type (Z/1) -> (B -> A))); (x, Type (list/1, B)) ],
      Some Type (unit/1)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (82, tt/1));
          (Constructor (cons/1, a, l),
            Apply
              (83, Variable (83, iteri_aux/0),
                [
                  Apply
                    (83,
                      Variable
                        (83,
                          Z.add/0),
                      [
                        Variable
                          (83,
                            i/0);
                        Constant
                          (83,
                            Int(1))
                      ]);
                  Variable (83, f/0);
                  Variable (83, l/0)
                ]))
        ]))

86
((),
  Value
    (@., non_rec, iteri, [ A; B ],
      [ (f, (Type (Z/1) -> (A -> B))); (l, Type (list/1, A)) ],
      Some Type (unit/1)) =
    Apply
      (86, Variable (86, iteri_aux/0),
        [ Constant (86, Int(0)); Variable (86, f/0); Variable (86, l/0) ]))

88
((),
  Value
    (@coq_rec, rec, fold_left, [ A; B ],
      [ (f, (A -> (B -> A))); (accu, A); (l, Type (list/1, B)) ], Some A) =
    Match
      (89, Variable (89, l/0),
        [
          (Constructor ([]/1), Variable (90, accu/0));
          (Constructor (cons/1, a, l),
            Apply
              (91, Variable (91, fold_left/0),
                [
                  Variable (91, f/0);
                  Apply
                    (91,
                      Variable
                        (91,
                          f/0),
                      [
                        Variable
                          (91,
                            accu/0);
                        Variable
                          (91,
                            a/0)
                      ]);
                  Variable (91, l/0)
                ]))
        ]))

94
((),
  Value
    (@coq_rec, rec, fold_right, [ A; B ],
      [ (f, (A -> (B -> B))); (l, Type (list/1, A)); (accu, B) ], Some B) =
    Match
      (95, Variable (95, l/0),
        [
          (Constructor ([]/1), Variable (96, accu/0));
          (Constructor (cons/1, a, l),
            Apply
              (97, Variable (97, f/0),
                [
                  Variable (97, a/0);
                  Apply
                    (97,
                      Variable
                        (97,
                          fold_right/0),
                      [
                        Variable
                          (97,
                            f/0);
                        Variable
                          (97,
                            l/0);
                        Variable
                          (97,
                            accu/0)
                      ])
                ]))
        ]))

100
((),
  Value
    (@coq_rec, rec, map2, [ A; B; C ],
      [ (f, (B -> (C -> A))); (l1, Type (list/1, B)); (l2, Type (list/1, C)) ],
      Some Monad ([ OCaml.Invalid_argument/1 ], Type (list/1, A))) =
    Match
      (101, Tuple (101, Variable (101, l1/0), Variable (101, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Constructor (102, []/1)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Let ? (@., non_rec, r, [ ], [ ], None) =
              Apply
                (103, Variable (103, f/0),
                  [
                    Variable (103, a1/0);
                    Variable (103, a2/0)
                  ]) in
            Bind
              (?,
                Apply
                  (103, Variable (103, map2/0),
                    [
                      Variable (103, f/0);
                      Variable (103, l1/0);
                      Variable (103, l2/0)
                    ]), Some x,
                Return
                  (?,
                    Constructor
                      (103, cons/1,
                        Variable
                          (103,
                            r/0),
                        Variable
                          (?,
                            x/0)))));
          (Tuple (Any, Any),
            Apply
              (104, Variable (104, OCaml.Pervasives.invalid_arg/1),
                [ Constant (104, String("List.map2")) ]))
        ]))

116
((),
  Value
    (@coq_rec, rec, iter2, [ A; B; C ],
      [ (f, (B -> (C -> A))); (l1, Type (list/1, B)); (l2, Type (list/1, C)) ],
      Some Monad ([ OCaml.Invalid_argument/1 ], Type (unit/1))) =
    Match
      (117, Tuple (117, Variable (117, l1/0), Variable (117, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Constructor (118, tt/1)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              (119, Variable (119, iter2/0),
                [
                  Variable (119, f/0);
                  Variable (119, l1/0);
                  Variable (119, l2/0)
                ]));
          (Tuple (Any, Any),
            Apply
              (120, Variable (120, OCaml.Pervasives.invalid_arg/1),
                [ Constant (120, String("List.iter2")) ]))
        ]))

123
((),
  Value
    (@coq_rec, rec, fold_left2, [ A; B; C ],
      [
        (f, (A -> (B -> (C -> A))));
        (accu, A);
        (l1, Type (list/1, B));
        (l2, Type (list/1, C))
      ], Some Monad ([ OCaml.Invalid_argument/1 ], A)) =
    Match
      (124, Tuple (124, Variable (124, l1/0), Variable (124, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Variable (125, accu/0)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Apply
              (126, Variable (126, fold_left2/0),
                [
                  Variable (126, f/0);
                  Apply
                    (126,
                      Variable
                        (126,
                          f/0),
                      [
                        Variable
                          (126,
                            accu/0);
                        Variable
                          (126,
                            a1/0);
                        Variable
                          (126,
                            a2/0)
                      ]);
                  Variable (126, l1/0);
                  Variable (126, l2/0)
                ]));
          (Tuple (Any, Any),
            Apply
              (127, Variable (127, OCaml.Pervasives.invalid_arg/1),
                [ Constant (127, String("List.fold_left2")) ]))
        ]))

130
((),
  Value
    (@coq_rec, rec, fold_right2, [ A; B; C ],
      [
        (f, (A -> (B -> (C -> C))));
        (l1, Type (list/1, A));
        (l2, Type (list/1, B));
        (accu, C)
      ], Some Monad ([ OCaml.Invalid_argument/1 ], C)) =
    Match
      (131, Tuple (131, Variable (131, l1/0), Variable (131, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Variable (132, accu/0)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Bind
              (?,
                Apply
                  (133, Variable (133, fold_right2/0),
                    [
                      Variable (133, f/0);
                      Variable (133, l1/0);
                      Variable (133, l2/0);
                      Variable (133, accu/0)
                    ]), Some x,
                Return
                  (?,
                    Apply
                      (133,
                        Variable
                          (133,
                            f/0),
                        [
                          Variable
                            (133,
                              a1/0);
                          Variable
                            (133,
                              a2/0);
                          Variable
                            (?,
                              x/0)
                        ]))));
          (Tuple (Any, Any),
            Apply
              (134, Variable (134, OCaml.Pervasives.invalid_arg/1),
                [ Constant (134, String("List.fold_right2")) ]))
        ]))

137
((),
  Value
    (@coq_rec, rec, for_all, [ A ],
      [ (p, (A -> Type (bool/1))); (x, Type (list/1, A)) ], Some Type (bool/1))
    =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (138, true/1));
          (Constructor (cons/1, a, l),
            Apply
              (139, Variable (139, andb/0),
                [
                  Apply
                    (139,
                      Variable
                        (139,
                          p/0),
                      [
                        Variable
                          (139,
                            a/0)
                      ]);
                  Apply
                    (139,
                      Variable
                        (139,
                          for_all/0),
                      [
                        Variable
                          (139,
                            p/0);
                        Variable
                          (139,
                            l/0)
                      ])
                ]))
        ]))

142
((),
  Value
    (@coq_rec, rec, _exists, [ A ],
      [ (p, (A -> Type (bool/1))); (x, Type (list/1, A)) ], Some Type (bool/1))
    =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1), Constructor (143, false/1));
          (Constructor (cons/1, a, l),
            Apply
              (144, Variable (144, orb/0),
                [
                  Apply
                    (144,
                      Variable
                        (144,
                          p/0),
                      [
                        Variable
                          (144,
                            a/0)
                      ]);
                  Apply
                    (144,
                      Variable
                        (144,
                          _exists/0),
                      [
                        Variable
                          (144,
                            p/0);
                        Variable
                          (144,
                            l/0)
                      ])
                ]))
        ]))

147
((),
  Value
    (@coq_rec, rec, for_all2, [ A; B ],
      [
        (p, (A -> (B -> Type (bool/1))));
        (l1, Type (list/1, A));
        (l2, Type (list/1, B))
      ], Some Monad ([ OCaml.Invalid_argument/1 ], Type (bool/1))) =
    Match
      (148, Tuple (148, Variable (148, l1/0), Variable (148, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Constructor (149, true/1)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Bind
              (?,
                Apply
                  (150, Variable (150, for_all2/0),
                    [
                      Variable (150, p/0);
                      Variable (150, l1/0);
                      Variable (150, l2/0)
                    ]), Some x,
                Return
                  (?,
                    Apply
                      (150,
                        Variable
                          (150,
                            andb/0),
                        [
                          Apply
                            (150,
                              Variable
                                (150,
                                  p/0),
                              [
                                Variable
                                  (150,
                                    a1/0);
                                Variable
                                  (150,
                                    a2/0)
                              ]);
                          Variable
                            (?,
                              x/0)
                        ]))));
          (Tuple (Any, Any),
            Apply
              (151, Variable (151, OCaml.Pervasives.invalid_arg/1),
                [ Constant (151, String("List.for_all2")) ]))
        ]))

154
((),
  Value
    (@coq_rec, rec, _exists2, [ A; B ],
      [
        (p, (A -> (B -> Type (bool/1))));
        (l1, Type (list/1, A));
        (l2, Type (list/1, B))
      ], Some Monad ([ OCaml.Invalid_argument/1 ], Type (bool/1))) =
    Match
      (155, Tuple (155, Variable (155, l1/0), Variable (155, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Constructor (156, false/1)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Bind
              (?,
                Apply
                  (157, Variable (157, _exists2/0),
                    [
                      Variable (157, p/0);
                      Variable (157, l1/0);
                      Variable (157, l2/0)
                    ]), Some x,
                Return
                  (?,
                    Apply
                      (157,
                        Variable
                          (157,
                            orb/0),
                        [
                          Apply
                            (157,
                              Variable
                                (157,
                                  p/0),
                              [
                                Variable
                                  (157,
                                    a1/0);
                                Variable
                                  (157,
                                    a2/0)
                              ]);
                          Variable
                            (?,
                              x/0)
                        ]))));
          (Tuple (Any, Any),
            Apply
              (158, Variable (158, OCaml.Pervasives.invalid_arg/1),
                [ Constant (158, String("List.exists2")) ]))
        ]))

194
((),
  Value
    (@coq_rec, rec, find, [ A ],
      [ (p, (A -> Type (bool/1))); (x, Type (list/1, A)) ],
      Some Monad ([ OCaml.Not_found/1 ], A)) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1),
            Apply
              (195, Variable (195, OCaml.raise_Not_found/1),
                [ Tuple (?) ]));
          (Constructor (cons/1, x, l),
            IfThenElse
              (196,
                Apply
                  (196, Variable (196, p/0),
                    [ Variable (196, x/0) ]),
                Return (?, Variable (196, x/0)),
                Apply
                  (196, Variable (196, find/0),
                    [
                      Variable (196, p/0);
                      Variable (196, l/0)
                    ])))
        ]))

213
((),
  Value
    (@coq_rec, rec, split, [ A; B ], [ (x, Type (list/1, (A * B))) ],
      Some (Type (list/1, A) * Type (list/1, B))) =
    Match
      (?, Variable (?, x/0),
        [
          (Constructor ([]/1),
            Tuple (214, Constructor (214, []/1), Constructor (214, []/1)));
          (Constructor (cons/1, Tuple (x, y), l),
            Match
              (216,
                Apply
                  (216, Variable (216, split/0),
                    [ Variable (216, l/0) ]),
                [
                  (Tuple (rx, ry),
                    Tuple
                      (216,
                        Constructor
                          (216,
                            cons/1,
                            Variable
                              (216,
                                x/0),
                            Variable
                              (216,
                                rx/0)),
                        Constructor
                          (216,
                            cons/1,
                            Variable
                              (216,
                                y/0),
                            Variable
                              (216,
                                ry/0))))
                ]))
        ]))

219
((),
  Value
    (@coq_rec, rec, combine, [ A; B ],
      [ (l1, Type (list/1, A)); (l2, Type (list/1, B)) ],
      Some Monad ([ OCaml.Invalid_argument/1 ], Type (list/1, (A * B)))) =
    Match
      (220, Tuple (220, Variable (220, l1/0), Variable (220, l2/0)),
        [
          (Tuple (Constructor ([]/1), Constructor ([]/1)),
            Return (?, Constructor (221, []/1)));
          (Tuple (Constructor (cons/1, a1, l1), Constructor (cons/1, a2, l2)),
            Bind
              (?,
                Apply
                  (222, Variable (222, combine/0),
                    [
                      Variable (222, l1/0);
                      Variable (222, l2/0)
                    ]), Some x,
                Return
                  (?,
                    Constructor
                      (222, cons/1,
                        Tuple
                          (222,
                            Variable
                              (222,
                                a1/0),
                            Variable
                              (222,
                                a2/0)),
                        Variable
                          (?,
                            x/0)))));
          (Tuple (Any, Any),
            Apply
              (223, Variable (223, OCaml.Pervasives.invalid_arg/1),
                [ Constant (223, String("List.combine")) ]))
        ]))

228
((),
  Value
    (@., rec, merge_rec, [ A ],
      [
        (counter, Type (nat/1));
        (cmp, (A -> (A -> Type (Z/1))));
        (l1, Type (list/1, A));
        (l2, Type (list/1, A))
      ], Some Monad ([ NonTermination/1 ], Type (list/1, A))) =
    Match
      (?, Variable (?, counter/0),
        [
          (Constructor (O/1),
            Apply (?, Variable (?, not_terminated/1), [ Tuple (?) ]));
          (Constructor (S/1, counter),
            Match
              (229,
                Tuple
                  (229, Variable (229, l1/0),
                    Variable (229, l2/0)),
                [
                  (Tuple (Constructor ([]/1), l2),
                    Return
                      (?,
                        Variable
                          (230,
                            l2/0)));
                  (Tuple (l1, Constructor ([]/1)),
                    Return
                      (?,
                        Variable
                          (231,
                            l1/0)));
                  (Tuple
                    (Constructor
                      (cons/1,
                        h1,
                        t1),
                      Constructor
                        (cons/1,
                          h2,
                          t2)),
                    IfThenElse
                      (233,
                        Apply
                          (233,
                            Variable
                              (233,
                                OCaml.Pervasives.le/0),
                            [
                              Apply
                                (233,
                                  Variable
                                    (233,
                                      cmp/0),
                                  [
                                    Variable
                                      (233,
                                        h1/0);
                                    Variable
                                      (233,
                                        h2/0)
                                  ]);
                              Constant
                                (233,
                                  Int(0))
                            ]),
                        Bind
                          (?,
                            Apply
                              (234,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        merge_rec/0),
                                    [
                                      Variable
                                        (?,
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    (234,
                                      cmp/0);
                                  Variable
                                    (234,
                                      t1/0);
                                  Variable
                                    (234,
                                      l2/0)
                                ]),
                            Some
                              x,
                            Return
                              (?,
                                Constructor
                                  (234,
                                    cons/1,
                                    Variable
                                      (234,
                                        h1/0),
                                    Variable
                                      (?,
                                        x/0)))),
                        Bind
                          (?,
                            Apply
                              (235,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        merge_rec/0),
                                    [
                                      Variable
                                        (?,
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    (235,
                                      cmp/0);
                                  Variable
                                    (235,
                                      l1/0);
                                  Variable
                                    (235,
                                      t2/0)
                                ]),
                            Some
                              x,
                            Return
                              (?,
                                Constructor
                                  (235,
                                    cons/1,
                                    Variable
                                      (235,
                                        h2/0),
                                    Variable
                                      (?,
                                        x/0))))))
                ]))
        ]))

228
((),
  Value
    (@., non_rec, merge, [ A ],
      [
        (cmp, (A -> (A -> Type (Z/1))));
        (l1, Type (list/1, A));
        (l2, Type (list/1, A))
      ], Some Monad ([ Counter/1; NonTermination/1 ], Type (list/1, A))) =
    Bind
      (?,
        Lift
          (?, [ Counter/1 ], [ Counter/1; NonTermination/1 ],
            Apply (?, Variable (?, read_counter/1), [ Tuple (?) ])), Some x,
        Lift
          (?, [ NonTermination/1 ], [ Counter/1; NonTermination/1 ],
            Apply
              (?, Variable (?, merge_rec/0),
                [
                  Variable (?, x/0);
                  Variable (?, cmp/0);
                  Variable (?, l1/0);
                  Variable (?, l2/0)
                ]))))

237
((),
  Value
    (@coq_rec, rec, chop, [ A ], [ (k, Type (Z/1)); (l, Type (list/1, A)) ],
      Some Monad ([ OCaml.Assert_failure/1 ], Type (list/1, A))) =
    IfThenElse
      (238,
        Apply
          (238, Variable (238, equiv_decb/0),
            [ Variable (238, k/0); Constant (238, Int(0)) ]),
        Return (?, Variable (238, l/0)),
        Match
          (238, Variable (239, l/0),
            [
              (Constructor (cons/1, x, t),
                Apply
                  (240, Variable (240, chop/0),
                    [
                      Apply
                        (240,
                          Variable
                            (240,
                              Z.sub/0),
                          [
                            Variable
                              (240,
                                k/0);
                            Constant
                              (240,
                                Int(1))
                          ]);
                      Variable
                        (240,
                          t/0)
                    ]));
              (Any,
                Apply
                  (241, Variable (241, OCaml.assert/1),
                    [ Constructor (241, false/1) ]))
            ])))
