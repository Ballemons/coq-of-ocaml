3
(.,
  Value (non_rec, l1, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Constructor ((3, Effect ([ ], .)), []/1))

4
(.,
  Value (non_rec, l2, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Constructor
      ((4, Effect ([ ], .)), cons/1, Constant ((4, Effect ([ ], .)), Int(1)),
        Constructor
          ((4, Effect ([ ], .)), cons/1,
            Constant ((4, Effect ([ ], .)), Int(2)),
            Constructor
              ((4, Effect ([ ], .)), cons/1,
                Constant ((4, Effect ([ ], .)), Int(3)),
                Constructor ((4, Effect ([ ], .)), []/1)))))

6
(.,
  Value (non_rec, s1, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((6, Effect ([ ], .)),
        Variable ((6, Effect ([ ], .)), OCaml.List.length/0),
        [ Variable ((6, Effect ([ ], .)), l1/0) ]))

7
(.,
  Value (non_rec, s2, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((7, Effect ([ ], .)),
        Variable ((7, Effect ([ ], .)), OCaml.List.length/0),
        [ Variable ((7, Effect ([ ], .)), l2/0) ]))

8
(. -[ OCaml.Failure/0 ]-> .,
  Value (non_rec, h, [ A ], [ (x, A) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Failure/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((8, Effect ([ OCaml.Failure/0 ], .)),
                Variable
                  ((8,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/0
                          ]-> .)),
                    OCaml.List.hd/0),
                [ Variable ((8, Effect ([ ], .)), l2/0) ]))
        ]))

9
(. -[ OCaml.Failure/0 ]-> .,
  Value (non_rec, t, [ A ], [ (x, A) ], Some Type (list/1, Type (Z/1))) =
    Match
      ((?, Effect ([ OCaml.Failure/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((9, Effect ([ OCaml.Failure/0 ], .)),
                Variable
                  ((9,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/0
                          ]-> .)),
                    OCaml.List.tl/0),
                [ Variable ((9, Effect ([ ], .)), l2/0) ]))
        ]))

10
(. -[ OCaml.Failure/0; OCaml.Invalid_argument/0 ]-> .,
  Value (non_rec, x, [ A ], [ (x, A) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Failure/0; OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((10,
                Effect
                  ([
                    OCaml.Failure/0;
                    OCaml.Invalid_argument/0
                  ], .)),
                Variable
                  ((10,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[
                              OCaml.Failure/0;
                              OCaml.Invalid_argument/0
                            ]->
                            .)),
                    OCaml.List.nth/0),
                [
                  Variable ((10, Effect ([ ], .)), l2/0);
                  Constant
                    ((10,
                      Effect
                        ([
                        ],
                          .)),
                      Int(1))
                ]))
        ]))

11
(.,
  Value (non_rec, rl, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((11, Effect ([ ], .)), Variable ((11, Effect ([ ], .)), List.rev/0),
        [ Variable ((11, Effect ([ ], .)), l2/0) ]))

12
(.,
  Value (non_rec, ll, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((12, Effect ([ ], .)),
        Variable ((12, Effect ([ ], .)), OCaml.Pervasives.app/0),
        [
          Variable ((12, Effect ([ ], .)), l2/0);
          Variable ((12, Effect ([ ], .)), l2/0)
        ]))

13
(.,
  Value (non_rec, rll, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((13, Effect ([ ], .)),
        Variable ((13, Effect ([ ], .)), List.rev_append/0),
        [
          Variable ((13, Effect ([ ], .)), l2/0);
          Variable ((13, Effect ([ ], .)), l2/0)
        ]))

14
(.,
  Value (non_rec, lc, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((14, Effect ([ ], .)),
        Variable ((14, Effect ([ ], .)), OCaml.List.flatten/0),
        [
          Constructor
            ((14, Effect ([ ], .)), cons/1,
              Variable ((14, Effect ([ ], .)), l1/0),
              Constructor
                ((14, Effect ([ ], .)), cons/1,
                  Variable ((14, Effect ([ ], .)), l2/0),
                  Constructor
                    ((14, Effect ([ ], .)),
                      cons/1,
                      Variable
                        ((14,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0),
                      Constructor
                        ((14,
                          Effect
                            ([
                            ],
                              .)),
                          cons/1,
                          Variable
                            ((14,
                              Effect
                                ([
                                ],
                                  .)),
                              l2/0),
                          Constructor
                            ((14,
                              Effect
                                ([
                                ],
                                  .)),
                              []/1)))))
        ]))

15
(.,
  Value (non_rec, lf, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((15, Effect ([ ], .)),
        Variable ((15, Effect ([ ], .)), OCaml.List.flatten/0),
        [
          Constructor
            ((15, Effect ([ ], .)), cons/1,
              Variable ((15, Effect ([ ], .)), l1/0),
              Constructor
                ((15, Effect ([ ], .)), cons/1,
                  Variable ((15, Effect ([ ], .)), l2/0),
                  Constructor
                    ((15, Effect ([ ], .)),
                      cons/1,
                      Variable
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0),
                      Constructor
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          cons/1,
                          Variable
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              l2/0),
                          Constructor
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              []/1)))))
        ]))
