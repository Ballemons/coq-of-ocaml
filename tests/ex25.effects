3
(.,
  Value (@., non_rec, l1, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Constructor ((3, Effect ([ ], .)), []/1))

4
(.,
  Value (@., non_rec, l2, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Constructor
      ((4, Effect ([ ], .)), cons/1, Constant ((4, Effect ([ ], .)), Int(1)),
        Constructor
          ((4, Effect ([ ], .)), cons/1,
            Constant ((4, Effect ([ ], .)), Int(2)),
            Constructor
              ((4, Effect ([ ], .)), cons/1,
                Constant ((4, Effect ([ ], .)), Int(3)),
                Constructor
                  ((4, Effect ([ ], .)), cons/1,
                    Constant ((4, Effect ([ ], .)), Int(4)),
                    Constructor ((4, Effect ([ ], .)), []/1))))))

5
(.,
  Value
    (@., non_rec, l3, [ ], [ ],
      Some Type (list/1, (Type (Z/1) * Type (string/1)))) =
    Constructor
      ((5, Effect ([ ], .)), cons/1,
        Tuple
          ((5, Effect ([ ], .)), Constant ((5, Effect ([ ], .)), Int(1)),
            Constant ((5, Effect ([ ], .)), String("one"))),
        Constructor
          ((5, Effect ([ ], .)), cons/1,
            Tuple
              ((5, Effect ([ ], .)), Constant ((5, Effect ([ ], .)), Int(2)),
                Constant ((5, Effect ([ ], .)), String("two"))),
            Constructor ((5, Effect ([ ], .)), []/1))))

7
(.,
  Value (@., non_rec, s1, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((7, Effect ([ ], .)),
        Variable ((7, Effect ([ ], .)), OCaml.List.length/0),
        [ Variable ((7, Effect ([ ], .)), l1/0) ]))

8
(.,
  Value (@., non_rec, s2, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((8, Effect ([ ], .)),
        Variable ((8, Effect ([ ], .)), OCaml.List.length/0),
        [ Variable ((8, Effect ([ ], .)), l2/0) ]))

9
(. -[ OCaml.Failure/0 ]-> .,
  Value (@., non_rec, h, [ A1093 ], [ (x, A1093/0) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Failure/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((9, Effect ([ OCaml.Failure/0 ], .)),
                Variable
                  ((9,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/0
                          ]-> .)),
                    OCaml.List.hd/0),
                [ Variable ((9, Effect ([ ], .)), l2/0) ]))
        ]))

10
(. -[ OCaml.Failure/0 ]-> .,
  Value
    (@., non_rec, t, [ A1109 ], [ (x, A1109/0) ], Some Type (list/1, Type (Z/1)))
    =
    Match
      ((?, Effect ([ OCaml.Failure/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((10, Effect ([ OCaml.Failure/0 ], .)),
                Variable
                  ((10,
                    Effect
                      ([ ],
                        .
                          -[
                            OCaml.Failure/0
                          ]-> .)),
                    OCaml.List.tl/0),
                [ Variable ((10, Effect ([ ], .)), l2/0) ]))
        ]))

11
(. -[ OCaml.Failure/0; OCaml.Invalid_argument/0 ]-> .,
  Value (@., non_rec, x, [ A1126 ], [ (x, A1126/0) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Failure/0; OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x/0),
        [
          (Any,
            Apply
              ((11,
                Effect
                  ([
                    OCaml.Failure/0;
                    OCaml.Invalid_argument/0
                  ], .)),
                Variable
                  ((11,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[
                              OCaml.Failure/0;
                              OCaml.Invalid_argument/0
                            ]->
                            .)),
                    OCaml.List.nth/0),
                [
                  Variable ((11, Effect ([ ], .)), l2/0);
                  Constant
                    ((11,
                      Effect
                        ([
                        ],
                          .)),
                      Int(1))
                ]))
        ]))

12
(.,
  Value (@., non_rec, rl, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((12, Effect ([ ], .)), Variable ((12, Effect ([ ], .)), List.rev/0),
        [ Variable ((12, Effect ([ ], .)), l2/0) ]))

13
(.,
  Value (@., non_rec, ll, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((13, Effect ([ ], .)),
        Variable ((13, Effect ([ ], .)), OCaml.Pervasives.app/0),
        [
          Variable ((13, Effect ([ ], .)), l2/0);
          Variable ((13, Effect ([ ], .)), l2/0)
        ]))

14
(.,
  Value (@., non_rec, rll, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((14, Effect ([ ], .)),
        Variable ((14, Effect ([ ], .)), List.rev_append/0),
        [
          Variable ((14, Effect ([ ], .)), l2/0);
          Variable ((14, Effect ([ ], .)), l2/0)
        ]))

15
(.,
  Value (@., non_rec, lc, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((15, Effect ([ ], .)),
        Variable ((15, Effect ([ ], .)), OCaml.List.flatten/0),
        [
          Constructor
            ((15, Effect ([ ], .)), cons/1,
              Variable ((15, Effect ([ ], .)), l1/0),
              Constructor
                ((15, Effect ([ ], .)), cons/1,
                  Variable ((15, Effect ([ ], .)), l2/0),
                  Constructor
                    ((15, Effect ([ ], .)),
                      cons/1,
                      Variable
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0),
                      Constructor
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          cons/1,
                          Variable
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              l2/0),
                          Constructor
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              []/1)))))
        ]))

16
(.,
  Value (@., non_rec, lf, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((16, Effect ([ ], .)),
        Variable ((16, Effect ([ ], .)), OCaml.List.flatten/0),
        [
          Constructor
            ((16, Effect ([ ], .)), cons/1,
              Variable ((16, Effect ([ ], .)), l1/0),
              Constructor
                ((16, Effect ([ ], .)), cons/1,
                  Variable ((16, Effect ([ ], .)), l2/0),
                  Constructor
                    ((16, Effect ([ ], .)),
                      cons/1,
                      Variable
                        ((16,
                          Effect
                            ([
                            ],
                              .)),
                          l1/0),
                      Constructor
                        ((16,
                          Effect
                            ([
                            ],
                              .)),
                          cons/1,
                          Variable
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              l2/0),
                          Constructor
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              []/1)))))
        ]))

21
(.,
  Value (@., non_rec, m, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((21, Effect ([ ], .)), Variable ((21, Effect ([ ], .)), List.map/0),
        [
          Function
            ((21, Effect ([ ], . -> .)), x,
              Apply
                ((21, Effect ([ ], .)),
                  Variable
                    ((21, Effect ([ ], .)),
                      Z.add/0),
                  [
                    Variable
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        x/0);
                    Constant
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        Int(1))
                  ]));
          Variable ((21, Effect ([ ], .)), l2/0)
        ]))

22
(.,
  Value (@., non_rec, mi, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((22, Effect ([ ], .)),
        Variable ((22, Effect ([ ], .)), OCaml.List.mapi/0),
        [
          Function
            ((22, Effect ([ ], . -> . -> .)), i,
              Function
                ((22, Effect ([ ], . -> .)), x,
                  Apply
                    ((22, Effect ([ ], .)),
                      Variable
                        ((22,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/0),
                      [
                        Variable
                          ((22,
                            Effect
                              ([
                              ],
                                .)),
                            x/0);
                        Variable
                          ((22,
                            Effect
                              ([
                              ],
                                .)),
                            i/0)
                      ])));
          Variable ((22, Effect ([ ], .)), l2/0)
        ]))

23
(.,
  Value (@., non_rec, rm, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((23, Effect ([ ], .)),
        Variable ((23, Effect ([ ], .)), OCaml.List.rev_map/0),
        [
          Function
            ((23, Effect ([ ], . -> .)), x,
              Apply
                ((23, Effect ([ ], .)),
                  Variable
                    ((23, Effect ([ ], .)),
                      Z.add/0),
                  [
                    Variable
                      ((23,
                        Effect
                          ([
                          ],
                            .)),
                        x/0);
                    Constant
                      ((23,
                        Effect
                          ([
                          ],
                            .)),
                        Int(1))
                  ]));
          Variable ((23, Effect ([ ], .)), l2/0)
        ]))

24
(.,
  Value (@., non_rec, fl, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((24, Effect ([ ], .)),
        Variable ((24, Effect ([ ], .)), OCaml.List.fold_left/0),
        [
          Function
            ((24, Effect ([ ], . -> . -> .)), s,
              Function
                ((24, Effect ([ ], . -> .)), x,
                  Apply
                    ((24, Effect ([ ], .)),
                      Variable
                        ((24,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/0),
                      [
                        Variable
                          ((24,
                            Effect
                              ([
                              ],
                                .)),
                            s/0);
                        Variable
                          ((24,
                            Effect
                              ([
                              ],
                                .)),
                            x/0)
                      ])));
          Constant ((24, Effect ([ ], .)), Int(0));
          Variable ((24, Effect ([ ], .)), l2/0)
        ]))

25
(.,
  Value (@., non_rec, fr, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((25, Effect ([ ], .)),
        Variable ((25, Effect ([ ], .)), OCaml.List.fold_right/0),
        [
          Function
            ((25, Effect ([ ], . -> . -> .)), x,
              Function
                ((25, Effect ([ ], . -> .)), s,
                  Apply
                    ((25, Effect ([ ], .)),
                      Variable
                        ((25,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/0),
                      [
                        Variable
                          ((25,
                            Effect
                              ([
                              ],
                                .)),
                            s/0);
                        Variable
                          ((25,
                            Effect
                              ([
                              ],
                                .)),
                            x/0)
                      ])));
          Variable ((25, Effect ([ ], .)), l2/0);
          Constant ((25, Effect ([ ], .)), Int(0))
        ]))

29
(. -[ OCaml.Invalid_argument/0 ]-> .,
  Value
    (@., non_rec, m2, [ A1405 ], [ (x_1, A1405/0) ],
      Some Type (list/1, Type (Z/1))) =
    Match
      ((?, Effect ([ OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x_1/0),
        [
          (Any,
            Apply
              ((29, Effect ([ OCaml.Invalid_argument/0 ], .)),
                Variable
                  ((29,
                    Effect
                      ([ ],
                        . ->
                          . ->
                            .
                              -[
                                OCaml.Invalid_argument/0
                              ]->
                              .)),
                    OCaml.List.map2/0),
                [
                  Function
                    ((29,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              ->
                              .)),
                      x,
                      Function
                        ((29,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .)),
                          y,
                          Apply
                            ((29,
                              Effect
                                ([
                                ],
                                  .)),
                              Variable
                                ((29,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Z.add/0),
                              [
                                Variable
                                  ((29,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    x/0);
                                Variable
                                  ((29,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    y/0)
                              ])));
                  Variable ((29, Effect ([ ], .)), l2/0);
                  Variable ((29, Effect ([ ], .)), l2/0)
                ]))
        ]))

30
(. -[ OCaml.Invalid_argument/0 ]-> .,
  Value
    (@., non_rec, rm2, [ A1450 ], [ (x_1, A1450/0) ],
      Some Type (list/1, Type (Z/1))) =
    Match
      ((?, Effect ([ OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x_1/0),
        [
          (Any,
            Apply
              ((30, Effect ([ OCaml.Invalid_argument/0 ], .)),
                Variable
                  ((30,
                    Effect
                      ([ ],
                        . ->
                          . ->
                            .
                              -[
                                OCaml.Invalid_argument/0
                              ]->
                              .)),
                    OCaml.List.rev_map2/0),
                [
                  Function
                    ((30,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              ->
                              .)),
                      x,
                      Function
                        ((30,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .)),
                          y,
                          Apply
                            ((30,
                              Effect
                                ([
                                ],
                                  .)),
                              Variable
                                ((30,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Z.add/0),
                              [
                                Variable
                                  ((30,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    x/0);
                                Variable
                                  ((30,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    y/0)
                              ])));
                  Variable ((30, Effect ([ ], .)), l2/0);
                  Variable ((30, Effect ([ ], .)), l2/0)
                ]))
        ]))

31
(. -[ OCaml.Invalid_argument/0 ]-> .,
  Value (@., non_rec, fl2, [ A1495 ], [ (x_1, A1495/0) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x_1/0),
        [
          (Any,
            Apply
              ((31, Effect ([ OCaml.Invalid_argument/0 ], .)),
                Variable
                  ((31,
                    Effect
                      ([ ],
                        . ->
                          . ->
                            .
                              ->
                              .
                                -[
                                  OCaml.Invalid_argument/0
                                ]->
                                .)),
                    OCaml.List.fold_left2/0),
                [
                  Function
                    ((31,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              ->
                              .
                                ->
                                .)),
                      s,
                      Function
                        ((31,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((31,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((31,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((31,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Z.add/0),
                                  [
                                    Apply
                                      ((31,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Variable
                                          ((31,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Z.add/0),
                                        [
                                          Variable
                                            ((31,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              s/0);
                                          Variable
                                            ((31,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              x/0)
                                        ]);
                                    Variable
                                      ((31,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y/0)
                                  ]))));
                  Constant
                    ((31,
                      Effect
                        ([
                        ],
                          .)),
                      Int(0));
                  Variable ((31, Effect ([ ], .)), l2/0);
                  Variable ((31, Effect ([ ], .)), l2/0)
                ]))
        ]))

32
(. -[ OCaml.Invalid_argument/0 ]-> .,
  Value (@., non_rec, fr2, [ A1556 ], [ (x_1, A1556/0) ], Some Type (Z/1)) =
    Match
      ((?, Effect ([ OCaml.Invalid_argument/0 ], .)),
        Variable ((?, Effect ([ ], .)), x_1/0),
        [
          (Any,
            Apply
              ((32, Effect ([ OCaml.Invalid_argument/0 ], .)),
                Variable
                  ((32,
                    Effect
                      ([ ],
                        . ->
                          . ->
                            .
                              ->
                              .
                                -[
                                  OCaml.Invalid_argument/0
                                ]->
                                .)),
                    OCaml.List.fold_right2/0),
                [
                  Function
                    ((32,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              ->
                              .
                                ->
                                .)),
                      s,
                      Function
                        ((32,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((32,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((32,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((32,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Z.add/0),
                                  [
                                    Apply
                                      ((32,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Variable
                                          ((32,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Z.add/0),
                                        [
                                          Variable
                                            ((32,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              s/0);
                                          Variable
                                            ((32,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              x/0)
                                        ]);
                                    Variable
                                      ((32,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y/0)
                                  ]))));
                  Variable ((32, Effect ([ ], .)), l2/0);
                  Variable ((32, Effect ([ ], .)), l2/0);
                  Constant
                    ((32,
                      Effect
                        ([
                        ],
                          .)),
                      Int(0))
                ]))
        ]))
