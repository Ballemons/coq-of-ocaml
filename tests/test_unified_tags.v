(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Inductive bar_tags : Type :=
| bar_int_tag : bar_tags
| bar_string_tag : bar_tags
| bar_Var_tag : forall (t0 : Set), bar_tags.

Fixpoint decode_bar_tags (tag : bar_tags) : Set :=
  match tag with
  | bar_Var_tag t0 => t0
  | bar_string_tag => string
  | bar_int_tag => int
  end.

Inductive bar : bar_tags -> Type :=
| BarC : int -> bar bar_int_tag
| BarC2 : string -> bar bar_string_tag.

Inductive foo_tags : Type :=
| foo_bool_tag : foo_tags
| foo_int_tag : foo_tags
| foo_Var_tag : forall (t0 : Set), foo_tags.

Fixpoint decode_foo_tags (tag : foo_tags) : Set :=
  match tag with
  | foo_Var_tag t0 => t0
  | foo_int_tag => int
  | foo_bool_tag => bool
  end.

Inductive foo : foo_tags -> Type :=
| FooC : int -> foo foo_int_tag
| FooC2 : bool -> foo foo_bool_tag.

Inductive term_tags : Type :=
| term_bool_tag : term_tags
| term_int_tag : term_tags
| term_Tuple_tag : forall (t0 t1 : term_tags), term_tags
| term_Var_tag : forall (t0 : Set), term_tags.

Fixpoint decode_term_tags (tag : term_tags) : Set :=
  match tag with
  | term_Var_tag t0 => t0
  | term_Tuple_tag t0 t1 => decode_term_tags t0 * decode_term_tags t1
  | term_int_tag => int
  | term_bool_tag => bool
  end.

Inductive term : term_tags -> Type :=
| Int : int -> term term_int_tag
| Bool : bool -> term term_bool_tag
| Foo : forall {b : foo_tags} {a : bar_tags},
  bar a -> foo b -> term (term_Tuple_tag a b).

Definition evalFoo {a : foo_tags} (function_parameter : foo a)
  : decode_foo_tags a :=
  match function_parameter with
  | FooC n => n
  | FooC2 b => b
  end.

Definition evalBar {a : bar_tags} (function_parameter : bar a)
  : decode_bar_tags a :=
  match function_parameter with
  | BarC2 s => s
  | BarC n => n
  end.

Fixpoint eval {a : term_tags} (function_parameter : term a)
  : decode_term_tags a :=
  match function_parameter with
  | Int n => n
  | Bool b => b
  | Foo f b => ((evalBar f), (evalFoo b))
  end.
