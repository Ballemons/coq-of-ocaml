(.,
  Value (non_rec, 'l', [ ], [ ], Some Type ('list', Type ('Z'))) =
    Let (4, Effect ([ 'Counter'; 'NonTermination' ], .))
      (rec, 'map_rec', [ 'A'; 'B' ],
        [
          ('counter', Type ('nat'));
          ('f', ('B' -> 'A'));
          ('match_var_0', Type ('list', 'B'))
        ], Some Type ('list', 'A')) =
      Match
        ((?, Effect ([ 'NonTermination' ], .)),
          Variable ((?, Effect ([ ], .)), 'counter'),
          [
            (Nat(0),
              Apply
                ((?, Effect ([ 'NonTermination' ], .)),
                  Variable
                    ((?,
                      Effect
                        ([ ],
                          .
                            -[
                              'NonTermination'
                            ]->
                            .)),
                      'not_terminated'),
                  Variable ((?, Effect ([ ], .)), 'tt')));
            (Constructor ('S', 'counter'),
              Match
                ((?, Effect ([ 'NonTermination' ], .)),
                  Variable
                    ((?, Effect ([ ], .)),
                      'match_var_0'),
                  [
                    (Constructor ('[]'),
                      Constructor
                        ((5,
                          Effect
                            ([
                            ],
                              .)),
                          '[]'));
                    (Constructor
                      ('cons',
                        'x',
                        'xs'),
                      Constructor
                        ((6,
                          Effect
                            ([
                              'NonTermination'
                            ],
                              .)),
                          'cons',
                          Apply
                            ((6,
                              Effect
                                ([
                                ],
                                  .)),
                              Variable
                                ((6,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  'f'),
                              Variable
                                ((6,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  'x')),
                          Apply
                            ((?,
                              Effect
                                ([
                                  'NonTermination'
                                ],
                                  .)),
                              Apply
                                ((6,
                                  Effect
                                    ([
                                    ],
                                      .
                                        -[
                                          'NonTermination'
                                        ]->
                                        .)),
                                  Apply
                                    ((?,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              -[
                                                'NonTermination'
                                              ]->
                                              .)),
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .
                                                ->
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      'NonTermination'
                                                    ]->
                                                    .)),
                                          'map_rec'),
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          'counter')),
                                  Variable
                                    ((6,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      'f')),
                              Variable
                                ((6,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  'xs'))))
                  ]))
          ]) in
    Let (4, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'map', [ 'A'; 'B' ],
        [ ('f', ('B' -> 'A')); ('match_var_0', Type ('list', 'B')) ],
        Some Type ('list', 'A')) =
      Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
        (non_rec, 'counter', [ ], [ ], None) =
        Apply
          ((?, Effect ([ 'Counter' ], .)),
            Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
            Variable ((?, Effect ([ ], .)), 'tt')) in
      Apply
        ((?, Effect ([ 'NonTermination' ], .)),
          Apply
            ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
              Apply
                ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)),
                  Variable
                    ((?, Effect ([ ], . -> . -> . -[ 'NonTermination' ]-> .)),
                      'map_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
              Variable ((?, Effect ([ ], .)), 'f')),
          Variable ((?, Effect ([ ], .)), 'match_var_0')) in
    Let (7, Effect ([ 'Counter'; 'NonTermination' ], .))
      (rec, 'loop_rec', [ 'A' ], [ ('counter', Type ('nat')); ('x', 'A') ],
        Some 'A') =
      Match
        ((?, Effect ([ 'NonTermination' ], .)),
          Variable ((?, Effect ([ ], .)), 'counter'),
          [
            (Nat(0),
              Apply
                ((?, Effect ([ 'NonTermination' ], .)),
                  Variable
                    ((?,
                      Effect
                        ([ ],
                          .
                            -[
                              'NonTermination'
                            ]->
                            .)),
                      'not_terminated'),
                  Variable ((?, Effect ([ ], .)), 'tt')));
            (Constructor ('S', 'counter'), Variable ((7, Effect ([ ], .)), 'x'))
          ]) in
    Let (7, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'loop', [ 'A' ], [ ('x', 'A') ], Some 'A') =
      Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
        (non_rec, 'counter', [ ], [ ], None) =
        Apply
          ((?, Effect ([ 'Counter' ], .)),
            Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
            Variable ((?, Effect ([ ], .)), 'tt')) in
      Apply
        ((?, Effect ([ 'NonTermination' ], .)),
          Apply
            ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
              Variable
                ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)), 'loop_rec'),
              Variable ((?, Effect ([ ], .)), 'counter')),
          Variable ((?, Effect ([ ], .)), 'x')) in
    Apply
      ((?, Effect ([ 'Counter'; 'NonTermination' ], .)),
        Apply
          ((8, Effect ([ ], . -[ 'Counter'; 'NonTermination' ]-> .)),
            Variable
              ((8, Effect ([ ], . -> . -[ 'Counter'; 'NonTermination' ]-> .)),
                'map'),
            Function
              ((8, Effect ([ ], . -> .)), 'n',
                Apply
                  ((?, Effect ([ ], .)),
                    Apply
                      ((8, Effect ([ ], .)),
                        Variable ((8, Effect ([ ], .)), 'Z.add'),
                        Variable ((8, Effect ([ ], .)), 'n')),
                    Constant ((8, Effect ([ ], .)), Int(1))))),
        Constructor
          ((8, Effect ([ ], .)), 'cons',
            Constant ((8, Effect ([ ], .)), Int(5)),
            Constructor
              ((8, Effect ([ ], .)), 'cons',
                Constant ((8, Effect ([ ], .)), Int(7)),
                Constructor
                  ((8, Effect ([ ], .)), 'cons',
                    Constant ((8, Effect ([ ], .)), Int(8)),
                    Constructor ((8, Effect ([ ], .)), '[]'))))))
