Inductive 't1':
  ([ ],
    [
      ('C1', [ Type ('Z') ]);
      ('C2', [ Type ('bool'); Type ('Z') ]);
      ('C3', [ ])
    ])

(.,
  Value (non_rec, 'n', [ ], [ ], Some Type ('t1')) =
    Constructor
      ((8, Effect ([ ], .)), 'C2', Constructor ((8, Effect ([ ], .)), 'false'),
        Constant ((8, Effect ([ ], .)), Int(3))))

(.,
  Value (non_rec, 'm', [ ], [ ], Some Type ('bool')) =
    Match
      ((10, Effect ([ ], .)), Variable ((10, Effect ([ ], .)), 'n'),
        [
          (Constructor ('C2', 'b', Any), Variable ((11, Effect ([ ], .)), 'b'));
          (Any, Constructor ((12, Effect ([ ], .)), 'true'))
        ]))

Inductive 't2':
  ([ 'a' ], [ ('D1', [ ]); ('D2', [ 'a'; Type ('t2', 'a') ]) ])

(. -> . -[ 'NonTermination' ]-> .,
  Value
    (rec, 'of_list_rec', [ 'A' ],
      [ ('counter', Type ('nat')); ('l', Type ('list', 'A')) ],
      Some Type ('t2', 'A')) =
    Match
      ((?, Effect ([ 'NonTermination' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((19, Effect ([ 'NonTermination' ], .)),
                Variable ((19, Effect ([ ], .)), 'l'),
                [
                  (Constructor ('[]'),
                    Constructor
                      ((20,
                        Effect
                          ([
                          ],
                            .)),
                        'D1'));
                  (Constructor ('cons', 'x', 'xs'),
                    Constructor
                      ((21,
                        Effect
                          ([
                            'NonTermination'
                          ],
                            .)),
                        'D2',
                        Variable
                          ((21,
                            Effect
                              ([
                              ],
                                .)),
                            'x'),
                        Apply
                          ((21,
                            Effect
                              ([
                                'NonTermination'
                              ],
                                .)),
                            Apply
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'NonTermination'
                                      ]->
                                      .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              'NonTermination'
                                            ]->
                                            .)),
                                    'of_list_rec'),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'counter')),
                            Variable
                              ((21,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'xs'))))
                ]))
        ]))

(. -[ 'Counter'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'of_list', [ 'A' ], [ ('l', Type ('list', 'A')) ],
      Some Type ('t2', 'A')) =
    Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
            Variable
              ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)),
                'of_list_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
        Variable ((?, Effect ([ ], .)), 'l')))

(. -> . -[ 'NonTermination' ]-> .,
  Value
    (rec, 'sum_rec', [ ],
      [ ('counter', Type ('nat')); ('l', Type ('t2', Type ('Z'))) ],
      Some Type ('Z')) =
    Match
      ((?, Effect ([ 'NonTermination' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((24, Effect ([ 'NonTermination' ], .)),
                Variable ((24, Effect ([ ], .)), 'l'),
                [
                  (Constructor ('D1'),
                    Constant
                      ((25,
                        Effect
                          ([
                          ],
                            .)),
                        Int(0)));
                  (Constructor ('D2', 'x', 'xs'),
                    Apply
                      ((?,
                        Effect
                          ([
                            'NonTermination'
                          ],
                            .)),
                        Apply
                          ((26,
                            Effect
                              ([
                              ],
                                .)),
                            Variable
                              ((26,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'Z.add'),
                            Variable
                              ((26,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'x')),
                        Apply
                          ((26,
                            Effect
                              ([
                                'NonTermination'
                              ],
                                .)),
                            Apply
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'NonTermination'
                                      ]->
                                      .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              'NonTermination'
                                            ]->
                                            .)),
                                    'sum_rec'),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'counter')),
                            Variable
                              ((26,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'xs'))))
                ]))
        ]))

(. -[ 'Counter'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'sum', [ ], [ ('l', Type ('t2', Type ('Z'))) ], Some Type ('Z')) =
    Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
            Variable
              ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)), 'sum_rec'),
            Variable ((?, Effect ([ ], .)), 'counter')),
        Variable ((?, Effect ([ ], .)), 'l')))

(.,
  Value (non_rec, 's', [ ], [ ], Some Type ('Z')) =
    Apply
      ((28, Effect ([ 'Counter'; 'NonTermination' ], .)),
        Variable
          ((28, Effect ([ ], . -[ 'Counter'; 'NonTermination' ]-> .)), 'sum'),
        Apply
          ((28, Effect ([ 'Counter'; 'NonTermination' ], .)),
            Variable
              ((28, Effect ([ ], . -[ 'Counter'; 'NonTermination' ]-> .)),
                'of_list'),
            Constructor
              ((28, Effect ([ ], .)), 'cons',
                Constant ((28, Effect ([ ], .)), Int(5)),
                Constructor
                  ((28, Effect ([ ], .)), 'cons',
                    Constant ((28, Effect ([ ], .)), Int(7)),
                    Constructor
                      ((28, Effect ([ ], .)), 'cons',
                        Constant ((28, Effect ([ ], .)), Int(3)),
                        Constructor ((28, Effect ([ ], .)), '[]')))))))
