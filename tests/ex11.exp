Module 'SizedString'.
  Record 't':
    ([ ('name', Type ('string')); ('size', Type ('Z')) ])
End 'SizedString'.

Value 'r':
  (non_rec, [ ], [ ], Type ('SizedString.t'),
    Record (('SizedString.name', String("gre")), ('SizedString.size', Int(3))))

Value 'r'':
  (non_rec, [ ], [ ], Type ('SizedString.t'),
    Record (('SizedString.name', String("haha")), ('SizedString.size', Int(4))))

Value 's':
  (non_rec, [ ], [ ], Type ('Z'),
    Apply
      (Apply ('Z.add', Field ('r', 'SizedString.size')),
        Field ('r'', 'SizedString.size')))

Value 'f':
  (non_rec, [ ], [ ('match_var_0', Type ('SizedString.t')) ], Type ('bool'),
    Match
      ('match_var_0',
        [
          (Record (('SizedString.size', Int(3))), Constructor ('true'));
          (Any, Constructor ('false'))
        ]))

Value 'b':
  (non_rec, [ ], [ ], Type ('bool'), Apply ('f', 'r'))

Value 'b'':
  (non_rec, [ ], [ ], Type ('bool'), Apply ('f', 'r''))

Module 'Point'.
  Record 't':
    ([ ('x', Type ('Z')); ('y', Type ('Z')); ('z', Type ('Z')) ])
  
  Value 'p':
    (non_rec, [ ], [ ], Type ('t'),
      Record (('x', Int(5)), ('y', Int(-3)), ('z', Int(1))))
  
  Value 'b':
    (non_rec, [ ], [ ], Type ('bool'),
      Match
        ('p',
          [
            (Record (('x', Int(5)), ('z', Int(1))), Constructor ('true'));
            (Any, Constructor ('false'))
          ]))
End 'Point'.
