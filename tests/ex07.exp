Value 'b':
  (non_rec, [ ], [ ],
    (Apply
      ('orb', Apply ('equiv_decb', Constructor ('false'), Constructor ('true')),
        Apply
          ('andb',
            Apply ('nequiv_decb', Constructor ('tt'), Constructor ('tt')),
            Apply ('negb', Constructor ('true')))), Type ('bool')))

Value 'n1':
  (non_rec, [ ], [ ],
    (Apply ('Z.add', Int(1), Apply ('Z.mul', Int(2), Int(3))), Type ('Z')))

Value 'n2':
  (non_rec, [ ], [ ],
    (Apply
      ('Z.sub', Apply ('Z.add', Apply ('Z.abs', Int(-1)), Int(1)),
        Apply
          ('Z.mul',
            Apply ('Z.modulo', Apply ('Z.div', Int(5), Int(23)), Int(4)), Int(3))),
      Type ('Z')))

Value 'n3':
  (non_rec, [ ], [ ], (Apply ('Z.pred', Apply ('Z.succ', Int(12))), Type ('Z')))

Value 'n4':
  (non_rec, [ ], [ ],
    (Apply
      ('Z.lxor', Apply ('Z.lor', Apply ('Z.land', Int(5), Int(7)), Int(3)),
        Int(9)), Type ('Z')))

Value 'n5':
  (non_rec, [ ], [ ],
    (Apply
      ('Z.add', Apply ('Z.shiftl', Int(156), Int(4)),
        Apply ('Z.shiftr', Int(12), Int(1))), Type ('Z')))

Value 's':
  (non_rec, [ ], [ ],
    (Apply ('append', String("ghj"), String("klm")), Type ('string')))

Value 'c':
  (non_rec, [ ], [ ],
    (Apply
      ('char_of_int', Apply ('Z.add', Apply ('int_of_char', Char("c")), Int(1))),
      Type ('ascii')))

Value 'x':
  (non_rec, [ ], [ ], (Apply ('ignore', Int(23)), Type ('unit')))

Value 'p':
  (non_rec, [ ], [ ],
    (Apply
      ('Z.add', Apply ('fst', Tuple (Int(1), Int(2))),
        Apply ('snd', Tuple (Int(3), Int(4)))), Type ('Z')))

Value 'l':
  (non_rec, [ ], [ ],
    (Apply
      ('app',
        Constructor
          ('cons', Int(1), Constructor ('cons', Int(2), Constructor ('[]'))),
        Constructor ('cons', Int(3), Constructor ('[]'))),
      Type ('list', Type ('Z'))))

Value 'y':
  (non_rec, [ ], [ ],
    (Apply
      ('apply', Function ('n', Type ('Z'), Apply ('Z.add', 'n', Int(1))),
        Int(12)), Type ('Z')))
