3
(Value
  (non_rec, @.,
    [
      ((tail, [ A ], [ (l, Type (list/0, A)) ], Some Type (list/0, A)),
        Match
          ((4, Effect ([ OCaml.Failure/0 ], .)),
            Variable ((4, Effect ([ ], .)), l/0),
            [
              (Constructor (cons/0, Any, xs),
                Variable ((5, Effect ([ ], .)), xs/0));
              (Constructor ([]/0),
                Apply
                  ((6,
                    Effect
                      ([
                        OCaml.Failure/0
                      ],
                        .)),
                    Variable
                      ((6,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Failure/0
                              ]->
                              .)),
                        OCaml.Pervasives.failwith/0),
                    [
                      Constant
                        ((6,
                          Effect
                            ([
                            ],
                              .)),
                          String("Cannot take the tail of an empty list."))
                    ]))
            ]))
    ]))

8
(Value
  (rec, @.,
    [
      ((print_list_rec, [ ],
        [ (counter, Type (nat/0)); (x, Type (list/0, Type (string/0))) ],
        Some Type (unit/0)),
        Match
          ((?, Effect ([ IO/0; NonTermination/0 ], .)),
            Variable ((?, Effect ([ ], .)), counter/0),
            [
              (Constructor (O/0),
                Apply
                  ((?,
                    Effect
                      ([
                        NonTermination/0
                      ],
                        .)),
                    Variable
                      ((?,
                        Effect
                          ([
                          ],
                            .
                              -[
                                NonTermination/0
                              ]->
                              .)),
                        not_terminated/0),
                    [
                      Tuple
                        ((?,
                          Effect
                            ([
                            ],
                              .)))
                    ]));
              (Constructor (S/0, counter),
                Match
                  ((?,
                    Effect
                      ([
                        IO/0;
                        NonTermination/0
                      ],
                        .)),
                    Variable
                      ((?,
                        Effect
                          ([
                          ],
                            .)),
                        x/0),
                    [
                      (Constructor
                        ([]/0),
                        Constructor
                          ((9,
                            Effect
                              ([
                              ],
                                .)),
                            tt/0));
                      (Constructor
                        (cons/0,
                          x,
                          xs),
                        Sequence
                          ((11,
                            Effect
                              ([
                                IO/0;
                                NonTermination/0
                              ],
                                .)),
                            Apply
                              ((11,
                                Effect
                                  ([
                                    IO/0
                                  ],
                                    .)),
                                Variable
                                  ((11,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            IO/0
                                          ]->
                                          .)),
                                    OCaml.Pervasives.print_string/0),
                                [
                                  Variable
                                    ((11,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      x/0)
                                ]),
                            Apply
                              ((12,
                                Effect
                                  ([
                                    IO/0;
                                    NonTermination/0
                                  ],
                                    .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            IO/0;
                                            NonTermination/0
                                          ]->
                                          .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                -[
                                                  IO/0;
                                                  NonTermination/0
                                                ]->
                                                .)),
                                        print_list_rec/0),
                                    [
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    ((12,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      xs/0)
                                ])))
                    ]))
            ]))
    ]))

8
(Value
  (non_rec, @.,
    [
      ((print_list, [ ], [ (x, Type (list/0, Type (string/0))) ],
        Some Type (unit/0)),
        Apply
          ((?, Effect ([ Counter/0; IO/0; NonTermination/0 ], .)),
            Variable
              ((?, Effect ([ ], . -> . -[ IO/0; NonTermination/0 ]-> .)),
                print_list_rec/0),
            [
              Apply
                ((?, Effect ([ Counter/0 ], .)),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .
                            -[
                              Counter/0
                            ]->
                            .)),
                      read_counter/0),
                  [
                    Tuple
                      ((?,
                        Effect
                          ([
                          ],
                            .)))
                  ]);
              Variable ((?, Effect ([ ], .)), x/0)
            ]))
    ]))

14
(Value
  (non_rec, @.,
    [
      ((f, [ ], [ ], Some (Type (list/0, Type (string/0)) -> Type (unit/0))),
        Variable
          ((14, Effect ([ ], . -[ Counter/0; IO/0; NonTermination/0 ]-> .)),
            print_list/0))
    ]))

16
(Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (z, A) ], Some Type (unit/0)),
        Apply
          ((16,
            Effect
              ([ Counter/0; IO/0; NonTermination/0; OCaml.Failure/0 ], .)),
            Variable
              ((16,
                Effect
                  ([ ], . -[ Counter/0; IO/0; NonTermination/0 ]-> .)),
                f/0),
            [
              Apply
                ((16, Effect ([ OCaml.Failure/0 ], .)),
                  Variable
                    ((16,
                      Effect
                        ([
                        ],
                          .
                            -[
                              OCaml.Failure/0
                            ]->
                            .)),
                      tail/0),
                  [
                    Constructor
                      ((16,
                        Effect
                          ([
                          ],
                            .)),
                        cons/0,
                        Constant
                          ((16,
                            Effect
                              ([
                              ],
                                .)),
                            String("Stop")),
                        Constructor
                          ((16,
                            Effect
                              ([
                              ],
                                .)),
                            cons/0,
                            Constant
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                String("Hello")),
                            Constructor
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                cons/0,
                                Constant
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    String(" ")),
                                Constructor
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    cons/0,
                                    Constant
                                      ((16,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        String("world")),
                                    Constructor
                                      ((16,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        []/0)))))
                  ])
            ]))
    ]))
