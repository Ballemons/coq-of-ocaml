(. -[ 'Failure' ]-> .,
  Value
    (non_rec, 'tail', [ 'A' ], [ ('l', Type ('list', 'A')) ],
      Some Type ('list', 'A')) =
    Match
      ((?, Effect ([ 'Failure' ], .)), Variable ((?, Effect ([ ], .)), 'l'),
        [
          (Constructor ('cons', Any, 'xs'),
            Variable ((?, Effect ([ ], .)), 'xs'));
          (Constructor ('[]'),
            Apply
              ((?, Effect ([ 'Failure' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'Failure'
                          ]-> .)),
                    'failwith'),
                Constant
                  ((?, Effect ([ ], .)),
                    String("Cannot take the tail of an empty list."))))
        ]))

(. -> . -[ 'IO'; 'NonTermination' ]-> .,
  Value
    (rec, 'print_list_rec', [ ],
      [
        ('counter', Type ('nat'));
        ('match_var_0', Type ('list', Type ('string')))
      ], Some Type ('unit')) =
    Match
      ((?, Effect ([ 'IO'; 'NonTermination' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((?, Effect ([ 'IO'; 'NonTermination' ], .)),
                Variable ((?, Effect ([ ], .)), 'match_var_0'),
                [
                  (Constructor ('[]'),
                    Constructor
                      ((?,
                        Effect
                          ([
                          ],
                            .)),
                        'tt'));
                  (Constructor ('cons', 'x', 'xs'),
                    Sequence
                      ((?,
                        Effect
                          ([
                            'IO';
                            'NonTermination'
                          ],
                            .)),
                        Apply
                          ((?,
                            Effect
                              ([
                                'IO'
                              ],
                                .)),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'IO'
                                      ]->
                                      .)),
                                'print_string'),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'x')),
                        Apply
                          ((?,
                            Effect
                              ([
                                'IO';
                                'NonTermination'
                              ],
                                .)),
                            Apply
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'IO';
                                        'NonTermination'
                                      ]->
                                      .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              'IO';
                                              'NonTermination'
                                            ]->
                                            .)),
                                    'print_list_rec'),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'counter')),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'xs'))))
                ]))
        ]))

(. -[ 'Counter'; 'IO'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'print_list', [ ],
      [ ('match_var_0', Type ('list', Type ('string'))) ], Some Type ('unit')) =
    Let (?, Effect ([ 'Counter'; 'IO'; 'NonTermination' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'IO'; 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'IO'; 'NonTermination' ]-> .)),
            Variable
              ((?, Effect ([ ], . -> . -[ 'IO'; 'NonTermination' ]-> .)),
                'print_list_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
        Variable ((?, Effect ([ ], .)), 'match_var_0')))

(. -[ 'Counter'; 'IO'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'f', [ ], [ ],
      Some (Type ('list', Type ('string')) -> Type ('unit'))) =
    Variable
      ((?, Effect ([ ], . -[ 'Counter'; 'IO'; 'NonTermination' ]-> .)),
        'print_list'))

(. -[ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ]-> .,
  Value (non_rec, 'x', [ 'A' ], [ ('z', 'A') ], Some Type ('unit')) =
    Apply
      ((?, Effect ([ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], .)),
        Variable
          ((?, Effect ([ ], . -[ 'Counter'; 'IO'; 'NonTermination' ]-> .)), 'f'),
        Apply
          ((?, Effect ([ 'Failure' ], .)),
            Variable ((?, Effect ([ ], . -[ 'Failure' ]-> .)), 'tail'),
            Constructor
              ((?, Effect ([ ], .)), 'cons',
                Constant ((?, Effect ([ ], .)), String("Stop")),
                Constructor
                  ((?, Effect ([ ], .)), 'cons',
                    Constant ((?, Effect ([ ], .)), String("Hello")),
                    Constructor
                      ((?, Effect ([ ], .)), 'cons',
                        Constant ((?, Effect ([ ], .)), String(" ")),
                        Constructor
                          ((?, Effect ([ ], .)), 'cons',
                            Constant ((?, Effect ([ ], .)), String("world")),
                            Constructor ((?, Effect ([ ], .)), '[]'))))))))
