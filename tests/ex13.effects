Value
  (. -[ 'Failure' ]-> .,
    Match
      (Effect ([ 'Failure' ], .), Leaf (Effect ([ ], .)),
        Leaf (Effect ([ ], .)),
        Apply
          (Effect ([ 'Failure' ], .), Leaf (Effect ([ ], . -[ 'Failure' ]-> .)),
            Leaf (Effect ([ ], .)))))

Value
  (. -> . -[ 'IO'; 'NonTermination' ]-> .,
    Match
      (Effect ([ 'IO'; 'NonTermination' ], .), Leaf (Effect ([ ], .)),
        Apply
          (Effect ([ 'NonTermination' ], .),
            Leaf (Effect ([ ], . -[ 'NonTermination' ]-> .)),
            Leaf (Effect ([ ], .))),
        Match
          (Effect ([ 'IO'; 'NonTermination' ], .), Leaf (Effect ([ ], .)),
            Compound (Effect ([ ], .)),
            Sequence
              (Effect ([ 'IO'; 'NonTermination' ], .),
                Apply
                  (Effect ([ 'IO' ], .), Leaf (Effect ([ ], . -[ 'IO' ]-> .)),
                    Leaf (Effect ([ ], .))),
                Apply
                  (Effect ([ 'IO'; 'NonTermination' ], .),
                    Apply
                      (Effect ([ ], . -[ 'IO'; 'NonTermination' ]-> .),
                        Leaf
                          (Effect ([ ], . -> . -[ 'IO'; 'NonTermination' ]-> .)),
                        Leaf (Effect ([ ], .))), Leaf (Effect ([ ], .)))))))

Value
  (. -[ 'Counter'; 'IO'; 'NonTermination' ]-> .,
    Let
      (Effect ([ 'Counter'; 'IO'; 'NonTermination' ], .),
        Apply
          (Effect ([ 'Counter' ], .), Leaf (Effect ([ ], . -[ 'Counter' ]-> .)),
            Leaf (Effect ([ ], .))),
        Apply
          (Effect ([ 'IO'; 'NonTermination' ], .),
            Apply
              (Effect ([ ], . -[ 'IO'; 'NonTermination' ]-> .),
                Leaf (Effect ([ ], . -> . -[ 'IO'; 'NonTermination' ]-> .)),
                Leaf (Effect ([ ], .))), Leaf (Effect ([ ], .)))))

Value
  (. -[ 'Counter'; 'IO'; 'NonTermination' ]-> .,
    Leaf (Effect ([ ], . -[ 'Counter'; 'IO'; 'NonTermination' ]-> .)))

Value
  (. -[ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ]-> .,
    Apply
      (Effect ([ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], .),
        Leaf (Effect ([ ], . -[ 'Counter'; 'IO'; 'NonTermination' ]-> .)),
        Apply
          (Effect ([ 'Failure' ], .), Leaf (Effect ([ ], . -[ 'Failure' ]-> .)),
            Compound
              (Effect ([ ], .), Leaf (Effect ([ ], .)),
                Compound
                  (Effect ([ ], .), Leaf (Effect ([ ], .)),
                    Compound
                      (Effect ([ ], .), Leaf (Effect ([ ], .)),
                        Compound
                          (Effect ([ ], .), Leaf (Effect ([ ], .)),
                            Compound (Effect ([ ], .)))))))))
