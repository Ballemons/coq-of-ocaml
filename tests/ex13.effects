(. -[ Failure/1 ]-> .,
  Value (non_rec, tail, [ A ], [ (l, Type (list/1, A)) ], Some Type (list/1, A))
    =
    Match
      ((4, Effect ([ Failure/1 ], .)), Variable ((4, Effect ([ ], .)), l/0),
        [
          (Constructor (cons/1, Any, xs), Variable ((5, Effect ([ ], .)), xs/0));
          (Constructor ([]/1),
            Apply
              ((6, Effect ([ Failure/1 ], .)),
                Variable
                  ((6,
                    Effect
                      ([ ],
                        .
                          -[
                            Failure/1
                          ]-> .)),
                    failwith/1),
                Constant
                  ((6, Effect ([ ], .)),
                    String("Cannot take the tail of an empty list."))))
        ]))

(. -> . -[ IO/1; NonTermination/1 ]-> .,
  Value
    (rec, print_list_rec, [ ],
      [ (counter, Type (nat/1)); (x, Type (list/1, Type (string/1))) ],
      Some Type (unit/1)) =
    Match
      ((?, Effect ([ IO/1; NonTermination/1 ], .)),
        Variable ((?, Effect ([ ], .)), counter/0),
        [
          (Constructor (O/1),
            Apply
              ((?, Effect ([ NonTermination/1 ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            NonTermination/1
                          ]-> .)),
                    not_terminated/1),
                Tuple ((?, Effect ([ ], .)))));
          (Constructor (S/1, counter),
            Match
              ((?, Effect ([ IO/1; NonTermination/1 ], .)),
                Variable ((?, Effect ([ ], .)), x/0),
                [
                  (Constructor ([]/1),
                    Constructor
                      ((9,
                        Effect
                          ([
                          ],
                            .)),
                        tt/1));
                  (Constructor (cons/1, x, xs),
                    Sequence
                      ((11,
                        Effect
                          ([
                            IO/1;
                            NonTermination/1
                          ],
                            .)),
                        Apply
                          ((11,
                            Effect
                              ([
                                IO/1
                              ],
                                .)),
                            Variable
                              ((11,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        IO/1
                                      ]->
                                      .)),
                                print_string/1),
                            Variable
                              ((11,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0)),
                        Apply
                          ((12,
                            Effect
                              ([
                                IO/1;
                                NonTermination/1
                              ],
                                .)),
                            Apply
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        IO/1;
                                        NonTermination/1
                                      ]->
                                      .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              IO/1;
                                              NonTermination/1
                                            ]->
                                            .)),
                                    print_list_rec/0),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    counter/0)),
                            Variable
                              ((12,
                                Effect
                                  ([
                                  ],
                                    .)),
                                xs/0))))
                ]))
        ]))

(. -[ Counter/1; IO/1; NonTermination/1 ]-> .,
  Value
    (non_rec, print_list, [ ], [ (x, Type (list/1, Type (string/1))) ],
      Some Type (unit/1)) =
    Let (?, Effect ([ Counter/1; IO/1; NonTermination/1 ], .))
      (non_rec, counter, [ ], [ ], None) =
      Apply
        ((?, Effect ([ Counter/1 ], .)),
          Variable ((?, Effect ([ ], . -[ Counter/1 ]-> .)), read_counter/1),
          Tuple ((?, Effect ([ ], .)))) in
    Apply
      ((?, Effect ([ IO/1; NonTermination/1 ], .)),
        Apply
          ((?, Effect ([ ], . -[ IO/1; NonTermination/1 ]-> .)),
            Variable
              ((?, Effect ([ ], . -> . -[ IO/1; NonTermination/1 ]-> .)),
                print_list_rec/0), Variable ((?, Effect ([ ], .)), counter/0)),
        Variable ((?, Effect ([ ], .)), x/0)))

(. -[ Counter/1; IO/1; NonTermination/1 ]-> .,
  Value
    (non_rec, f, [ ], [ ],
      Some (Type (list/1, Type (string/1)) -> Type (unit/1))) =
    Variable
      ((14, Effect ([ ], . -[ Counter/1; IO/1; NonTermination/1 ]-> .)),
        print_list/0))

(. -[ Counter/1; Failure/1; IO/1; NonTermination/1 ]-> .,
  Value (non_rec, x, [ A ], [ (z, A) ], Some Type (unit/1)) =
    Apply
      ((16, Effect ([ Counter/1; Failure/1; IO/1; NonTermination/1 ], .)),
        Variable
          ((16, Effect ([ ], . -[ Counter/1; IO/1; NonTermination/1 ]-> .)), f/0),
        Apply
          ((16, Effect ([ Failure/1 ], .)),
            Variable ((16, Effect ([ ], . -[ Failure/1 ]-> .)), tail/0),
            Constructor
              ((16, Effect ([ ], .)), cons/1,
                Constant ((16, Effect ([ ], .)), String("Stop")),
                Constructor
                  ((16, Effect ([ ], .)), cons/1,
                    Constant ((16, Effect ([ ], .)), String("Hello")),
                    Constructor
                      ((16, Effect ([ ], .)), cons/1,
                        Constant ((16, Effect ([ ], .)), String(" ")),
                        Constructor
                          ((16, Effect ([ ], .)), cons/1,
                            Constant ((16, Effect ([ ], .)), String("world")),
                            Constructor ((16, Effect ([ ], .)), []/1))))))))
