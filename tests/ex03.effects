(.,
  Value (non_rec, 'n1', [ ], [ ], Some Type ('Z')) =
    Let (?, Effect ([ ], .)) (non_rec, 'm', [ ], [ ], None) =
      Constant ((?, Effect ([ ], .)), Int(12)) in
    Let (?, Effect ([ ], .)) (non_rec, 'n1', [ ], [ ], None) =
      Variable ((?, Effect ([ ], .)), 'm') in
    Variable ((?, Effect ([ ], .)), 'n1'))

(.,
  Value (non_rec, 'n2', [ ], [ ], Some Type ('Z')) =
    Let (?, Effect ([ ], .))
      (non_rec, 'p1', [ 'A'; 'B'; 'C' ],
        [ ('c', (('B' -> ('C' -> 'B')) -> 'A')) ], Some 'A') =
      Apply
        ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), 'c'),
          Function
            ((?, Effect ([ ], . -> . -> .)), 'x',
              Function
                ((?, Effect ([ ], . -> .)), 'y',
                  Variable ((?, Effect ([ ], .)), 'x')))) in
    Let (?, Effect ([ ], .))
      (non_rec, 'c', [ 'A' ], [ ('f', (Type ('Z') -> (Type ('Z') -> 'A'))) ],
        Some 'A') =
      Apply
        ((?, Effect ([ ], .)),
          Apply
            ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), 'f'),
              Constant ((?, Effect ([ ], .)), Int(12))),
          Constant ((?, Effect ([ ], .)), Int(23))) in
    Apply
      ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], . -> .)), 'p1'),
        Variable ((?, Effect ([ ], . -> .)), 'c')))
