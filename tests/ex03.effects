Value
  (Let
    (Leaf (Effect (false, .)),
      Let
        (Leaf (Effect (false, .)), Leaf (Effect (false, .)), Effect (false, .)),
      Effect (false, .)), .)

Value
  (LetFun
    (Apply
      (Leaf (Effect (false, .)),
        Function
          (Function (Leaf (Effect (false, .)), Effect (false, . -> .)),
            Effect (false, . -> . -> .)), Effect (false, .)),
      LetFun
        (Apply
          (Apply
            (Leaf (Effect (false, .)), Leaf (Effect (false, .)),
              Effect (false, .)), Leaf (Effect (false, .)), Effect (false, .)),
          Apply
            (Leaf (Effect (false, . -> .)), Leaf (Effect (false, . -> .)),
              Effect (false, .)), Effect (false, .)), Effect (false, .)), .)
[
  '' : .;
  'andb' : .;
  'app' : .;
  'append' : .;
  'apply' : .;
  'char_of_int' : .;
  'equiv_decb' : .;
  'fst' : .;
  'ignore' : .;
  'int_of_char' : .;
  'n1' : .;
  'n2' : .;
  'negb' : .;
  'nequiv_decb' : .;
  'orb' : .;
  'reverse_apply' : .;
  'snd' : .;
  'Z.abs' : .;
  'Z.add' : .;
  'Z.div' : .;
  'Z.land' : .;
  'Z.lor' : .;
  'Z.ltb' : .;
  'Z.lxor' : .;
  'Z.modulo' : .;
  'Z.mul' : .;
  'Z.opp' : .;
  'Z.pred' : .;
  'Z.shiftl' : .;
  'Z.shiftr' : .;
  'Z.sub' : .;
  'Z.succ' : .
]
