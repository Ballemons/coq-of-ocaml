(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Require Import TypingFlags.Loader.
Unset Guard Checking.

Module SizedString.
  Module t.
    Record record := {
      name : string;
      size : Z }.
  End t.
  Definition t := t.record.
End SizedString.

Definition r : SizedString.t :=
  {| SizedString.t.name := "gre" % string; SizedString.t.size := 3 |}.

Definition r' : SizedString.t :=
  {| SizedString.t.name := "haha" % string; SizedString.t.size := 4 |}.

Definition s : Z := Z.add (SizedString.t.size r) (SizedString.t.size r').

Definition f (function_parameter : SizedString.t) : bool :=
  match function_parameter with
  | {| SizedString.t.size := 3 |} => true
  | _ => false
  end.

Definition b : bool := f r.

Definition b' : bool := f r'.

Module Point.
  Module t.
    Record record := {
      x : Z;
      y : Z;
      z : Z }.
  End t.
  Definition t := t.record.
  
  Definition p : t := {| t.x := 5; t.y := (-3); t.z := 1 |}.
  
  Definition b : bool :=
    match p with
    | {| t.x := 5; t.z := 1 |} => true
    | _ => false
    end.
End Point.

Module poly.
  Record record {first second : Set} := {
    first : first;
    second : second }.
  Arguments record : clear implicits.
End poly.
Definition poly := poly.record.

Definition p : poly Z bool := {| poly.first := 12; poly.second := false |}.

Module ConstructorWithRecords.
  Module t.
    Module Foo.
      Record record {name size : Set} := {
        name : name;
        size : size }.
      Arguments record : clear implicits.
    End Foo.
    Definition Foo := Foo.record.
  End t.
  
  Module gadt.
    Module Ex.
      Record record {x : Set} := {
        x : x }.
      Arguments record : clear implicits.
    End Ex.
    Definition Ex := Ex.record.
  End gadt.
  
  Reserved Notation "'gadt".
  Reserved Notation "'loc".
  
  Module loc.
    Record record {x y : Set} := {
      x : x;
      y : y }.
    Arguments record : clear implicits.
  End loc.
  Definition loc_skeleton := loc.record.
  
  Inductive t : Set :=
  | Foo : t.Foo string Z -> t
  | Bar : 'loc -> t
  
  with gadt_gadt : Set :=
  | Ex : forall {a : Set}, gadt.Ex a -> gadt_gadt
  
  where "'gadt" := (fun (a : Set) => gadt_gadt)
  and "'loc" := (loc_skeleton Z Z).
  
  Definition gadt := 'gadt.
  Definition loc := 'loc.
  
  Definition l : loc := {| loc.x := 12; loc.y := 23 |}.
  
  Definition foo : t := Foo {| t.Foo.name := "foo" % string; t.Foo.size := 12 |}.
  
  Definition f (x : t) : Z :=
    match x with
    | Foo {| t.Foo.size := size |} => size
    | Bar {| loc.y := y |} => y
    end.
End ConstructorWithRecords.
