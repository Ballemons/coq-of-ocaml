(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Module Source.
  Record signature {t : Set} : Set := {
    t := t;
    x : t;
  }.
End Source.

Module Target.
  Record signature {t : Set} : Set := {
    t := t;
    y : t;
  }.
End Target.

Module M.
  Definition t : Set := int.
  
  Definition x : int := 12.
  
  Definition module : {t : Set & Source.signature (t := t)} :=
    existT (A := Set) _ t
      {|
        Source.x := x
      |}.
End M.
Definition M := M.module.

Module F. Section Functor.
  Variable X : {t : Set & Source.signature (t := t)}.
  
  Definition t : Set := (|X|).(Source.t).
  
  Definition y : (|X|).(Source.t) := (|X|).(Source.x).
  
  Definition functor : {_ : unit & Target.signature (t := (|X|).(Source.t))} :=
    existT (A := unit) (fun _ => _) tt
      {|
        Target.y := y
      |}.
End Functor. End F.
Definition F := F.functor.

Module FSubst. Section Functor.
  Variable X : {t : Set & Source.signature (t := t)}.
  
  Definition y : (|X|).(Source.t) := (|X|).(Source.x).
  
  Definition functor : {_ : unit & Target.signature (t := (|X|).(Source.t))} :=
    existT (A := unit) (fun _ => _) tt
      {|
        Target.y := y
      |}.
End Functor. End FSubst.
Definition FSubst := FSubst.functor.

Module Sum. Section Functor.
  Variable X : {_ : unit & Source.signature (t := int)}.
  
  Variable Y : {_ : unit & Source.signature (t := int)}.
  
  Definition t : Set := int.
  
  Definition y : int := Z.add (|X|).(Source.x) (|Y|).(Source.x).
  
  Definition functor : {t : Set & Target.signature (t := t)} :=
    existT (A := Set) _ t
      {|
        Target.y := y
      |}.
End Functor. End Sum.
Definition Sum := Sum.functor.

Module WithM.
  Definition t := (|M|).(Source.t).
  
  Definition x := (|M|).(Source.x).
  
  Definition z : int := 0.
End WithM.

Module WithSum.
  Definition F_include := F (existT (A := Set) _ _ (|M|)).
  
  Definition t := (|F_include|).(Target.t).
  
  Definition y := (|F_include|).(Target.y).
  
  Definition z : int := 0.
End WithSum.

Module GenFun. Section Functor.
  Definition t : Set := int.
  
  Definition y : int := 23.
  
  Definition functor (_ : unit) : {t : Set & Target.signature (t := t)} :=
    existT (A := Set) _ t
      {|
        Target.y := y
      |}.
End Functor. End GenFun.
Definition GenFun := GenFun.functor.

Definition AppliedGenFun := GenFun tt.
