Exception ('TailLess', ())

Exception ('Wtf', (Type ('Z') * Type ('string')))

((),
  Value (non_rec, 'f', [ 'A'; 'B' ], [ ('x', 'B') ], Some 'A') =
    Apply ((), Variable ((), 'TailLess'), Tuple (())))

((),
  Value (non_rec, 'g', [ 'A'; 'B' ], [ ('x', 'B') ], Some 'A') =
    Apply
      ((), Variable ((), 'Wtf'),
        Tuple ((), Constant ((), Int(12)), Constant ((), String("no")))))

((),
  Value
    (rec, 'h_rec', [ 'A' ],
      [ ('counter', Type ('nat')); ('l', Type ('list', 'A')) ], Some 'A') =
    Match
      ((), Variable ((), 'counter'),
        [
          (Nat(0),
            Apply
              ((), Variable ((), 'not_terminated'),
                Variable ((), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((), Variable ((), 'l'),
                [
                  (Constructor ('[]'),
                    Sequence
                      ((),
                        Apply
                          ((),
                            Variable
                              ((),
                                'print_string'),
                            Constant
                              ((),
                                String("no tail"))),
                        Apply
                          ((),
                            Variable
                              ((),
                                'TailLess'),
                            Tuple
                              (()))));
                  (Constructor
                    ('cons',
                      'x',
                      Constructor
                        ('[]')),
                    Variable
                      ((),
                        'x'));
                  (Constructor ('cons', Any, 'xs'),
                    Apply
                      ((),
                        Apply
                          ((),
                            Variable
                              ((),
                                'h_rec'),
                            Variable
                              ((),
                                'counter')),
                        Variable
                          ((),
                            'xs')))
                ]))
        ]))

((),
  Value (non_rec, 'h', [ 'A' ], [ ('l', Type ('list', 'A')) ], Some 'A') =
    Let () (non_rec, 'counter', [ ], [ ], None) =
      Apply ((), Variable ((), 'read_counter'), Variable ((), 'tt')) in
    Apply
      ((), Apply ((), Variable ((), 'h_rec'), Variable ((), 'counter')),
        Variable ((), 'l')))
