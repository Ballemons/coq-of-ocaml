3
(.,
  Value (non_rec, b, [ ], [ ], Some Type (bool/1)) =
    Apply
      ((3, Effect ([ ], .)), Variable ((3, Effect ([ ], .)), orb/0),
        [
          Apply
            ((3, Effect ([ ], .)),
              Variable ((3, Effect ([ ], .)), equiv_decb/0),
              [
                Constructor ((3, Effect ([ ], .)), false/1);
                Constructor ((3, Effect ([ ], .)), true/1)
              ]);
          Apply
            ((3, Effect ([ ], .)),
              Variable ((3, Effect ([ ], .)), andb/0),
              [
                Apply
                  ((3, Effect ([ ], .)),
                    Variable
                      ((3,
                        Effect
                          ([
                          ],
                            .)),
                        nequiv_decb/0),
                    [
                      Constructor
                        ((3,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1);
                      Constructor
                        ((3,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1)
                    ]);
                Apply
                  ((3, Effect ([ ], .)),
                    Variable
                      ((3,
                        Effect
                          ([
                          ],
                            .)),
                        negb/0),
                    [
                      Constructor
                        ((3,
                          Effect
                            ([
                            ],
                              .)),
                          true/1)
                    ])
              ])
        ]))

5
(.,
  Value (non_rec, n1, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((5, Effect ([ ], .)), Variable ((5, Effect ([ ], .)), Z.add/0),
        [
          Constant ((5, Effect ([ ], .)), Int(1));
          Apply
            ((5, Effect ([ ], .)),
              Variable ((5, Effect ([ ], .)), Z.mul/0),
              [
                Constant ((5, Effect ([ ], .)), Int(2));
                Constant ((5, Effect ([ ], .)), Int(3))
              ])
        ]))

7
(.,
  Value (non_rec, n2, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((7, Effect ([ ], .)), Variable ((7, Effect ([ ], .)), Z.sub/0),
        [
          Apply
            ((7, Effect ([ ], .)),
              Variable ((7, Effect ([ ], .)), Z.add/0),
              [
                Apply
                  ((7, Effect ([ ], .)),
                    Variable
                      ((7,
                        Effect
                          ([
                          ],
                            .)),
                        Z.abs/0),
                    [
                      Constant
                        ((7,
                          Effect
                            ([
                            ],
                              .)),
                          Int(-1))
                    ]);
                Constant ((7, Effect ([ ], .)), Int(1))
              ]);
          Apply
            ((7, Effect ([ ], .)),
              Variable ((7, Effect ([ ], .)), Z.mul/0),
              [
                Apply
                  ((7, Effect ([ ], .)),
                    Variable
                      ((7,
                        Effect
                          ([
                          ],
                            .)),
                        Z.modulo/0),
                    [
                      Apply
                        ((7,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((7,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.div/0),
                          [
                            Constant
                              ((7,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(5));
                            Constant
                              ((7,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(23))
                          ]);
                      Constant
                        ((7,
                          Effect
                            ([
                            ],
                              .)),
                          Int(4))
                    ]);
                Constant ((7, Effect ([ ], .)), Int(3))
              ])
        ]))

9
(.,
  Value (non_rec, n3, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((9, Effect ([ ], .)), Variable ((9, Effect ([ ], .)), Z.pred/0),
        [
          Apply
            ((9, Effect ([ ], .)),
              Variable ((9, Effect ([ ], .)), Z.succ/0),
              [ Constant ((9, Effect ([ ], .)), Int(12)) ])
        ]))

11
(.,
  Value (non_rec, n4, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((11, Effect ([ ], .)), Variable ((11, Effect ([ ], .)), Z.lxor/0),
        [
          Apply
            ((11, Effect ([ ], .)),
              Variable ((11, Effect ([ ], .)), Z.lor/0),
              [
                Apply
                  ((11,
                    Effect
                      ([
                      ],
                        .)),
                    Variable
                      ((11,
                        Effect
                          ([
                          ],
                            .)),
                        Z.land/0),
                    [
                      Constant
                        ((11,
                          Effect
                            ([
                            ],
                              .)),
                          Int(5));
                      Constant
                        ((11,
                          Effect
                            ([
                            ],
                              .)),
                          Int(7))
                    ]);
                Constant ((11, Effect ([ ], .)), Int(3))
              ]);
          Constant ((11, Effect ([ ], .)), Int(9))
        ]))

13
(.,
  Value (non_rec, n5, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((13, Effect ([ ], .)), Variable ((13, Effect ([ ], .)), Z.add/0),
        [
          Apply
            ((13, Effect ([ ], .)),
              Variable ((13, Effect ([ ], .)), Z.shiftl/0),
              [
                Constant ((13, Effect ([ ], .)), Int(156));
                Constant ((13, Effect ([ ], .)), Int(4))
              ]);
          Apply
            ((13, Effect ([ ], .)),
              Variable ((13, Effect ([ ], .)), Z.shiftr/0),
              [
                Constant ((13, Effect ([ ], .)), Int(12));
                Constant ((13, Effect ([ ], .)), Int(1))
              ])
        ]))

15
(.,
  Value (non_rec, s, [ ], [ ], Some Type (string/1)) =
    Apply
      ((15, Effect ([ ], .)), Variable ((15, Effect ([ ], .)), String.append/0),
        [
          Constant ((15, Effect ([ ], .)), String("ghj"));
          Constant ((15, Effect ([ ], .)), String("klm"))
        ]))

17
(.,
  Value (non_rec, c, [ ], [ ], Some Type (ascii/1)) =
    Apply
      ((17, Effect ([ ], .)),
        Variable ((17, Effect ([ ], .)), OCaml.Pervasives.char_of_int/0),
        [
          Apply
            ((17, Effect ([ ], .)),
              Variable ((17, Effect ([ ], .)), Z.add/0),
              [
                Apply
                  ((17,
                    Effect
                      ([
                      ],
                        .)),
                    Variable
                      ((17,
                        Effect
                          ([
                          ],
                            .)),
                        OCaml.Pervasives.int_of_char/0),
                    [
                      Constant
                        ((17,
                          Effect
                            ([
                            ],
                              .)),
                          Char("c"))
                    ]);
                Constant ((17, Effect ([ ], .)), Int(1))
              ])
        ]))

19
(.,
  Value (non_rec, x, [ ], [ ], Some Type (unit/1)) =
    Apply
      ((19, Effect ([ ], .)),
        Variable ((19, Effect ([ ], .)), OCaml.Pervasives.ignore/0),
        [ Constant ((19, Effect ([ ], .)), Int(23)) ]))

21
(.,
  Value (non_rec, p, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((21, Effect ([ ], .)), Variable ((21, Effect ([ ], .)), Z.add/0),
        [
          Apply
            ((21, Effect ([ ], .)),
              Variable ((21, Effect ([ ], .)), fst/0),
              [
                Tuple
                  ((21,
                    Effect
                      ([
                      ],
                        .)),
                    Constant
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        Int(1)),
                    Constant
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        Int(2)))
              ]);
          Apply
            ((21, Effect ([ ], .)),
              Variable ((21, Effect ([ ], .)), snd/0),
              [
                Tuple
                  ((21,
                    Effect
                      ([
                      ],
                        .)),
                    Constant
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        Int(3)),
                    Constant
                      ((21,
                        Effect
                          ([
                          ],
                            .)),
                        Int(4)))
              ])
        ]))

23
(.,
  Value (non_rec, l, [ ], [ ], Some Type (list/1, Type (Z/1))) =
    Apply
      ((23, Effect ([ ], .)),
        Variable ((23, Effect ([ ], .)), OCaml.Pervasives.app/0),
        [
          Constructor
            ((23, Effect ([ ], .)), cons/1,
              Constant ((23, Effect ([ ], .)), Int(1)),
              Constructor
                ((23, Effect ([ ], .)), cons/1,
                  Constant
                    ((23, Effect ([ ], .)), Int(2)),
                  Constructor
                    ((23, Effect ([ ], .)), []/1)));
          Constructor
            ((23, Effect ([ ], .)), cons/1,
              Constant ((23, Effect ([ ], .)), Int(3)),
              Constructor ((23, Effect ([ ], .)), []/1))
        ]))

25
(.,
  Value (non_rec, y, [ ], [ ], Some Type (Z/1)) =
    Apply
      ((25, Effect ([ ], .)), Variable ((25, Effect ([ ], .)), apply/0),
        [
          Function
            ((25, Effect ([ ], . -> .)), n,
              Apply
                ((25, Effect ([ ], .)),
                  Variable
                    ((25, Effect ([ ], .)),
                      Z.add/0),
                  [
                    Variable
                      ((25,
                        Effect
                          ([
                          ],
                            .)),
                        n/0);
                    Constant
                      ((25,
                        Effect
                          ([
                          ],
                            .)),
                        Int(1))
                  ]));
          Constant ((25, Effect ([ ], .)), Int(12))
        ]))
