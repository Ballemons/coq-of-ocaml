Inductive 'tree':
  ([ ],
    [ ('Leaf', [ ]); ('Node', [ Type ('tree'); Type ('Z'); Type ('tree') ]) ])

((),
  Value
    (rec, 'find_rec', [ ],
      [ ('counter', Type ('nat')); ('x', Type ('Z')); ('t', Type ('tree')) ],
      Some Type ('bool')) =
    Match
      (unknown, Variable (unknown, 'counter'),
        [
          (Nat(0),
            Apply
              (unknown, Variable (unknown, 'not_terminated'),
                Variable (unknown, 'tt')));
          (Constructor ('S', 'counter'),
            Match
              (unknown, Variable (unknown, 't'),
                [
                  (Constructor ('Leaf'),
                    Constructor
                      (unknown,
                        'false'));
                  (Constructor
                    ('Node',
                      't1',
                      'x'',
                      't2'),
                    IfThenElse
                      (unknown,
                        Apply
                          (unknown,
                            Apply
                              (unknown,
                                Variable
                                  (unknown,
                                    'Z.ltb'),
                                Variable
                                  (unknown,
                                    'x')),
                            Variable
                              (unknown,
                                'x'')),
                        Apply
                          (unknown,
                            Apply
                              (unknown,
                                Apply
                                  (unknown,
                                    Variable
                                      (unknown,
                                        'find_rec'),
                                    Variable
                                      (unknown,
                                        'counter')),
                                Variable
                                  (unknown,
                                    'x')),
                            Variable
                              (unknown,
                                't1')),
                        IfThenElse
                          (unknown,
                            Apply
                              (unknown,
                                Apply
                                  (unknown,
                                    Variable
                                      (unknown,
                                        'Z.ltb'),
                                    Variable
                                      (unknown,
                                        'x'')),
                                Variable
                                  (unknown,
                                    'x')),
                            Apply
                              (unknown,
                                Apply
                                  (unknown,
                                    Apply
                                      (unknown,
                                        Variable
                                          (unknown,
                                            'find_rec'),
                                        Variable
                                          (unknown,
                                            'counter')),
                                    Variable
                                      (unknown,
                                        'x')),
                                Variable
                                  (unknown,
                                    't2')),
                            Constructor
                              (unknown,
                                'true'))))
                ]))
        ]))

((),
  Value
    (non_rec, 'find', [ ], [ ('x', Type ('Z')); ('t', Type ('tree')) ],
      Some Type ('bool')) =
    Let unknown (non_rec, 'counter', [ ], [ ], None) =
      Apply
        (unknown, Variable (unknown, 'read_counter'), Variable (unknown, 'tt'))
      in
    Apply
      (unknown,
        Apply
          (unknown,
            Apply
              (unknown, Variable (unknown, 'find_rec'),
                Variable (unknown, 'counter')), Variable (unknown, 'x')),
        Variable (unknown, 't')))
