((TypeDefinition
  (Inductive tree ()
   (NonGadt
    ((Leaf ())
     (Node
      ((Apply ((path_name ((path ()) (base tree))) (depth 0)) ())
       (Apply ((path_name ((path ()) (base Z))) (depth 1)) ())
       (Apply ((path_name ((path ()) (base tree))) (depth 0)) ())))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name find) (typ_vars ())
       (args
        ((x (Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))
         (t (Apply ((path_name ((path ()) (base tree))) (depth 0)) ()))))
       (typ ((Apply ((path_name ((path ()) (base bool))) (depth 1)) ()))))
      (Match (Variable ((path_name ((path ()) (base t))) (depth 0)))
       (((Constructor ((path_name ((path ()) (base Leaf))) (depth 0)) ())
         (Constructor ((path_name ((path ()) (base false))) (depth 1)) ()))
        ((Constructor ((path_name ((path ()) (base Node))) (depth 0))
          ((Variable t1) (Variable x') (Variable t2)))
         (IfThenElse
          (Apply
           (Variable
            ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
           ((Variable ((path_name ((path ()) (base x))) (depth 0)))
            (Variable ((path_name ((path ()) (base x'))) (depth 0)))))
          (Apply (Variable ((path_name ((path ()) (base find))) (depth 0)))
           ((Variable ((path_name ((path ()) (base x))) (depth 0)))
            (Variable ((path_name ((path ()) (base t1))) (depth 0)))))
          (IfThenElse
           (Apply
            (Variable
             ((path_name ((path (OCaml Pervasives)) (base lt))) (depth 1)))
            ((Variable ((path_name ((path ()) (base x'))) (depth 0)))
             (Variable ((path_name ((path ()) (base x))) (depth 0)))))
           (Apply (Variable ((path_name ((path ()) (base find))) (depth 0)))
            ((Variable ((path_name ((path ()) (base x))) (depth 0)))
             (Variable ((path_name ((path ()) (base t2))) (depth 0)))))
           (Constructor ((path_name ((path ()) (base true))) (depth 1)) ()))))))))))))
