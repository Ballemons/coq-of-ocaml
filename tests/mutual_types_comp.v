(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Definition foo : Set := string.

Reserved Notation "'double".
Reserved Notation "'simple".

Inductive tree : vtag -> Set :=
| Tree : forall {a : vtag}, list (node a) -> tree a

with node : vtag -> Set :=
| Leaf : forall {a : vtag}, string -> node a
| Node : forall {a : vtag}, tree a -> node a

with unrelated : vtag -> Set :=
| Unrelated : forall {a : vtag},
  'double ('simple (decode_vtag a)) -> unrelated a

where "'simple" := (fun (t_b : Set) => t_b)
and "'double" := (fun (t_b : Set) => t_b * 'simple t_b).

Definition double := 'double.
Definition simple := 'simple.

Module re_bis.
  Record record : Set := Build {
  bis : bis }.
  Definition with_bis bis (r : record) :=
    Build bis.
End re_bis.
Definition re_bis_skeleton := re_bis.record.

Module re.
  Record record : Set := Build {
  payload : payload;
  message : message }.
  Definition with_payload payload (r : record) :=
    Build payload r.(message).
  Definition with_message message (r : record) :=
    Build r.(payload) message.
End re.
Definition re_skeleton := re.record.

Reserved Notation "'re".
Reserved Notation "'re_bis".

Inductive ind : Set :=
| Ind : 're -> ind

where "'re" := (fun (t_a : Set) => re_skeleton t_a string)
and "'re_bis" := (re_bis_skeleton unit).

Definition re := 're.
Definition re_bis := 're_bis.
