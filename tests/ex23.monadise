4
(Value
  (non_rec, @., [ ((n, [ ], [ ], Some Type (Z/0)), Constant (4, Int(12))) ]))

5
(Value
  (non_rec, @.,
    [ ((c1, [ ], [ ], Some Type (ascii/0)), Constant (5, Char("a"))) ]))

6
(Value
  (non_rec, @.,
    [ ((c2, [ ], [ ], Some Type (ascii/0)), Constant (6, Char("\\n"))) ]))

7
(Value
  (non_rec, @.,
    [ ((c3, [ ], [ ], Some Type (ascii/0)), Constant (7, Char("\\t"))) ]))

8
(Value
  (non_rec, @.,
    [ ((c4, [ ], [ ], Some Type (ascii/0)), Constant (8, Char("\""))) ]))

9
(Value
  (non_rec, @.,
    [ ((s, [ ], [ ], Some Type (string/0)), Constant (9, String("hi\n\t:)\""))) ]))

11
(Value
  (non_rec, @.,
    [ ((b1, [ ], [ ], Some Type (bool/0)), Constructor (11, false/0)) ]))

12
(Value
  (non_rec, @.,
    [ ((b2, [ ], [ ], Some Type (bool/0)), Constructor (12, true/0)) ]))

13
(Value
  (non_rec, @., [ ((u, [ ], [ ], Some Type (unit/0)), Constructor (13, tt/0)) ]))

16
(Value
  (non_rec, @.,
    [ ((l1, [ A ], [ ], Some Type (list/0, A)), Constructor (16, []/0)) ]))

17
(Value
  (non_rec, @.,
    [
      ((l2, [ ], [ ], Some Type (list/0, Type (Z/0))),
        Constructor
          (17, cons/0, Constant (17, Int(0)),
            Constructor
              (17, cons/0, Constant (17, Int(1)),
                Constructor
                  (17, cons/0, Constant (17, Int(2)),
                    Constructor
                      (17, cons/0, Constant (17, Int(3)),
                        Constructor (17, []/0))))))
    ]))

18
(Value
  (non_rec, @.,
    [
      ((o, [ ], [ ], Some Type (option/0, Type (Z/0))),
        IfThenElse
          (18, Variable (18, b1/0), Constructor (18, None/0),
            Constructor (18, Some/0, Variable (18, n/0))))
    ]))

26
(Value
  (non_rec, @.,
    [
      ((e_match, [ A; B ], [ (x, A) ], Some Monad ([ OCaml.Match_failure/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (26,
                    Variable
                      (26,
                        OCaml.raise_Match_failure/0),
                    [
                      Tuple
                        (?,
                          Tuple
                            (26,
                              Constant
                                (26,
                                  String("error")),
                              Constant
                                (26,
                                  Int(1)),
                              Constant
                                (26,
                                  Int(2))))
                    ]))
            ]))
    ]))

27
(Value
  (non_rec, @.,
    [
      ((e_assert, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Assert_failure/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (27,
                    Variable
                      (27,
                        OCaml.raise_Assert_failure/0),
                    [
                      Tuple
                        (?,
                          Tuple
                            (27,
                              Constant
                                (27,
                                  String("error")),
                              Constant
                                (27,
                                  Int(1)),
                              Constant
                                (27,
                                  Int(2))))
                    ]))
            ]))
    ]))

28
(Value
  (non_rec, @.,
    [
      ((e_invalid, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Invalid_argument/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (28,
                    Variable
                      (28,
                        OCaml.raise_Invalid_argument/0),
                    [
                      Tuple
                        (?,
                          Constant
                            (28,
                              String("error")))
                    ]))
            ]))
    ]))

29
(Value
  (non_rec, @.,
    [
      ((e_failure, [ A; B ], [ (x, A) ], Some Monad ([ OCaml.Failure/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (29,
                    Variable
                      (29,
                        OCaml.raise_Failure/0),
                    [
                      Tuple
                        (?,
                          Constant
                            (29,
                              String("error")))
                    ]))
            ]))
    ]))

30
(Value
  (non_rec, @.,
    [
      ((e_not_found, [ A; B ], [ (x, A) ], Some Monad ([ OCaml.Not_found/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (30,
                    Variable
                      (30,
                        OCaml.raise_Not_found/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

31
(Value
  (non_rec, @.,
    [
      ((e_out_of_mem, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Out_of_memory/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (31,
                    Variable
                      (31,
                        OCaml.raise_Out_of_memory/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

32
(Value
  (non_rec, @.,
    [
      ((e_overflow, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Stack_overflow/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (32,
                    Variable
                      (32,
                        OCaml.raise_Stack_overflow/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

33
(Value
  (non_rec, @.,
    [
      ((e_sys_err, [ A; B ], [ (x, A) ], Some Monad ([ OCaml.Sys_error/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (33,
                    Variable
                      (33,
                        OCaml.raise_Sys_error/0),
                    [
                      Tuple
                        (?,
                          Constant
                            (33,
                              String("error")))
                    ]))
            ]))
    ]))

34
(Value
  (non_rec, @.,
    [
      ((e_EOF, [ A; B ], [ (x, A) ], Some Monad ([ OCaml.End_of_file/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (34,
                    Variable
                      (34,
                        OCaml.raise_End_of_file/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

35
(Value
  (non_rec, @.,
    [
      ((e_div, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Division_by_zero/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (35,
                    Variable
                      (35,
                        OCaml.raise_Division_by_zero/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

36
(Value
  (non_rec, @.,
    [
      ((e_sys_blocked, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Sys_blocked_io/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (36,
                    Variable
                      (36,
                        OCaml.raise_Sys_blocked_io/0),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ]))

37
(Value
  (non_rec, @.,
    [
      ((e_rec_module, [ A; B ], [ (x, A) ],
        Some Monad ([ OCaml.Undefined_recursive_module/0 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (37,
                    Variable
                      (37,
                        OCaml.raise_Undefined_recursive_module/0),
                    [
                      Tuple
                        (?,
                          Tuple
                            (37,
                              Constant
                                (37,
                                  String("error")),
                              Constant
                                (37,
                                  Int(1)),
                              Constant
                                (37,
                                  Int(2))))
                    ]))
            ]))
    ]))
