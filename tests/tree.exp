((TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((tree () ()
       (((constructor_name Leaf) (param_typs ()) (res_typ_params ())
         (typ_vars ()))
        ((constructor_name Node)
         (param_typs
          ((Apply (PathName ((path ()) (base tree))) ())
           (Apply (PathName ((path ()) (base Z))) ())
           (Apply (PathName ((path ()) (base tree))) ())))
         (res_typ_params ()) (typ_vars ())))))))))
 (Value
  ((is_rec (New true))
   (cases
    ((((name find) (typ_vars ())
       (args
        ((x (Apply (PathName ((path ()) (base Z))) ()))
         (t (Apply (PathName ((path ()) (base tree))) ()))))
       (typ ((Apply (PathName ((path ()) (base bool))) ()))))
      (Match (Variable (PathName ((path ()) (base t))))
       (((Constructor ((path ()) (base Leaf)) ())
         (Constructor ((path ()) (base false)) ()))
        ((Constructor ((path ()) (base Node))
          ((Variable t1) (Variable x') (Variable t2)))
         (IfThenElse
          (Apply (Variable (PathName ((path (OCaml Stdlib)) (base lt))))
           ((Variable (PathName ((path ()) (base x))))
            (Variable (PathName ((path ()) (base x'))))))
          (Apply (Variable (PathName ((path ()) (base find))))
           ((Variable (PathName ((path ()) (base x))))
            (Variable (PathName ((path ()) (base t1))))))
          (IfThenElse
           (Apply (Variable (PathName ((path (OCaml Stdlib)) (base lt))))
            ((Variable (PathName ((path ()) (base x'))))
             (Variable (PathName ((path ()) (base x))))))
           (Apply (Variable (PathName ((path ()) (base find))))
            ((Variable (PathName ((path ()) (base x))))
             (Variable (PathName ((path ()) (base t2))))))
           (Constructor ((path ()) (base true)) ()))))))))))))
