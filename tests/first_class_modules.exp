((Module S
  ((Signature SET
    ((items
      ((TypExistential elt) (TypExistential t)
       (Value empty () (Apply (PathName ((path ()) (base t))) ()))
       (Value is_empty ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base bool))) ())))
       (Value mem ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base bool))) ()))))
       (Value add ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value singleton ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Apply (PathName ((path ()) (base t))) ())))
       (Value remove ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value union ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value inter ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value diff ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value compare ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base Z))) ()))))
       (Value equal ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base bool))) ()))))
       (Value subset ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base bool))) ()))))
       (Value iter ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base unit))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base unit))) ()))))
       (Value map ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base elt))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value fold (a)
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Arrow (Variable a) (Variable a)))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Arrow (Variable a) (Variable a)))))
       (Value for_all ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base bool))) ()))))
       (Value _exists ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base bool))) ()))))
       (Value filter ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base t))) ()))))
       (Value partition ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Tuple
           ((Apply (PathName ((path ()) (base t))) ())
            (Apply (PathName ((path ()) (base t))) ()))))))
       (Value cardinal ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base Z))) ())))
       (Value elements ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base list)))
          ((Apply (PathName ((path ()) (base elt))) ())))))
       (Value min_elt_opt ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base option)))
          ((Apply (PathName ((path ()) (base elt))) ())))))
       (Value max_elt_opt ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base option)))
          ((Apply (PathName ((path ()) (base elt))) ())))))
       (Value choose_opt ()
        (Arrow (Apply (PathName ((path ()) (base t))) ())
         (Apply (PathName ((path ()) (base option)))
          ((Apply (PathName ((path ()) (base elt))) ())))))
       (Value split ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Tuple
           ((Apply (PathName ((path ()) (base t))) ())
            (Apply (PathName ((path ()) (base bool))) ())
            (Apply (PathName ((path ()) (base t))) ()))))))
       (Value find_opt ()
        (Arrow (Apply (PathName ((path ()) (base elt))) ())
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base option)))
           ((Apply (PathName ((path ()) (base elt))) ()))))))
       (Value find_first_opt ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base option)))
           ((Apply (PathName ((path ()) (base elt))) ()))))))
       (Value find_last_opt ()
        (Arrow
         (Arrow (Apply (PathName ((path ()) (base elt))) ())
          (Apply (PathName ((path ()) (base bool))) ()))
         (Arrow (Apply (PathName ((path ()) (base t))) ())
          (Apply (PathName ((path ()) (base option)))
           ((Apply (PathName ((path ()) (base elt))) ()))))))
       (Value of_list ()
        (Arrow
         (Apply (PathName ((path ()) (base list)))
          ((Apply (PathName ((path ()) (base elt))) ())))
         (Apply (PathName ((path ()) (base t))) ())))))
     (typ_params ((Item elt ()) (Item t ())))))))
 (TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((type_annot () ()
       (((constructor_name Type_annot)
         (param_typs ((Apply (PathName ((path ()) (base string))) ())))
         (res_typ_params ()) (typ_vars ())))))))))
 (TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((field_annot () ()
       (((constructor_name Field_annot)
         (param_typs ((Apply (PathName ((path ()) (base string))) ())))
         (res_typ_params ()) (typ_vars ())))))))))
 (TypeDefinition (Synonym pair (a b) (Tuple ((Variable a) (Variable b)))))
 (TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((comb () ()
       (((constructor_name Comb) (param_typs ()) (res_typ_params ())
         (typ_vars ())))))))))
 (TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((leaf () ()
       (((constructor_name Leaf) (param_typs ()) (res_typ_params ())
         (typ_vars ())))))))))
 (TypeDefinition
  (Inductive
   ((notations ())
    (typs
     ((comparable_struct () (_ _)
       (((constructor_name Int_key)
         (param_typs
          ((Apply (PathName ((path ()) (base option)))
            ((Apply (PathName ((path ()) (base type_annot))) ())))))
         (res_typ_params
          ((Apply (PathName ((path ()) (base Z))) ()) (Variable position)))
         (typ_vars (position)))
        ((constructor_name String_key)
         (param_typs
          ((Apply (PathName ((path ()) (base option)))
            ((Apply (PathName ((path ()) (base type_annot))) ())))))
         (res_typ_params
          ((Apply (PathName ((path ()) (base string))) ())
           (Variable position)))
         (typ_vars (position)))
        ((constructor_name Bool_key)
         (param_typs
          ((Apply (PathName ((path ()) (base option)))
            ((Apply (PathName ((path ()) (base type_annot))) ())))))
         (res_typ_params
          ((Apply (PathName ((path ()) (base bool))) ()) (Variable position)))
         (typ_vars (position)))
        ((constructor_name Pair_key)
         (param_typs
          ((Tuple
            ((Apply (PathName ((path ()) (base comparable_struct)))
              ((Variable a) (Apply (PathName ((path ()) (base leaf))) ())))
             (Apply (PathName ((path ()) (base option)))
              ((Apply (PathName ((path ()) (base field_annot))) ())))))
           (Tuple
            ((Apply (PathName ((path ()) (base comparable_struct)))
              ((Variable b) (Variable position)))
             (Apply (PathName ((path ()) (base option)))
              ((Apply (PathName ((path ()) (base field_annot))) ())))))
           (Apply (PathName ((path ()) (base option)))
            ((Apply (PathName ((path ()) (base type_annot))) ())))))
         (res_typ_params
          ((Apply (PathName ((path ()) (base pair)))
            ((Variable a) (Variable b)))
           (Apply (PathName ((path ()) (base comb))) ())))
         (typ_vars (a b position))))))))))
 (TypeDefinition
  (Synonym comparable_ty (a)
   (Apply (PathName ((path ()) (base comparable_struct)))
    ((Variable a) (Apply (PathName ((path ()) (base comb))) ())))))
 (Signature Boxed_set
  ((items
    ((TypExistential elt)
     (Value elt_ty ()
      (Apply (PathName ((path ()) (base comparable_ty)))
       ((Apply (PathName ((path ()) (base elt))) ()))))
     (Module OPS
      (With ((path (S)) (base SET))
       ((Item elt (Defined (Apply (PathName ((path ()) (base elt))) ())))
        (Item t Free))))
     (Value boxed ()
      (Apply
       (Access (PathName ((path ()) (base OPS))) ((path (S SET)) (base t)))
       ()))
     (Value size () (Apply (PathName ((path ()) (base Z))) ()))))
   (typ_params ((Item elt ()) (Module OPS ((Item t ())))))))
 (TypeDefinition
  (Synonym set (elt)
   (Package ((path ()) (base Boxed_set))
    ((Item elt ((Variable elt))) (Module OPS ((Item t ())))))))
 (Signature Triple
  ((items ((TypExistential a) (TypExistential b) (TypExistential c)))
   (typ_params ((Item a ()) (Item b ()) (Item c ())))))
 (Signature UsingTriple
  ((items
    ((TypExistential elt')
     (Module T
      (With ((path ()) (base Triple))
       ((Item a Free) (Item b Free) (Item c Free))))
     (Module OPS'
      (With ((path (S)) (base SET)) ((Item elt Free) (Item t Free))))
     (Module OPS''
      (With ((path (S)) (base SET))
       ((Item elt (Defined (Apply (PathName ((path ()) (base elt'))) ())))
        (Item t
         (Defined
          (Apply (PathName ((path ()) (base list)))
           ((Apply (PathName ((path ()) (base string))) ()))))))))
     (TypSynonym table (a)
      (Apply (PathName ((path ()) (base list))) ((Variable a))))))
   (typ_params
    ((Item elt' ()) (Module T ((Item a ()) (Item b ()) (Item c ())))
     (Module OPS' ((Item elt ()) (Item t ()))) (Module OPS'' ())))))
 (Value
  ((is_rec (New false))
   (cases
    ((((name set_update) (typ_vars (a))
       (args
        ((v (Variable a)) (b (Apply (PathName ((path ()) (base bool))) ()))
         (Box (Apply (PathName ((path ()) (base set))) ((Variable a))))))
       (typ ((Apply (PathName ((path ()) (base set))) ((Variable a))))))
      (LetVar Box (ModuleUnpack (Variable (PathName ((path ()) (base Box)))))
       (Module
        ((((path (Boxed_set)) (base elt_ty))
          (Variable
           (Access (PathName ((path ()) (base Box)))
            ((path (Boxed_set)) (base elt_ty)))))
         (((path (Boxed_set)) (base OPS))
          (Variable
           (Access (PathName ((path ()) (base Box)))
            ((path (Boxed_set)) (base OPS)))))
         (((path (Boxed_set)) (base boxed))
          (IfThenElse (Variable (PathName ((path ()) (base b))))
           (Apply
            (Variable
             (Access
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base OPS)))
              ((path (S SET)) (base add))))
            ((Variable (PathName ((path ()) (base v))))
             (Variable
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base boxed))))))
           (Apply
            (Variable
             (Access
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base OPS)))
              ((path (S SET)) (base remove))))
            ((Variable (PathName ((path ()) (base v))))
             (Variable
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base boxed))))))))
         (((path (Boxed_set)) (base size))
          (LetVar mem
           (Apply
            (Variable
             (Access
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base OPS)))
              ((path (S SET)) (base mem))))
            ((Variable (PathName ((path ()) (base v))))
             (Variable
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base boxed))))))
           (IfThenElse (Variable (PathName ((path ()) (base mem))))
            (IfThenElse (Variable (PathName ((path ()) (base b))))
             (Variable
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base size))))
             (Apply (Variable (PathName ((path (Z)) (base sub))))
              ((Variable
                (Access (PathName ((path ()) (base Box)))
                 ((path (Boxed_set)) (base size))))
               (Constant (Int 1)))))
            (IfThenElse (Variable (PathName ((path ()) (base b))))
             (Apply (Variable (PathName ((path (Z)) (base add))))
              ((Variable
                (Access (PathName ((path ()) (base Box)))
                 ((path (Boxed_set)) (base size))))
               (Constant (Int 1))))
             (Variable
              (Access (PathName ((path ()) (base Box)))
               ((path (Boxed_set)) (base size)))))))))))))))))
