((Module S
  ((Signature SET
    ((items
      ((TypExistential elt) (TypExistential t)
       (Value empty () (Apply ((path ()) (base t)) ()))
       (Value is_empty ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base bool)) ())))
       (Value mem ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base bool)) ()))))
       (Value add ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value singleton ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Apply ((path ()) (base t)) ())))
       (Value remove ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value union ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value inter ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value diff ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value compare ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base Z)) ()))))
       (Value equal ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base bool)) ()))))
       (Value subset ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base bool)) ()))))
       (Value iter ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base unit)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base unit)) ()))))
       (Value map ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base elt)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value fold (a)
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Arrow (Variable a) (Variable a)))
         (Arrow (Apply ((path ()) (base t)) ())
          (Arrow (Variable a) (Variable a)))))
       (Value for_all ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base bool)) ()))))
       (Value _exists ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base bool)) ()))))
       (Value filter ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base t)) ()))))
       (Value partition ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Tuple
           ((Apply ((path ()) (base t)) ()) (Apply ((path ()) (base t)) ()))))))
       (Value cardinal ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base Z)) ())))
       (Value elements ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base list)) ((Apply ((path ()) (base elt)) ())))))
       (Value min_elt_opt ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base option))
          ((Apply ((path ()) (base elt)) ())))))
       (Value max_elt_opt ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base option))
          ((Apply ((path ()) (base elt)) ())))))
       (Value choose_opt ()
        (Arrow (Apply ((path ()) (base t)) ())
         (Apply ((path ()) (base option))
          ((Apply ((path ()) (base elt)) ())))))
       (Value split ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Tuple
           ((Apply ((path ()) (base t)) ())
            (Apply ((path ()) (base bool)) ())
            (Apply ((path ()) (base t)) ()))))))
       (Value find_opt ()
        (Arrow (Apply ((path ()) (base elt)) ())
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base option))
           ((Apply ((path ()) (base elt)) ()))))))
       (Value find_first_opt ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base option))
           ((Apply ((path ()) (base elt)) ()))))))
       (Value find_last_opt ()
        (Arrow
         (Arrow (Apply ((path ()) (base elt)) ())
          (Apply ((path ()) (base bool)) ()))
         (Arrow (Apply ((path ()) (base t)) ())
          (Apply ((path ()) (base option))
           ((Apply ((path ()) (base elt)) ()))))))
       (Value of_list ()
        (Arrow
         (Apply ((path ()) (base list)) ((Apply ((path ()) (base elt)) ())))
         (Apply ((path ()) (base t)) ())))))
     (typ_params (elt t))))))
 (TypeDefinition
  (Inductive type_annot ()
   (NonGadt ((Type_annot ((Apply ((path ()) (base string)) ())))))))
 (TypeDefinition
  (Inductive field_annot ()
   (NonGadt ((Field_annot ((Apply ((path ()) (base string)) ())))))))
 (TypeDefinition (Synonym pair (a b) (Tuple ((Variable a) (Variable b)))))
 (TypeDefinition (Inductive comb () (NonGadt ((Comb ())))))
 (TypeDefinition (Inductive leaf () (NonGadt ((Leaf ())))))
 (TypeDefinition
  (Inductive comparable_struct (_ _)
   (Gadt
    ((Int_key (position)
      ((Apply ((path ()) (base option))
        ((Apply ((path ()) (base type_annot)) ()))))
      (Apply ((path ()) (base comparable_struct))
       ((Apply ((path ()) (base Z)) ()) (Variable position))))
     (String_key (position)
      ((Apply ((path ()) (base option))
        ((Apply ((path ()) (base type_annot)) ()))))
      (Apply ((path ()) (base comparable_struct))
       ((Apply ((path ()) (base string)) ()) (Variable position))))
     (Bool_key (position)
      ((Apply ((path ()) (base option))
        ((Apply ((path ()) (base type_annot)) ()))))
      (Apply ((path ()) (base comparable_struct))
       ((Apply ((path ()) (base bool)) ()) (Variable position))))
     (Pair_key (a b position)
      ((Tuple
        ((Apply ((path ()) (base comparable_struct))
          ((Variable a) (Apply ((path ()) (base leaf)) ())))
         (Apply ((path ()) (base option))
          ((Apply ((path ()) (base field_annot)) ())))))
       (Tuple
        ((Apply ((path ()) (base comparable_struct))
          ((Variable b) (Variable position)))
         (Apply ((path ()) (base option))
          ((Apply ((path ()) (base field_annot)) ())))))
       (Apply ((path ()) (base option))
        ((Apply ((path ()) (base type_annot)) ()))))
      (Apply ((path ()) (base comparable_struct))
       ((Apply ((path ()) (base pair)) ((Variable a) (Variable b)))
        (Apply ((path ()) (base comb)) ()))))))))
 (TypeDefinition
  (Synonym comparable_ty (a)
   (Apply ((path ()) (base comparable_struct))
    ((Variable a) (Apply ((path ()) (base comb)) ())))))
 (Signature Boxed_set
  ((items
    ((TypExistential elt)
     (Value elt_ty ()
      (Apply ((path ()) (base comparable_ty))
       ((Apply ((path ()) (base elt)) ()))))
     (Module OPS
      (With ((path (S)) (base SET))
       ((Defined (Apply ((path ()) (base elt)) ())) (Existential t))))
     (Module OPS'
      (With ((path (S)) (base SET)) ((Existential elt) (Existential t))))
     (Module OPS''
      (With ((path (S)) (base SET))
       ((Defined (Apply ((path ()) (base elt)) ()))
        (Defined
         (Apply ((path ()) (base list))
          ((Apply ((path ()) (base string)) ())))))))
     (Value size () (Apply ((path ()) (base Z)) ()))
     (TypSynonym table (a) (Apply ((path ()) (base list)) ((Variable a))))))
   (typ_params (elt))))
 (Signature Triple
  ((items ((TypExistential a) (TypExistential b) (TypExistential c)))
   (typ_params (a b c))))
 (Signature UsingTriple
  ((items
    ((Module T
      (With ((path ()) (base Triple))
       ((Existential a) (Existential b) (Existential c))))))
   (typ_params ()))))
