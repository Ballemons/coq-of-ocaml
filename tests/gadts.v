(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Inductive gre : Set -> Set :=
| Arg : forall {a : Set}, a -> gre a.

Inductive foo : Set -> Set -> Set :=
| Bar : forall {a b c : Set}, a -> int -> b -> c -> foo b string
| Other : forall {a b : Set}, int -> foo a b.

Inductive lex : Set -> Set :=
| Clex : int -> lex int
| Clex2 : int -> lex unit.

Inductive expr : Set -> Set :=
| Int : int -> expr int
| String : string -> expr string
| Sum : expr int -> expr int -> expr int
| Pair : forall {a b : Set}, expr a -> expr b -> expr (a * b).

Fixpoint proj_int (e : expr int) : int :=
  match e with
  | Int n => n
  | Sum e1 e2 => Z.add (proj_int e1) (proj_int e2)
  | _ => unreachable_gadt_branch
  end.

Inductive one_case : Set -> Set :=
| SingleCase : one_case int
| Impossible : one_case bool.

Definition x : int :=
  match SingleCase with
  | SingleCase => 0
  | _ => unreachable_gadt_branch
  end.
