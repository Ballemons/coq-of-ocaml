((Value
  (Known ((file_name tests/ex26.ml) (line 3))
   ((file_name tests/ex26.ml) (line 6)))
  ((is_rec (New true))
   (cases
    ((((name f_map) (typ_vars (A B))
       (args
        ((f (Arrow (Variable A) (Variable B)))
         (l
          (Apply ((path_name ((path ()) (base list))) (depth 1))
           ((Variable A))))))
       (typ
        ((Apply ((path_name ((path ()) (base list))) (depth 1))
          ((Variable B))))))
      (Match (Variable ((path_name ((path ()) (base l))) (depth 0)))
       (((Constructor ((path_name ((path ()) (base []))) (depth 1)) ())
         (Constructor ((path_name ((path ()) (base []))) (depth 1)) ()))
        ((Constructor ((path_name ((path ()) (base cons))) (depth 1))
          ((Variable x) (Variable l)))
         (Constructor ((path_name ((path ()) (base cons))) (depth 1))
          ((Apply (Variable ((path_name ((path ()) (base f))) (depth 0)))
            ((Variable ((path_name ((path ()) (base x))) (depth 0)))))
           (Apply (Variable ((path_name ((path ()) (base f_map))) (depth 0)))
            ((Variable ((path_name ((path ()) (base f))) (depth 0)))
             (Variable ((path_name ((path ()) (base l))) (depth 0)))))))))))))))
 (Value
  (Known ((file_name tests/ex26.ml) (line 8))
   ((file_name tests/ex26.ml) (line 13)))
  ((is_rec (New false))
   (cases
    ((((name n) (typ_vars ()) (args ())
       (typ ((Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))))
      (LetFun
       ((is_rec (New true))
        (cases
         ((((name sum) (typ_vars ())
            (args
             ((l
               (Apply ((path_name ((path ()) (base list))) (depth 1))
                ((Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))))))
            (typ ((Apply ((path_name ((path ()) (base Z))) (depth 1)) ()))))
           (Match (Variable ((path_name ((path ()) (base l))) (depth 0)))
            (((Constructor ((path_name ((path ()) (base []))) (depth 1)) ())
              (Constant (Int 0)))
             ((Constructor ((path_name ((path ()) (base cons))) (depth 1))
               ((Variable x) (Variable l)))
              (Apply
               (Variable ((path_name ((path (Z)) (base add))) (depth 1)))
               ((Variable ((path_name ((path ()) (base x))) (depth 0)))
                (Apply
                 (Variable ((path_name ((path ()) (base sum))) (depth 0)))
                 ((Variable ((path_name ((path ()) (base l))) (depth 0))))))))))))))
       (Apply (Variable ((path_name ((path ()) (base sum))) (depth 0)))
        ((Constructor ((path_name ((path ()) (base cons))) (depth 1))
          ((Constant (Int 1))
           (Constructor ((path_name ((path ()) (base cons))) (depth 1))
            ((Constant (Int 2))
             (Constructor ((path_name ((path ()) (base cons))) (depth 1))
              ((Constant (Int 3))
               (Constructor ((path_name ((path ()) (base []))) (depth 1)) ()))))))))))))))))
