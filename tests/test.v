(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.
Import EqNotations.


Inductive foo : vtag -> Type :=
  | Foo_int : int -> foo int_tag
  | Foo_Bar_string : bar string_tag -> foo (constr_tag "bar_string" (bar string_tag))

with bar : vtag -> Type :=
  | Bar_string : string -> bar string_tag
  | Bar_bool : bool -> bar bool_tag.


Inductive foo : vtag -> Set :=
| C : forall {a : vtag}, decode_vtag a -> foo a.

Module Boxed_set.
  Record signature {a : vtag} {f : Set -> Set} : Set := {
    a := a;
    f := f;
    baz : foo a;
  }.
End Boxed_set.

Definition set (a : vtag) : Set :=
  {f : Set -> Set @ Boxed_set.signature (a := a) (f := f)}.
