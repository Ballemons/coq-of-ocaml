(. -> . -> . -[ 'NonTermination' ]-> .,
  Value
    (rec, 'map_rec', [ 'A'; 'B' ],
      [
        ('counter', Type ('nat'));
        ('f', ('B' -> 'A'));
        ('l', Type ('list', 'B'))
      ], Some Type ('list', 'A')) =
    Match
      ((?, Effect ([ 'NonTermination' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((4, Effect ([ 'NonTermination' ], .)),
                Variable ((4, Effect ([ ], .)), 'l'),
                [
                  (Constructor ('[]'),
                    Constructor
                      ((5,
                        Effect
                          ([
                          ],
                            .)),
                        '[]'));
                  (Constructor ('cons', 'x', 'xs'),
                    Constructor
                      ((6,
                        Effect
                          ([
                            'NonTermination'
                          ],
                            .)),
                        'cons',
                        Apply
                          ((6,
                            Effect
                              ([
                              ],
                                .)),
                            Variable
                              ((6,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'f'),
                            Variable
                              ((6,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'x')),
                        Apply
                          ((?,
                            Effect
                              ([
                                'NonTermination'
                              ],
                                .)),
                            Apply
                              ((6,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'NonTermination'
                                      ]->
                                      .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              'NonTermination'
                                            ]->
                                            .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                ->
                                                .
                                                  -[
                                                    'NonTermination'
                                                  ]->
                                                  .)),
                                        'map_rec'),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        'counter')),
                                Variable
                                  ((6,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'f')),
                            Variable
                              ((6,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'xs'))))
                ]))
        ]))

(. -> . -[ 'Counter'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'map', [ 'A'; 'B' ],
      [ ('f', ('B' -> 'A')); ('l', Type ('list', 'B')) ],
      Some Type ('list', 'A')) =
    Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
            Apply
              ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)),
                Variable
                  ((?, Effect ([ ], . -> . -> . -[ 'NonTermination' ]-> .)),
                    'map_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
            Variable ((?, Effect ([ ], .)), 'f')),
        Variable ((?, Effect ([ ], .)), 'l')))

(. -> . -> . -> . -[ 'NonTermination' ]-> .,
  Value
    (rec, 'fold_rec', [ 'A'; 'B' ],
      [
        ('counter', Type ('nat'));
        ('f', ('A' -> ('B' -> 'A')));
        ('a', 'A');
        ('l', Type ('list', 'B'))
      ], Some 'A') =
    Match
      ((?, Effect ([ 'NonTermination' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((9, Effect ([ 'NonTermination' ], .)),
                Variable ((9, Effect ([ ], .)), 'l'),
                [
                  (Constructor ('[]'),
                    Variable
                      ((10,
                        Effect
                          ([
                          ],
                            .)),
                        'a'));
                  (Constructor ('cons', 'x', 'xs'),
                    Apply
                      ((?,
                        Effect
                          ([
                            'NonTermination'
                          ],
                            .)),
                        Apply
                          ((?,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    'NonTermination'
                                  ]->
                                  .)),
                            Apply
                              ((11,
                                Effect
                                  ([
                                  ],
                                    .
                                      ->
                                      .
                                        -[
                                          'NonTermination'
                                        ]->
                                        .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            ->
                                            .
                                              -[
                                                'NonTermination'
                                              ]->
                                              .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                ->
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      'NonTermination'
                                                    ]->
                                                    .)),
                                        'fold_rec'),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        'counter')),
                                Variable
                                  ((11,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'f')),
                            Apply
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Apply
                                  ((11,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Variable
                                      ((11,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        'f'),
                                    Variable
                                      ((11,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        'a')),
                                Variable
                                  ((11,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    'x'))),
                        Variable
                          ((11,
                            Effect
                              ([
                              ],
                                .)),
                            'xs')))
                ]))
        ]))

(. -> . -> . -[ 'Counter'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'fold', [ 'A'; 'B' ],
      [ ('f', ('A' -> ('B' -> 'A'))); ('a', 'A'); ('l', Type ('list', 'B')) ],
      Some 'A') =
    Let (?, Effect ([ 'Counter'; 'NonTermination' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'NonTermination' ]-> .)),
            Apply
              ((?, Effect ([ ], . -> . -[ 'NonTermination' ]-> .)),
                Apply
                  ((?, Effect ([ ], . -> . -> . -[ 'NonTermination' ]-> .)),
                    Variable
                      ((?,
                        Effect ([ ], . -> . -> . -> . -[ 'NonTermination' ]-> .)),
                        'fold_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
                Variable ((?, Effect ([ ], .)), 'f')),
            Variable ((?, Effect ([ ], .)), 'a')),
        Variable ((?, Effect ([ ], .)), 'l')))

(.,
  Value (non_rec, 'l', [ ], [ ], Some Type ('list', Type ('Z'))) =
    Constructor
      ((13, Effect ([ ], .)), 'cons', Constant ((13, Effect ([ ], .)), Int(5)),
        Constructor
          ((13, Effect ([ ], .)), 'cons',
            Constant ((13, Effect ([ ], .)), Int(6)),
            Constructor
              ((13, Effect ([ ], .)), 'cons',
                Constant ((13, Effect ([ ], .)), Int(7)),
                Constructor
                  ((13, Effect ([ ], .)), 'cons',
                    Constant ((13, Effect ([ ], .)), Int(2)),
                    Constructor ((13, Effect ([ ], .)), '[]'))))))

(. -> . -[ 'Counter'; 'NonTermination' ]-> .,
  Value
    (non_rec, 'n', [ 'A' ],
      [
        ('incr', (Type ('Z') -> 'A'));
        ('plus', (Type ('Z') -> ('A' -> Type ('Z'))))
      ], Some Type ('Z')) =
    Apply
      ((?, Effect ([ 'Counter'; 'NonTermination' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'Counter'; 'NonTermination' ]-> .)),
            Apply
              ((16, Effect ([ ], . -> . -[ 'Counter'; 'NonTermination' ]-> .)),
                Variable
                  ((16,
                    Effect
                      ([ ], . -> . -> . -[ 'Counter'; 'NonTermination' ]-> .)),
                    'fold'),
                Function
                  ((16, Effect ([ ], . -> . -> .)), 'x',
                    Function
                      ((16, Effect ([ ], . -> .)), 'y',
                        Apply
                          ((?, Effect ([ ], .)),
                            Apply
                              ((16, Effect ([ ], .)),
                                Variable ((16, Effect ([ ], .)), 'plus'),
                                Variable ((16, Effect ([ ], .)), 'x')),
                            Variable ((16, Effect ([ ], .)), 'y'))))),
            Constant ((16, Effect ([ ], .)), Int(0))),
        Apply
          ((?, Effect ([ 'Counter'; 'NonTermination' ], .)),
            Apply
              ((16, Effect ([ ], . -[ 'Counter'; 'NonTermination' ]-> .)),
                Variable
                  ((16,
                    Effect ([ ], . -> . -[ 'Counter'; 'NonTermination' ]-> .)),
                    'map'), Variable ((16, Effect ([ ], .)), 'incr')),
            Variable ((16, Effect ([ ], .)), 'l'))))
