((),
  Value
    (non_rec, 'tail', [ 'A' ], [ ('l', Type ('list', 'A')) ],
      Some Monad ([ 'Failure' ], Type ('list', 'A'))) =
    Match
      (?, Variable (?, 'l'),
        [
          (Constructor ('cons', Any, 'xs'), Return (?, Variable (?, 'xs')));
          (Constructor ('[]'),
            Apply
              (?, Variable (?, 'failwith'),
                Constant
                  (?,
                    String("Cannot take the tail of an empty list."))))
        ]))

((),
  Value
    (rec, 'print_list_rec', [ ],
      [
        ('counter', Type ('nat'));
        ('match_var_0', Type ('list', Type ('string')))
      ], Some Monad ([ 'IO'; 'NonTermination' ], Type ('unit'))) =
    Match
      (?, Variable (?, 'counter'),
        [
          (Nat(0),
            Lift
              (?, [ 'NonTermination' ], [ 'IO'; 'NonTermination' ],
                Apply
                  (?, Variable (?, 'not_terminated'),
                    Variable (?, 'tt'))));
          (Constructor ('S', 'counter'),
            Match
              (?, Variable (?, 'match_var_0'),
                [
                  (Constructor ('[]'),
                    Return
                      (?,
                        Constructor
                          (?,
                            'tt')));
                  (Constructor ('cons', 'x', 'xs'),
                    Bind
                      (?,
                        Lift
                          (?,
                            [
                              'IO'
                            ],
                            [
                              'IO';
                              'NonTermination'
                            ],
                            Apply
                              (?,
                                Variable
                                  (?,
                                    'print_string'),
                                Variable
                                  (?,
                                    'x'))),
                        None,
                        Apply
                          (?,
                            Apply
                              (?,
                                Variable
                                  (?,
                                    'print_list_rec'),
                                Variable
                                  (?,
                                    'counter')),
                            Variable
                              (?,
                                'xs'))))
                ]))
        ]))

((),
  Value
    (non_rec, 'print_list', [ ],
      [ ('match_var_0', Type ('list', Type ('string'))) ],
      Some Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit'))) =
    Bind
      (?,
        Lift
          (?, [ 'Counter' ], [ 'Counter'; 'IO'; 'NonTermination' ],
            Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
        Some 'counter',
        Lift
          (?, [ 'IO'; 'NonTermination' ], [ 'Counter'; 'IO'; 'NonTermination' ],
            Apply
              (?,
                Apply
                  (?, Variable (?, 'print_list_rec'), Variable (?, 'counter')),
                Variable (?, 'match_var_0')))))

((),
  Value
    (non_rec, 'f', [ ], [ ],
      Some
        (Type ('list', Type ('string')) ->
          Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit')))) =
    Variable (?, 'print_list'))

((),
  Value
    (non_rec, 'x', [ 'A' ], [ ('z', 'A') ],
      Some
        Monad ([ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], Type ('unit')))
    =
    Bind
      (?,
        Lift
          (?, [ 'Failure' ], [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ],
            Apply
              (?, Variable (?, 'tail'),
                Constructor
                  (?, 'cons', Constant (?, String("Stop")),
                    Constructor
                      (?, 'cons', Constant (?, String("Hello")),
                        Constructor
                          (?, 'cons', Constant (?, String(" ")),
                            Constructor
                              (?, 'cons', Constant (?, String("world")),
                                Constructor (?, '[]'))))))), Some 'x',
        Lift
          (?, [ 'Counter'; 'IO'; 'NonTermination' ],
            [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ],
            Apply (?, Variable (?, 'f'), Variable (?, 'x')))))
