Value
  (non_rec, 'tail', [ 'A' ], [ ('l', Type ('list', 'A')) ], Some
    Monad ([ 'Failure' ], Type ('list', 'A'))) =
  Match
    ('l',
      [
        (Constructor ('cons', Any, 'xs'), Return ('xs'));
        (Constructor ('[]'),
          Apply
            ('failwith',
              String("Cannot take the tail of an empty list.")))
      ])

Value
  (rec, 'print_list_rec', [ ],
    [
      ('counter', Type ('nat'));
      ('match_var_0', Type ('list', Type ('string')))
    ], Some Monad ([ 'IO'; 'NonTermination' ], Type ('unit'))) =
  Match
    ('counter',
      [
        (Nat(0),
          Lift
            ([ 'NonTermination' ], [ 'IO'; 'NonTermination' ],
              Apply ('not_terminated', 'tt')));
        (Constructor ('S', 'counter'),
          Match
            ('match_var_0',
              [
                (Constructor ('[]'),
                  Return
                    (Constructor
                      ('tt')));
                (Constructor ('cons', 'x', 'xs'),
                  Bind
                    (Lift
                      ([
                        'IO'
                      ],
                        [
                          'IO';
                          'NonTermination'
                        ],
                        Apply
                          ('print_string',
                            'x')),
                      None,
                      Apply
                        (Apply
                          ('print_list_rec',
                            'counter'),
                          'xs')))
              ]))
      ])

Value
  (non_rec, 'print_list', [ ],
    [ ('match_var_0', Type ('list', Type ('string'))) ], Some
    Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit'))) =
  Bind
    (Lift
      ([ 'Counter' ], [ 'Counter'; 'IO'; 'NonTermination' ],
        Apply ('read_counter', 'tt')), Some 'counter',
      Lift
        ([ 'IO'; 'NonTermination' ], [ 'Counter'; 'IO'; 'NonTermination' ],
          Apply (Apply ('print_list_rec', 'counter'), 'match_var_0')))

Value
  (non_rec, 'f', [ ], [ ], Some
    (Type ('list', Type ('string')) ->
      Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit')))) =
  'print_list'

Value
  (non_rec, 'x', [ 'A' ], [ ('z', 'A') ], Some
    Monad ([ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], Type ('unit'))) =
  Bind
    (Lift
      ([ 'Failure' ], [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ],
        Apply
          ('tail',
            Constructor
              ('cons', String("Stop"),
                Constructor
                  ('cons', String("Hello"),
                    Constructor
                      ('cons', String(" "),
                        Constructor
                          ('cons', String("world"), Constructor ('[]'))))))),
      Some 'x',
      Lift
        ([ 'Counter'; 'IO'; 'NonTermination' ],
          [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], Apply ('f', 'x')))
