((),
  Value
    (non_rec, 'tail', [ 'A' ], [ ('l', Type ('list', 'A')) ],
      Some Monad ([ 'Failure' ], Type ('list', 'A'))) =
    Match
      (unknown, Variable (unknown, 'l'),
        [
          (Constructor ('cons', Any, 'xs'),
            Return (unknown, Variable (unknown, 'xs')));
          (Constructor ('[]'),
            Apply
              (unknown, Variable (unknown, 'failwith'),
                Constant
                  (unknown,
                    String("Cannot take the tail of an empty list."))))
        ]))

((),
  Value
    (rec, 'print_list_rec', [ ],
      [
        ('counter', Type ('nat'));
        ('match_var_0', Type ('list', Type ('string')))
      ], Some Monad ([ 'IO'; 'NonTermination' ], Type ('unit'))) =
    Match
      (unknown, Variable (unknown, 'counter'),
        [
          (Nat(0),
            Lift
              (unknown, [ 'NonTermination' ],
                [ 'IO'; 'NonTermination' ],
                Apply
                  (unknown,
                    Variable
                      (unknown,
                        'not_terminated'),
                    Variable (unknown, 'tt'))));
          (Constructor ('S', 'counter'),
            Match
              (unknown, Variable (unknown, 'match_var_0'),
                [
                  (Constructor ('[]'),
                    Return
                      (unknown,
                        Constructor
                          (unknown,
                            'tt')));
                  (Constructor ('cons', 'x', 'xs'),
                    Bind
                      (unknown,
                        Lift
                          (unknown,
                            [
                              'IO'
                            ],
                            [
                              'IO';
                              'NonTermination'
                            ],
                            Apply
                              (unknown,
                                Variable
                                  (unknown,
                                    'print_string'),
                                Variable
                                  (unknown,
                                    'x'))),
                        None,
                        Apply
                          (unknown,
                            Apply
                              (unknown,
                                Variable
                                  (unknown,
                                    'print_list_rec'),
                                Variable
                                  (unknown,
                                    'counter')),
                            Variable
                              (unknown,
                                'xs'))))
                ]))
        ]))

((),
  Value
    (non_rec, 'print_list', [ ],
      [ ('match_var_0', Type ('list', Type ('string'))) ],
      Some Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit'))) =
    Bind
      (unknown,
        Lift
          (unknown, [ 'Counter' ], [ 'Counter'; 'IO'; 'NonTermination' ],
            Apply
              (unknown, Variable (unknown, 'read_counter'),
                Variable (unknown, 'tt'))), Some 'counter',
        Lift
          (unknown, [ 'IO'; 'NonTermination' ],
            [ 'Counter'; 'IO'; 'NonTermination' ],
            Apply
              (unknown,
                Apply
                  (unknown, Variable (unknown, 'print_list_rec'),
                    Variable (unknown, 'counter')),
                Variable (unknown, 'match_var_0')))))

((),
  Value
    (non_rec, 'f', [ ], [ ],
      Some
        (Type ('list', Type ('string')) ->
          Monad ([ 'Counter'; 'IO'; 'NonTermination' ], Type ('unit')))) =
    Variable (unknown, 'print_list'))

((),
  Value
    (non_rec, 'x', [ 'A' ], [ ('z', 'A') ],
      Some
        Monad ([ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ], Type ('unit')))
    =
    Bind
      (unknown,
        Lift
          (unknown, [ 'Failure' ],
            [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ],
            Apply
              (unknown, Variable (unknown, 'tail'),
                Constructor
                  (unknown, 'cons', Constant (unknown, String("Stop")),
                    Constructor
                      (unknown, 'cons', Constant (unknown, String("Hello")),
                        Constructor
                          (unknown, 'cons', Constant (unknown, String(" ")),
                            Constructor
                              (unknown, 'cons',
                                Constant (unknown, String("world")),
                                Constructor (unknown, '[]'))))))), Some 'x',
        Lift
          (unknown, [ 'Counter'; 'IO'; 'NonTermination' ],
            [ 'Counter'; 'IO'; 'Failure'; 'NonTermination' ],
            Apply (unknown, Variable (unknown, 'f'), Variable (unknown, 'x')))))
