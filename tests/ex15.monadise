Inductive 'set':
  ([ ], [ ('Empty', [ ]); ('Node', [ Type ('set'); Type ('Z'); Type ('set') ]) ])

((),
  Value (non_rec, 'empty', [ ], [ ], Some Type ('set')) =
    Constructor (7, 'Empty'))

((),
  Value
    (rec, 'member_rec', [ ],
      [ ('counter', Type ('nat')); ('x', Type ('Z')); ('s', Type ('set')) ],
      Some Monad ([ 'NonTermination' ], Type ('bool'))) =
    Match
      (?, Variable (?, 'counter'),
        [
          (Nat(0),
            Apply (?, Variable (?, 'not_terminated'), Variable (?, 'tt')));
          (Constructor ('S', 'counter'),
            Match
              (10, Variable (10, 's'),
                [
                  (Constructor ('Empty'),
                    Return
                      (?,
                        Constructor
                          (11,
                            'false')));
                  (Constructor ('Node', 's1', 'y', 's2'),
                    IfThenElse
                      (13,
                        Apply
                          (?,
                            Apply
                              (13,
                                Variable
                                  (13,
                                    'Z.ltb'),
                                Variable
                                  (13,
                                    'x')),
                            Variable
                              (13,
                                'y')),
                        Apply
                          (?,
                            Apply
                              (14,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        'member_rec'),
                                    Variable
                                      (?,
                                        'counter')),
                                Variable
                                  (14,
                                    'x')),
                            Variable
                              (14,
                                's1')),
                        IfThenElse
                          (15,
                            Apply
                              (?,
                                Apply
                                  (15,
                                    Variable
                                      (15,
                                        'Z.ltb'),
                                    Variable
                                      (15,
                                        'y')),
                                Variable
                                  (15,
                                    'x')),
                            Apply
                              (?,
                                Apply
                                  (16,
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            'member_rec'),
                                        Variable
                                          (?,
                                            'counter')),
                                    Variable
                                      (16,
                                        'x')),
                                Variable
                                  (16,
                                    's2')),
                            Return
                              (?,
                                Constructor
                                  (18,
                                    'true')))))
                ]))
        ]))

((),
  Value
    (non_rec, 'member', [ ], [ ('x', Type ('Z')); ('s', Type ('set')) ],
      Some Monad ([ 'Counter'; 'NonTermination' ], Type ('bool'))) =
    Bind
      (?,
        Lift
          (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
            Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
        Some 'counter',
        Lift
          (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
            Apply
              (?,
                Apply
                  (?,
                    Apply
                      (?, Variable (?, 'member_rec'), Variable (?, 'counter')),
                    Variable (?, 'x')), Variable (?, 's')))))

((),
  Value
    (rec, 'insert_rec', [ ],
      [ ('counter', Type ('nat')); ('x', Type ('Z')); ('s', Type ('set')) ],
      Some Monad ([ 'NonTermination' ], Type ('set'))) =
    Match
      (?, Variable (?, 'counter'),
        [
          (Nat(0),
            Apply (?, Variable (?, 'not_terminated'), Variable (?, 'tt')));
          (Constructor ('S', 'counter'),
            Match
              (21, Variable (21, 's'),
                [
                  (Constructor ('Empty'),
                    Return
                      (?,
                        Constructor
                          (22,
                            'Node',
                            Constructor
                              (22,
                                'Empty'),
                            Variable
                              (22,
                                'x'),
                            Constructor
                              (22,
                                'Empty'))));
                  (Constructor ('Node', 's1', 'y', 's2'),
                    IfThenElse
                      (24,
                        Apply
                          (?,
                            Apply
                              (24,
                                Variable
                                  (24,
                                    'Z.ltb'),
                                Variable
                                  (24,
                                    'x')),
                            Variable
                              (24,
                                'y')),
                        Bind
                          (?,
                            Apply
                              (?,
                                Apply
                                  (25,
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            'insert_rec'),
                                        Variable
                                          (?,
                                            'counter')),
                                    Variable
                                      (25,
                                        'x')),
                                Variable
                                  (25,
                                    's1')),
                            Some
                              'x',
                            Return
                              (?,
                                Constructor
                                  (25,
                                    'Node',
                                    Variable
                                      (?,
                                        'x'),
                                    Variable
                                      (25,
                                        'y'),
                                    Variable
                                      (25,
                                        's2')))),
                        IfThenElse
                          (26,
                            Apply
                              (?,
                                Apply
                                  (26,
                                    Variable
                                      (26,
                                        'Z.ltb'),
                                    Variable
                                      (26,
                                        'y')),
                                Variable
                                  (26,
                                    'x')),
                            Bind
                              (?,
                                Apply
                                  (?,
                                    Apply
                                      (27,
                                        Apply
                                          (?,
                                            Variable
                                              (?,
                                                'insert_rec'),
                                            Variable
                                              (?,
                                                'counter')),
                                        Variable
                                          (27,
                                            'x')),
                                    Variable
                                      (27,
                                        's2')),
                                Some
                                  'x',
                                Return
                                  (?,
                                    Constructor
                                      (27,
                                        'Node',
                                        Variable
                                          (27,
                                            's1'),
                                        Variable
                                          (27,
                                            'y'),
                                        Variable
                                          (?,
                                            'x')))),
                            Return
                              (?,
                                Variable
                                  (28,
                                    's')))))
                ]))
        ]))

((),
  Value
    (non_rec, 'insert', [ ], [ ('x', Type ('Z')); ('s', Type ('set')) ],
      Some Monad ([ 'Counter'; 'NonTermination' ], Type ('set'))) =
    Bind
      (?,
        Lift
          (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
            Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
        Some 'counter',
        Lift
          (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
            Apply
              (?,
                Apply
                  (?,
                    Apply
                      (?, Variable (?, 'insert_rec'), Variable (?, 'counter')),
                    Variable (?, 'x')), Variable (?, 's')))))
