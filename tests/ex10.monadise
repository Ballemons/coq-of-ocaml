Module 'List2':
  Inductive 't':
    ([ 'a' ], [ ('Nil', [ ]); ('Cons', [ 'a'; Type ('t', 'a') ]) ])
  
  ((),
    Value
      (rec, 'sum_rec', [ ],
        [ ('counter', Type ('nat')); ('l', Type ('t', Type ('Z'))) ],
        Some Monad ([ 'NonTermination' ], Type ('Z'))) =
      Match
        (?, Variable (?, 'counter'),
          [
            (Nat(0),
              Apply
                (?, Variable (?, 'not_terminated'),
                  Variable (?, 'tt')));
            (Constructor ('S', 'counter'),
              Match
                (?, Variable (?, 'l'),
                  [
                    (Constructor ('Nil'),
                      Return
                        (?,
                          Constant
                            (?,
                              Int(0))));
                    (Constructor
                      ('Cons',
                        'x',
                        'xs'),
                      Bind
                        (?,
                          Apply
                            (?,
                              Apply
                                (?,
                                  Variable
                                    (?,
                                      'sum_rec'),
                                  Variable
                                    (?,
                                      'counter')),
                              Variable
                                (?,
                                  'xs')),
                          Some
                            'x_1',
                          Return
                            (?,
                              Apply
                                (?,
                                  Apply
                                    (?,
                                      Variable
                                        (?,
                                          'Z.add'),
                                      Variable
                                        (?,
                                          'x')),
                                  Variable
                                    (?,
                                      'x_1')))))
                  ]))
          ]))
  
  ((),
    Value
      (non_rec, 'sum', [ ], [ ('l', Type ('t', Type ('Z'))) ],
        Some Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
      Bind
        (?,
          Lift
            (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
              Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
          Some 'counter',
          Lift
            (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
              Apply
                (?, Apply (?, Variable (?, 'sum_rec'), Variable (?, 'counter')),
                  Variable (?, 'l')))))
  
  ((),
    Value
      (rec, 'of_list_rec', [ 'A' ],
        [ ('counter', Type ('nat')); ('match_var_0', Type ('list', 'A')) ],
        Some Monad ([ 'NonTermination' ], Type ('t', 'A'))) =
      Match
        (?, Variable (?, 'counter'),
          [
            (Nat(0),
              Apply
                (?, Variable (?, 'not_terminated'),
                  Variable (?, 'tt')));
            (Constructor ('S', 'counter'),
              Match
                (?, Variable (?, 'match_var_0'),
                  [
                    (Constructor ('[]'),
                      Return
                        (?,
                          Constructor
                            (?,
                              'Nil')));
                    (Constructor
                      ('cons',
                        'x',
                        'xs'),
                      Bind
                        (?,
                          Apply
                            (?,
                              Apply
                                (?,
                                  Variable
                                    (?,
                                      'of_list_rec'),
                                  Variable
                                    (?,
                                      'counter')),
                              Variable
                                (?,
                                  'xs')),
                          Some
                            'x_1',
                          Return
                            (?,
                              Constructor
                                (?,
                                  'Cons',
                                  Variable
                                    (?,
                                      'x'),
                                  Variable
                                    (?,
                                      'x_1')))))
                  ]))
          ]))
  
  ((),
    Value
      (non_rec, 'of_list', [ 'A' ], [ ('match_var_0', Type ('list', 'A')) ],
        Some Monad ([ 'Counter'; 'NonTermination' ], Type ('t', 'A'))) =
      Bind
        (?,
          Lift
            (?, [ 'Counter' ], [ 'Counter'; 'NonTermination' ],
              Apply (?, Variable (?, 'read_counter'), Variable (?, 'tt'))),
          Some 'counter',
          Lift
            (?, [ 'NonTermination' ], [ 'Counter'; 'NonTermination' ],
              Apply
                (?,
                  Apply
                    (?, Variable (?, 'of_list_rec'), Variable (?, 'counter')),
                  Variable (?, 'match_var_0')))))
  
  Module 'Inside':
    ((),
      Value (non_rec, 'x', [ ], [ ], Some Type ('Z')) =
        Constant (?, Int(12)))

((),
  Value
    (non_rec, 'n', [ ], [ ],
      Some Monad ([ 'Counter'; 'NonTermination' ], Type ('Z'))) =
    Bind
      (?,
        Apply
          (?, Variable (?, 'List2.of_list'),
            Constructor
              (?, 'cons', Constant (?, Int(5)),
                Constructor
                  (?, 'cons', Constant (?, Int(7)),
                    Constructor
                      (?, 'cons', Constant (?, Int(6)),
                        Constructor
                          (?, 'cons', Variable (?, 'List2.Inside.x'),
                            Constructor (?, '[]')))))), Some 'x',
        Apply (?, Variable (?, 'List2.sum'), Variable (?, 'x'))))
