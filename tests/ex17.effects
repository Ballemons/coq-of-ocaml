Exception ('TailLess', ())

Exception ('Wtf', (Type ('Z') * Type ('string')))

(. -[ 'TailLess' ]-> .,
  Value (non_rec, 'f', [ 'A'; 'B' ], [ ('x', 'B') ], Some 'A') =
    Apply
      ((7, Effect ([ 'TailLess' ], .)),
        Variable ((7, Effect ([ ], . -[ 'TailLess' ]-> .)), 'raise_TailLess'),
        Tuple ((?, Effect ([ ], .)))))

(. -[ 'Wtf' ]-> .,
  Value (non_rec, 'g', [ 'A'; 'B' ], [ ('x', 'B') ], Some 'A') =
    Apply
      ((9, Effect ([ 'Wtf' ], .)),
        Variable ((9, Effect ([ ], . -[ 'Wtf' ]-> .)), 'raise_Wtf'),
        Tuple
          ((?, Effect ([ ], .)), Constant ((9, Effect ([ ], .)), Int(12)),
            Constant ((9, Effect ([ ], .)), String("no")))))

(. -> . -[ 'IO'; 'NonTermination'; 'TailLess' ]-> .,
  Value
    (rec, 'h_rec', [ 'A' ],
      [ ('counter', Type ('nat')); ('l', Type ('list', 'A')) ], Some 'A') =
    Match
      ((?, Effect ([ 'IO'; 'NonTermination'; 'TailLess' ], .)),
        Variable ((?, Effect ([ ], .)), 'counter'),
        [
          (Nat(0),
            Apply
              ((?, Effect ([ 'NonTermination' ], .)),
                Variable
                  ((?,
                    Effect
                      ([ ],
                        .
                          -[
                            'NonTermination'
                          ]-> .)),
                    'not_terminated'),
                Variable ((?, Effect ([ ], .)), 'tt')));
          (Constructor ('S', 'counter'),
            Match
              ((12,
                Effect
                  ([ 'IO'; 'NonTermination'; 'TailLess' ],
                    .)),
                Variable ((12, Effect ([ ], .)), 'l'),
                [
                  (Constructor ('[]'),
                    Sequence
                      ((13,
                        Effect
                          ([
                            'IO';
                            'TailLess'
                          ],
                            .)),
                        Apply
                          ((13,
                            Effect
                              ([
                                'IO'
                              ],
                                .)),
                            Variable
                              ((13,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'IO'
                                      ]->
                                      .)),
                                'print_string'),
                            Constant
                              ((13,
                                Effect
                                  ([
                                  ],
                                    .)),
                                String("no tail"))),
                        Apply
                          ((13,
                            Effect
                              ([
                                'TailLess'
                              ],
                                .)),
                            Variable
                              ((13,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        'TailLess'
                                      ]->
                                      .)),
                                'raise_TailLess'),
                            Tuple
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .))))));
                  (Constructor
                    ('cons',
                      'x',
                      Constructor
                        ('[]')),
                    Variable
                      ((14,
                        Effect
                          ([
                          ],
                            .)),
                        'x'));
                  (Constructor ('cons', Any, 'xs'),
                    Apply
                      ((15,
                        Effect
                          ([
                            'IO';
                            'NonTermination';
                            'TailLess'
                          ],
                            .)),
                        Apply
                          ((?,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    'IO';
                                    'NonTermination';
                                    'TailLess'
                                  ]->
                                  .)),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      ->
                                      .
                                        -[
                                          'IO';
                                          'NonTermination';
                                          'TailLess'
                                        ]->
                                        .)),
                                'h_rec'),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .)),
                                'counter')),
                        Variable
                          ((15,
                            Effect
                              ([
                              ],
                                .)),
                            'xs')))
                ]))
        ]))

(. -[ 'Counter'; 'IO'; 'NonTermination'; 'TailLess' ]-> .,
  Value (non_rec, 'h', [ 'A' ], [ ('l', Type ('list', 'A')) ], Some 'A') =
    Let (?, Effect ([ 'Counter'; 'IO'; 'NonTermination'; 'TailLess' ], .))
      (non_rec, 'counter', [ ], [ ], None) =
      Apply
        ((?, Effect ([ 'Counter' ], .)),
          Variable ((?, Effect ([ ], . -[ 'Counter' ]-> .)), 'read_counter'),
          Variable ((?, Effect ([ ], .)), 'tt')) in
    Apply
      ((?, Effect ([ 'IO'; 'NonTermination'; 'TailLess' ], .)),
        Apply
          ((?, Effect ([ ], . -[ 'IO'; 'NonTermination'; 'TailLess' ]-> .)),
            Variable
              ((?,
                Effect ([ ], . -> . -[ 'IO'; 'NonTermination'; 'TailLess' ]-> .)),
                'h_rec'), Variable ((?, Effect ([ ], .)), 'counter')),
        Variable ((?, Effect ([ ], .)), 'l')))
